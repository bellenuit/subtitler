#tag ClassProtected Class cTitlelistConverter	#tag Method, Flags = &h1		Protected Function ChangeSeparators(s as string) As string		  dim result as string		  		  result = s		  'result = replaceall(result,endofLine.windows,endofLine.macintosh)		  'result = replaceall(result,endofLine.unix,endofLine.macintosh)		  result = replacelineEndings(result,endofLine)		  		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Convert(s as string, istring as string="")		  dim s2 as string		  titlelist = new ctitlelist		  redim edls(-1)		  		  italicstring = istring		  		  if binaryfile then		    doconvert s		  else		    s2 = s		    if s2.Encoding = encodings.uTF16 then		      s2 = s2.convertEncoding(encodings.utf8)		      userencoding = encodings.utf8		    end		    s2 = replacelineEndings(s2,endofLine)		    doconvert s2		  end		exception err as nilObjectException		  msgbox "Could not convert the file. Please send the file to matti@belle-nuit.com"		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CreateEDL(edltitle as string, startevent as integer, endevent as integer)		  dim edl as cedl		  dim i,s,e,ev as integer		  dim evnt as cedlevent		  dim thetitle as cTitle		  		  s = max(startevent,0)		  e = min(endevent,ubound(titlelist.titles))		  		  edl = new cedl		  edls.append edl		  edl.title = edltitle		  		  for i = s to e		    thetitle = titlelist.titles(i)		    if thetitle.start <>"" and thetitle.ende <> "" and thetitle.start <> "00:00:00:00" then		      evnt = new cedlevent		      edl.events.append evnt		      ev = ev + 1		      evnt.eventnr = ev		      // edls with only 250 events, avid compatibility no more than 250 different tapes		      if e-s < 255 then		        evnt.tape = thetitle.eventnr		      else		        evnt.tape = thetitle.eventnr mod 200		      end		      evnt.filename = thetitle.filename		      evnt.sourcein = thetitle.start		      evnt.recordin = thetitle.start		      evnt.sourceout = thetitle.ende		      evnt.recordout = thetitle.ende		      if clipnames and ubound(thetitle.lines)>-1 then		        evnt.comment = thetitle.lines(0)		      end		    end		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Export(ed as edittitle) As string		  style = ed.style		  return doexport(ed)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GuessFieldSeparator(s as string) As string		  dim i,l as integer		  dim test as string		  l = len(s)		  for i = 1 to l		    test = mid(s,i,1)		    if instr("01234567890.:;",test) = 0 then		      return test		    end		  next		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GuessSeparator(s as string) As string		  return endofLine		  		  'if instr(s,endofLine.windows)>0 then		  'return endofLine.windows		  'elseif instr(s,endofline.macintosh)>0 then		  'return endofLine.macintosh		  'else		  'return endofLine.UNIX		  'end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsItalic(pos as integer) As boolean		  return (mid(italicstring,pos,1) = "I")		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Latin8522UTF8(t as string) As string		  dim m as memoryBlock		  dim i,le,offset, test as integer		  dim letter,result as string		  dim s as string		  		  dim d as new dictionary		  		  		  for i = 0 to 127		    d.value(i) = chr(i)		  next		  // http://en.wikipedia.org/wiki/Code_page_852"		  s = "ÇüéâäůćçłëŐőîŹÄĆ"		  s = s + "ÉĹĺôöĽľŚśÖÜŤťŁ_č"		  s = s + "áíóúĄąŽžĘę_źČş«»"		  s = s + "___ǀ_ÁÂÊŞ____Żż_"		  s = s + "______Ăă________"		  s = s + "đĐĎËďŇÍÎê____ŢŮ_"		  s = s + "ÓßÔŃńňŠšŔÚŕŰýÝț´"		  s = s + "-____§÷____űŘř__"		  if len(s)<>128 then		    msgbox "len " + str(len(s))		  end		  for i = 1 to 128		    letter = mid(s,i,1)		    letter = letter.defineEncoding(encodings.utf8)		    if letter<>"_" then		      d.value(i+127) = letter		    end		  next		  // exception new line will overwrite special character Ő		  'd.value( &h8a ) = chr(13)		  '// italics		  'd.value( &h80) = "<i>"		  'd.value( &h81) = "</i>"		  'd.value( &h07) = "" // teletext alpha white		  		  		  		  le = lenB(t)		  m = newmemoryBlock(le)		  m.stringValue(0,le) = t		  		  for i = 1 to le		    test = m.byte(offset)		    if d.hasKey(test) then		      letter = d.value(test).stringValue		      letter = letter.defineEncoding(encodings.utf8)		      result = result + letter		    else		      select case test		        		      else		        result = result + "<"+hex(test) +">"		      end		    end		    offset = offset + 1		  next		  result = result.defineEncoding(encodings.utf8)		  return result		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function LatinFloating2UTF8(s as string) As string		  dim m1 as memoryBlock		  dim offset, i, size, test, test2 as integer		  dim result, character as string		  		  size = lenb(s)		  		  if size = 0 then		    return ""		  end		  		  m1 = newmemoryBlock(size)		  		  m1.stringValue(0,size) = s		  		  for i = 0 to size-1		    test = m1.byte(i)		    		    if test < 128 then		      character = m1.stringvalue(i,1)		      character = defineEncoding(character,encodings.dosLatin1) // to verify		      character = convertEncoding(character,encodings.utf8)		      result = result + character		    else		      		      select case test		      case &ha1		        result = result + "¡"		      case &ha2		        result = result + "¢"		      case &ha3		        result = result + "£"		      case &ha4		        result = result + "$"		      case &ha5		        result = result + "¥"		      case &ha7		        result = result + "§"		      case &ha9		        result = result + "'"		      case &haa, &hab		        result = result + """"		      case &hac		        result = result + "←"		      case &had		        result = result + "↑"		      case &hae		        result = result + "→"		      case &haf		        result = result + "↓"		      case &hb0		        result = result + "°"		      case &hb1		        result = result + "±"		      case &hb2		        result = result + "²"		      case &hb3		        result = result + "³"		      case &hb4		        result = result + "×"		      case &hb5		        result = result + "µ"		      case &hb6		        result = result + "¶"		      case &hb7		        result = result + "·"		      case &hb8		        result = result + "÷"		      case &hb9		        result = result + "'"		      case &hba, &hbb		        result = result + """"		      case &hbc		        result = result + "¼"		      case &hbd		        result = result + "½"		      case &hbe		        result = result + "¾"		      case &hbf		        result = result + "¿"		      case &hd0		        result = result + "—"		      case &hd1		        result = result + "¹"		      case &hd2		        result = result + "®"		      case &hd3		        result = result + "©"		      case &hd4		        result = result + "TM"		      case &hd6		        result = result + "¬"		      case &hd7		        result = result + "¦"		      case &he1		        result = result + "Æ"		      case &he2		        result = result + "Đ"		      case &he4		        result = result + "Ħ"		      case &he6		        result = result + "Ĳ"		      case &he7		        result = result + "Ŀ"		      case &he8		        result = result + "Ł"		      case &he9		        result = result + "Ø"		      case &hea		        result = result + "Œ"		      case &heb		        result = result + "Þ"		      case &hed		        result = result + "Ŧ"		      case &hee		        result = result + "Ŋ"		      case &hf1		        result = result + "æ"		      case &hf2		        result = result + "đ"		      case &hf3		        result = result + "ð"		      case &hf4		        result = result + "ħ"		      case &hf6		        result = result + "ĳ"		      case &hf7		        result = result + "ŀ"		      case &hf8		        result = result + "ł"		      case &hf9		        result = result + "ø"		      case &hfa		        result = result + "œ"		      case &hfb		        result = result + "ß"		      case &hfd		        result = result + "ŧ"		      case &hfe		        result = result + "ŋ"		      else		        if test\16 <> &hC then		          // ascii literally		          character = m1.stringvalue(i,1)		          character = defineEncoding(character,encodings.dosLatin1) // to verify		          character = convertEncoding(character,encodings.utf8)		          result = result + character		        else 		          i = i + 1		          if i< size then		            character = m1.stringValue(i,1)		            test2 = instrb("aceinouyACEINOUY",character) // instr ist case-insensitive		            // das geht aber nur, weil alle zeichen ascii sind		            if test2 > 0 then		              select case test		              case &hC1  // 0 empty		                result = result + mid("àcèìnòùyÀCÈÌNÒÙY",test2,1)		              case &hC2		                result = result + mid("ácéínóúyACÉINOUY",test2,1)		              case &hC3		                result = result + mid("âcêînôûyÂCÊÎNÔÛY",test2,1)		              case &hC4		                result = result + mid("ãceiñõuyÃCEIÑÕUY",test2,1)		              case &hC5		                result = result + "̄" + character		              case &hC6		                result = result + "̌" + character		              case &hC7		                result = result + "̇" + character		              case &hC8		                result = result + mid("äcëïnöüÿÄcËÏNÖÜŸ",test2,1)		              case &hCA  // 9 empty 		                select case asc(character)		                case asc("a")		                  result = result + "å"		                case asc("A")		                  result = result + "Å"		                else		                  result = result + "̊" + character		                end		              case &hCB		                result = result + mid("açEINOUYAÇEINOUY",test2,1)		              case &hCC		                result = result + "̠" + character		              case &hCD		                result = result + "̋" + character		              case &hCE		                result = result + "̨"  + character // to verify		              case &hCF		                result = result + "̆" + character		              end		            end		          end		        end		      end		    end		  next		  result = result.defineEncoding(encodings.utf8)		  return result		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function MakeItalic(t as string, offset as integer) As string		  dim bi as boolean		  dim k as integer		  dim result as string		  		  bi = false		  for k = 1 to len(t)		    if isitalic(offset+k-1) then		      if not bi then result = result + "<i>"		      bi = true		      result = result + mid(t,k,1)		    else		      if bi then result = result + "</i>"		      bi = false		      result = result + mid(t,k,1)		    end		  next		  if bi then result = result + "</i>"		  		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Progress(n as integer)		  if myprogress<>nil then		    myprogress.value = n		  end		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event DoConvert(s as string)	#tag EndHook	#tag Hook, Flags = &h0		Event DoExport(ed as edittitle) As string	#tag EndHook	#tag Property, Flags = &h0		binaryfile As boolean	#tag EndProperty	#tag Property, Flags = &h0		charactercount As integer	#tag EndProperty	#tag Property, Flags = &h0		clipnames As boolean	#tag EndProperty	#tag Property, Flags = &h0		documentname As string	#tag EndProperty	#tag Property, Flags = &h0		edls(-1) As cedl	#tag EndProperty	#tag Property, Flags = &h0		endline As string	#tag EndProperty	#tag Property, Flags = &h0		framerate As double	#tag EndProperty	#tag Property, Flags = &h0		italicstring As string	#tag EndProperty	#tag Property, Flags = &h0		label As string	#tag EndProperty	#tag Property, Flags = &h1		Protected myprogress As progressBar	#tag EndProperty	#tag Property, Flags = &h0		style As subtitle	#tag EndProperty	#tag Property, Flags = &h0		tc As timecodeold	#tag EndProperty	#tag Property, Flags = &h0		titlelist As ctitlelist	#tag EndProperty	#tag Property, Flags = &h0		userencoding As textencoding	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="binaryfile"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="charactercount"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="clipnames"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="documentname"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="endline"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="framerate"			Group="Behavior"			InitialValue="0"			Type="double"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="italicstring"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="label"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass