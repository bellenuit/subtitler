#tag ClassProtected Class TimeCodeOld	#tag Method, Flags = &h0		Function About() As string		  return "TimeCodeOld class © Matthias Bürcher 2000 http://www.belle-nuit.com"    // <-- CONVERTED		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  Constructor(25.0)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(fpsin as double)		  if round(fpsin*100) = 2398 then		    fpsin = 24000.0/1001.0		  end		  		  fpsP = fpsin		  pulldownP = false		  gaugeP = 35		  errorP = false		  errormessageP = ""		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function dropIt(frames as integer) As integer		  dim minutes, tenminutes, dropbit as integer		  minutes = frames \ 1800		  tenminutes = frames \ 18000		  if (frames Mod 1800) = 0 and (frames mod 18000) > 0 then		    dropbit = 1		  else		    dropbit= 0		  end if		  return frames - 2*minutes + 2* tenminutes + dropbit		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Error() As boolean		  return errorP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Errormessage() As string		  return errormessageP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FeetToFrames(feet as double) As integer		  dim g as integer		  errorP = false		  errormessageP = ""		  select case gaugeP		  case 16		    g = 40		  case 35		    g = 16		  else		    errorP = true		    errormessageP = "Invalid Gauge. Only 16 and 35 are allowed."		    return 0		  end		  if feet < 0 then		    errorP = true		    errormessageP = "Invalid Feet. Feet must be positive."		    return 0		  end		  return floor(feet)*g + 100*(feet-floor(feet))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FeetToTC(feet as double) As integer		  dim test as integer		  errorP = false		  errormessageP = ""		  test = feettoframes(feet)		  if errorP then		    return 0		  end		  test = framestotc(test)		  if errorP then		    return 0		  end		  return test		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Fps() As double		  return fpsP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Fps(infps as double)		  errorP = false		  errormessageP = ""		  if fps>0 and fps<100 then		    fpsP = infps		  else		    errorP = true		    errormessageP = "Invalid Fps. Fps must been greater than 0 and smaller than 100."		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function FramesToFeet(frames as integer) As double		  dim g as integer		  errorP = false		  errormessageP = ""		  select case gaugeP		  case 16		    g = 40		  case 35		    g = 16		  else		    errorP = true		    errormessageP = "Invalid Gauge. Only 16 and 35 are allowed."		    return 0		  end		  if frames < 0 then		    errorP = true		    errormessageP = "Invalid Frames. Frames must be positive."		    return 0		  end		  return  frames \ g + (frames mod g) / 100		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FramesToKey(frames as integer, Prefix as string) As string		  dim g as integer		  dim fr as integer		  errorP = false		  errormessageP = ""		  select case gaugeP		  case 16		    g = 20		  case 35		    g = 16		  else		    errorP = true		    errormessageP = "Invalid Gauge. Only 16 and 35 are allowed."		    return ""		  end		  if frames < 0 then		    errorP = true		    errormessageP = "Invalid Frames. Frames must be positive."		    return ""		  end		  fr = frames \ g		  if fr > 9999 then		    errorP = true		    errormessageP = "Invalid Frames. Overflow"		    return ""		  end		  return prefix + right(format(fr,"0000"),4) + "+" + format(frames mod g,"00")		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FramesToMeter(frames as integer) As double		  dim g as integer		  errorP = false		  errormessageP = ""		  select case gaugeP		  case 16		    g = 40 / 0.3048		  case 35		    g = 16 / 0.3048		  else		    errorP = true		    errormessageP = "Invalid Gauge. Only 16 and 35 are allowed."		    return 0		  end		  if frames < 0 then		    errorP = true		    errormessageP = "Invalid Frames. Frames must be positive."		    return 0		  end		  return frames / g		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function FramesToTC(frames as integer) As integer		  		  return  FramesToTC(frames,fpsP)		  		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function FramesToTC(frames as integer, fpsSP as double) As integer		  dim f,s,m,h as integer		  errorP = false		  errormessageP = ""		  if frames < 0 then		    errorP = true		    errormessageP = "Invalid frames. Frames must be positive."		    return 0		  end		  if fpsSP = 29.97 then		    return framestoTC(undropit(frames), 30)		  end if		  if frames < 0 then		    return framestotc(h24+frames,fpsSP)		  end if		  f = frames mod fpsSP		  s = (frames \ fpsSP) mod 60		  m = (frames \ (60*fpsSP)) mod 60		  h = (frames \ (3600*fpsSP)) mod 24		  return f + 100*s + 10000 * m + 1000000 * h		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Gauge() As integer		  return gaugeP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Gauge(g as integer)		  errorP = false		  errormessageP = ""		  if g = 35 or g=16 then		    gaugeP = g		  else		    errorP = true		    errormessageP = "Invalid Gauge. Only 16 and 35 are allowed."		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function h24() As integer		  return fpsP*60*60*24		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsTC(tc as integer) As boolean		  dim test as boolean		  test = TC>0 		  test = test and (TC<24000000)		  test = test and (TC mod 1000000 < 600000)		  test = test and (TC mod 10000 < 6000)		  test = test and (TC mod 100 < fpsP)		  if fpsP = 29.97 then		    return (test and ((TC mod 10000 > 1) or ((TC mod 1000000)\10000 = 0)))		  else		    return test		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function KeyOffset(keycode as string, frames as integer) As string		  dim g as integer		  dim frames0 as integer		  errorP = false		  errormessageP = ""		  frames0 = keytoframes(keycode)		  if errorP then		    return ""		  end		  frames0 = frames0+frames		  if frames0 < 0 then 		    errorP = true		    errormessageP = "Invalid Frames. Underflow."		    return ""		  elseif frames0 >= 10000*gauge then		    errorP = true		    errormessageP = "Invalid Frames. Overflow."		    return ""		  end		  return framestokey(frames0, keyprefix(keycode))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function KeyPrefix(Keycode as string) As string		  if len(keycode)<8 then		    return ""		  else		    return left(keycode, len(keycode)-7)		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function KeyTCOffset(Keycode as string, TC as integer) As string		  dim frames0,frames as integer		  errorP = false		  errormessageP = ""		  frames0 = keytoframes(keycode)		  if errorP then		    return ""		  end		  if pulldown then		    frames = TCtoframes(timetoTC(TCtotime(TC,fps), 24),24)		    if errorP then		      return ""		    end		  else		    frames = TCtoframes(TC)		    if errorP then		      return ""		    end		  end if		  frames0 = frames0+frames		  if frames0 < 0 then 		    errorP = true		    errormessageP = "Invalid Frames. Underflow."		    return ""		  elseif frames0 >= 10000 * gauge then		    errorP = true		    errormessageP = "Invalid Frames. Overflow."		    return ""		  end		  return framestokey(frames0, keyprefix(keycode))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function KeyToFrames(Keycode as string) As integer		  dim g as integer		  errorP = false		  errormessageP = ""		  select case gaugeP		  case 16		    g = 20		  case 35		    g = 16		  else		    errorP = true		    errormessageP = "Invalid Gauge. Only 16 and 35 are allowed."		    return 0		  end		  return val(right("  " +keycode,2)) + g * val(left(right("       " +keycode,7),4))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function KeyToTC(Keycode as string) As integer		  dim frames as integer		  errorP = false		  errormessageP = ""		  frames = keytoframes(keycode)		  if errorP then		    return 0		  end		  if pulldown then		    return timetotc(tctotime(framestoTC(frames, 24),24),fpsP)		  else		     return framestoTC(frames) 		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function MeterToFrames(meter as double) As integer		  dim g as integer		  errorP = false		  errormessageP = ""		  select case gaugeP		  case 16		    g = 40 / 0.3048		  case 35		    g = 16 / 0.3048		  else		    errorP = true		    errormessageP = "Invalid Gauge. Only 16 and 35 are allowed."		    return 0		  end		  if meter < 0 then		    errorP = true		    errormessageP = "Invalid Meter. Frames must be positive."		    return 0		  end		  return meter * g		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function MeterToTC(meter as double) As integer		  dim frames as integer		  errorP = false		  errormessageP = ""		  frames = metertoframes(meter)		  if errorP then		    return 0		  end		  return framestotc(frames)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Methods() As string		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Properties() As string		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Pulldown() As boolean		  Return pulldownP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Pulldown(bool as boolean)		  PulldownP = bool		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub TC3edit(edit() as integer)		  dim duration as integer		  dim i,zerocount  as integer		  errorP = false		  errormessageP = ""		  if ubound(edit)<>3 then 		    errorP = true		    errormessageP = "Edit must have 4 elements."		    return 		  end		  for i = 0 to 3		    if edit(i)=0 then 		      zerocount = zerocount +1		    end		  next		  if zerocount > 1 then		    'do nothing		  elseif zerocount = 1 then		    if edit(0) = 0 then		      duration = tcminus(edit(3),edit(2))		      edit(0)=tcminus(edit(1),duration)		    elseif edit(1) =0 then		      duration = tcminus(edit(3),edit(2))		      edit(1)=tcplus(edit(0),duration)		    elseif edit(2) =0 then		      duration = tcminus(edit(1),edit(0))		      edit(2)=tcminus(edit(3),duration)		    else		      duration = tcminus(edit(1),edit(0))		      edit(3)=tcplus(edit(2),duration)		    end		  else		    duration = tcminus(edit(1),edit(0))		    edit(3)=tcplus(edit(2),duration)		  end		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function TCdiv(TC as integer, factor as double) As integer		  dim dividend as integer		  errorP = false		  errormessageP = ""		  if factor=0 then		    errorP = true		    errormessageP = "Error division by zero"		    return 0		  end		  dividend = tctoframes(tc)		  if errorP then		    return 0		  end		  return framestotc((dividend \ factor+ h24) mod h24)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCminus(TC1 as integer, TC2 as integer) As integer		  dim frames1, frames2 as integer		  errorP = false		  errormessageP = ""		  frames1 = tctoframes(tc1)		  frames2 = tctoframes(tc2)		  if errorP then		    return 0		  end		  return framestotc((frames1-frames2+2*h24) mod h24)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCmult(TC as integer, factor as double) As integer		  dim frames as integer		  errorP = false		  errormessageP = ""		  if factor=0 then		    errorP = true		    errormessageP = "Error division by zero"		    return 0		  end		  frames = tctoframes(tc)		  if errorP then		    return 0		  end		  return framestotc((frames*factor+h24) mod h24)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCplus(TC1 as integer, TC2 as integer) As integer		  dim frames1, frames2 as integer		  errorP = false		  errormessageP = ""		  frames1 = tctoframes(tc1)		  frames2 = tctoframes(tc2)		  if errorP then		    return 0		  end		  return framestotc((frames1+frames2+h24) mod h24)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCsum(TCarray() as integer) As integer		  dim count,i,ub as integer		  errorP = false		  errormessageP = ""		  count = 0		  ub = ubound(TCarray)		  for i = 0 to ub		    count = TCplus(count,TCarray(i))		    if errorP then		      return 0		    end		  next		  return count		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCtoFeet(TC as integer) As double		  dim frames as integer		  errorP = false		  errormessageP = ""		  frames = TCtoframes(TC)		  if errorP then		    return 0		  end		  return framestofeet(frames)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCtoFrames(TC as integer) As integer		  return TCtoframes(TC,fpsP)		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function TCtoFrames(TC as integer, FpsSP as double) As integer		  dim f,s,m,h as integer		  errorP = false		  errormessageP = ""		  if TC < 0 then		    errorP = true		    errormessageP = "Invalid frames. Frames must be positive."		    return 0		  end		  if fpsSP = 29.97 then		    return dropit(TCtoframes(tc, 30))		  else		    f = tc mod 100		    s = (tc \ 100) mod 100		    m = (tc \ 10000) mod 100		    h = (tc \1000000) mod 24		    return f + fpsSP*(s + 60*m + 3600 *h)		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCtoKey(TC as integer, prefix as string) As string		  		  		  if pulldown then		    return framestokey(TCtoframes(timetoTC(tctotime(TC),24),24), prefix) 		  else		     return framestokey(TCtoframes(TC),prefix) 		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCtoMeter(TC as integer) As double		  dim frames as integer		  errorP = false		  errormessageP = ""		  frames = TCtoframes(TC)		  if errorP then		    return 0		  end		  return framestometer(frames)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCtoText(TC as integer) As string		  errorP = false		  errormessageP = ""		  if TC < 0 then		    errorP=true		    errormessageP = "Error TC. Underflow"		    Return ""		  elseif TC >=24000000 then		    errorP = true		    errormessageP = "Error TC. Overflow"		    return ""		  end		  if fpsP = 29.97 then		    return format(TC\100,"00\:00\:00")+";"+format(tc mod 100,"00")		  else		    return format(TC,"00\:00\:00\:00")		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCtoTime(TC as integer) As date		  return TCtotime(TC,fpsP)		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function TCtoTime(TC as integer, fpsSP as double) As date		  dim d as date		  dim frames as integer		  errorP = false		  errormessageP = ""		  frames = TCtoframes(TC)		  d = new date		  d.totalseconds = 0		  if errorP then		    return d		  end		  d.totalseconds = frames / fpsSP		  return d		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TCtrans(TC as integer, FromFps as double, ToFps as double) As integer		  dim frames as integer		  errorP = false		  errormessageP = ""		  frames = TCtoframes(TC,fromFps)		  if errorP then		    return 0		  end		  return framesToTC(frames,toFps)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TextIsTC(s as string) As boolean		  dim TC as integer		  errorP = false		  errormessageP = ""		  TC =  val(replaceall(replaceall(replaceall(s,":",""),";",""),".",""))		  return IsTC(TC)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TextToTC(s as string) As integer		  dim TC as integer		  errorP = false		  errormessageP = ""		  TC =  val(replaceall(replaceall(replaceall(s,":",""),";",""),".",""))		  if TC < 0 then		    errorP=true		    errormessageP = "Error TC. Underflow"		    Return 0		  elseif TC >=24000000 then		    errorP = true		    errormessageP = "Error TC. Overflow"		    return 0		  end		  return TC		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TimeToTC(d as date) As integer		  return timetotc(d,fpsP)		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function TimeToTC(d as date, fpsSP as double) As integer		  errorP = false		  errormessageP = ""		  if d=nil then		    errorP = true		    errormessageP = "Nil object date."		    return 0		  end		  return ((d.hour*100+d.minute)*100+d.second)*100+(d.totalseconds-floor(d.totalseconds))*fpsP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function undropit(frames as integer) As integer		  dim minutes, tenminutes, dropbit as integer		  minutes = frames \ 1798		  tenminutes = frames \ 17982		  if ((frames Mod 17982) mod 1798 < 2 and (frames mod 17982) > 1) then		    dropbit =-2		  else		    dropbit= 0		  end if		  return frames + 2*minutes - 2* tenminutes + dropbit		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Version() As string		  return "1.0"		End Function	#tag EndMethod	#tag Property, Flags = &h1		Protected errormessageP As string	#tag EndProperty	#tag Property, Flags = &h1		Protected errorP As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected fpsP As double	#tag EndProperty	#tag Property, Flags = &h1		Protected gaugeP As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected pulldownP As boolean	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass