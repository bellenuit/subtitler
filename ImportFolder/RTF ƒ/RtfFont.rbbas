#tag ClassProtected Class RtfFont	#tag Method, Flags = &h0		Sub addfont(f as string)		  id.append count+1		  name.append f		  charset.append 0		  		  //change 1.1		  #if targetmacOS then		    select case f		      // fontlist for families		    case "Times"		      family.append "froman"		    case "Helvetica"		      family.append "fswiss"		    case "Courier"		      family.append "fmodern"		    else		      family.append "fnil"		    end		  #else		    select case f		      // fontlist for families		    case "Times New Roman"		      family.append "froman"		    case "Arial"		      family.append "fswiss"		    case "Courier New"		      family.append "fmodern"		    else		      family.append "fnil"		    end		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function count() As integer		  return ubound(id)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getcharset(cid as integer) As integer		  dim altfont as string		  dim i,j as integer		  for i = 1 to ubound(id)		    if id(i)=cid then		      return charset(i)		    end		  next		  return 0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getfont(cid as integer) As string		  dim altfont as string		  dim i,j as integer		  for i = 1 to ubound(id)		    if id(i)=cid then		      for j = 0 to fontcount-1		        if name(i)=font(j) then		          return name(i)		        end		      next		      select case family(i)		        //change 1.1		      case "froman"		        #if targetmacOS then		          altfont= "Times"		        #else		          altfont= "Times New Roman"		        #endif		      case "fswiss"		        #if targetmacOS then		          altfont= "Helvetica"		        #else		          altfont= "Arial"		        #endif		      case "fmodern"		        #if targetmacOS then		          altfont= "Courier"		        #else		          altfont= "Courier New"		        #endif		      case "fscript"		        altfont= "Script"		      case "fdecor"		        altfont="Zapf Chancery"		      case "ftech"		        altfont ="Symbol"		      case "fnil"		        #if targetmacOS then		          altfont= "Geneva"		        #else		          altfont= "Arial"		        #endif		      else		        #if targetmacOS then		          altfont= "Geneva"		        #else		          altfont= "Arial"		        #endif		      end		      for j = 0 to fontcount-1		        if altfont=font(j) then		          return altfont		        end		      next		      return "System"		    end		  next		  return "System"		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getid(f as string) As integer		  dim i as integer		  for i = 1 to count 		    if name(i)=f then		      return id(i)		    end		  next		  return 0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getstring() As string		  dim out as string		  dim i as integer		  out = "{\fonttbl"		  for i = 1 to count		    out = out + "{\f"+str(id(i))		    if charset(i) > 0 then		      out = out + "\fcharset"+str(charset(i))		    end		    if family(i) <>  "" then		      out = out+"\"+family(i)		    end		    out = out + " " + name(i) + ";}"		  next		  out = out +"}"		  return out		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function parse(input as ramStream) As boolean		  dim command,fonttype as string		  dim par as integer		  dim bracket as integer		  dim car as string		  dim i,n,parameter as integer		  dim currentfont as integer		  dim parseleft as boolean		  dim test as string		  		  		  bracket = 1		  		  while not input.eof		    car = input.read(1)		    select case car		    case "{"		      bracket = bracket + 1		      if bracket > 2 then		        rtfignoregroup(input)		        bracket = 2		      end		    case "}"		      bracket = bracket -1		    case "\"		      command=""		      parameter= 0		      RTFparsecommand(input,command,parameter)		      select case command		      case "f"		        id.append parameter		        charset.append  -1		        family.append ""		        name.append ""		        currentfont = ubound(id)		      case "fcharset"		        charset(currentfont) = parameter		      case "froman"		        family(currentfont)= command		      case "fswiss"		        family(currentfont)= command		      case "fmodern"		        family(currentfont)= command		      case "fscript"		        family(currentfont)= command		      case "fdecor"		        family(currentfont)= command		      case "ftech"		        family(currentfont)= command		      case "fnil"		        family(currentfont)= command		      end		    case chr(13)		    case chr(10)		    else		      input.position(input.position-1)		      name(currentfont)=rtfparselabel(input)		    end		    if bracket = 0 then		      return true		    end		  wend		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Version()		  // 1.1 support win32 fonts 		  // 1.0a2 no changes in this class		   // 1.0a1 14.10.00		End Sub	#tag EndMethod	#tag Property, Flags = &h0		charset(0) As integer	#tag EndProperty	#tag Property, Flags = &h0		family(0) As string	#tag EndProperty	#tag Property, Flags = &h0		id(0) As integer	#tag EndProperty	#tag Property, Flags = &h0		name(0) As string	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass