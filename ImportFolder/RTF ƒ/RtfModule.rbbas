#tag ModuleProtected Module RtfModule	#tag Method, Flags = &h0		Function Hex2(n as integer) As string		  if n<16 then		    return "0"+hex(n)		  else		    return hex(n)		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub RtfIgnoreGroup(input as ramstream)		  dim i, binlength,testbin as integer		  dim test   as string		  		  i = 1		  		  while not input.eof		    test = input.read(1)		    select case test		    case "{" 		      i = i+1		    case "}" 		      i = i-1		    case  "\" 		      Rtfparsecommand(input,test,testbin)		      if test = "bin" then		        input.position(input.position + testbin)		      end		    end		    if i= 0 then		      exit		    end		  wend		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function RtfIsAlpha(c as string) As boolean		  return instr("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",c)>0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function RtfIsHexdigit(c as string) As boolean		  return instr("ABCDEabcde0123456789",c)>0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function RtfIsNumeric(c as string) As boolean		  return instr("0123456789",c)>0 or left(c,1)="-"		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub RtfParseCommand(input as ramstream, byref command as string, byref parameter as integer)		  dim car as string		  dim carleft as boolean		  dim hexval as string		  dim parameterstring as string		  		  command =""		  parameterstring =""		  		  if not input.eof then		    car = input.read(1)		    if car = "'" then		      command = car		      hexval = input.read(2)		      parameter = (val("&h"+hexval))		      return		    elseif not rtfisalpha(car) then		      command = car		      return		    else 		      carleft = true		    end		  end		  		  while not input.eof		    if not carleft then		      car = input.read(1)		    end		    carleft = false		    if RTFisalpha(car) then		      command = command + car		    else		      carleft = true		      exit		    end		  wend		  		  while not input.eof		    if not carleft then		      car = input.read(1)		    end		    carleft = false		    if RTFisNumeric(car) then		      parameterstring = parameterstring + car		    else		      exit		    end		  wend		  		  		  if parameterstring="" then		    parameter = 1		  else		    parameter = val(parameterstring)		  end		  		  if car <> " " then		    input.position(input.position-1)		  end		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function RtfParseLabel(input as ramStream) As string		  dim car,out as string		  while not input.eof		    car = input.read(1)		    select case car		    case ";" 		      return out		    case "\"		      input.position(input.position-1)		      return out		    case  "{" 		      input.position(input.position-1)		      return out		    case "}" 		      input.position(input.position-1)		      return out		    else		      out = out+car		    end		  wend		  return out		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub RTFVersion()		  // 1.1 no changes		  // 1.0a2 no changes		   // 1.0a1 14.10.00		End Sub	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule