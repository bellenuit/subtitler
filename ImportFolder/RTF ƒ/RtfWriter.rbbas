#tag ClassProtected Class RtfWriterImplements RtfTarget	#tag Method, Flags = &h0		Function Dump() As string		  dim result as string		  dim lines(-1) as string		  lines.append "{\rtf1"		  //change 1.1		  '#if targetmacOS then		  'lines.append "\mac"		  '#else		  'lines.append "\pc"		  '#endif		  // change 1.2 unicode a default		  lines.append "\uc"		  lines.append fonts.getstring		  lines.append colors.getstring		  lines.append body		  lines.append "}"		  result = join(lines,"")		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Export(target as RtfTarget)		  // do nothing		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function PostProcess() As Boolean		  outputstream.write dump		  outputstream.close		  return true		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function PreProcess() As Boolean		  if exportfolderitem = nil then		    msgbox "nil exportfolderitem"		    return false		  end		  if exportfolderitem.exists then		    outputstream = exportfolderitem.openasbinaryfile(true)		  else		    outputstream = exportfolderitem.createbinaryfile("text")		  end		  if outputstream = nil then		    msgbox "nil outpustream"		    return false		  end		  body = ""		  fonts = new rtffont		  colors = new rtfcolor		  return true		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SetExportFolderItem(f as folderitem)		  exportfolderitem = f		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetProgressBar(p as progressbar)		  progress = p		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetState(st as RtfState)		  dim formatstring as string		  dim i as integer		  		  if fonts=nil then		    msgbox "nil fonts"		  end		  		  if st = nil then		    msgbox "st nil"		  end		  // change 1.1		  if oldstate =nil or st.alignment <> oldState.alignment then		    select case st.alignment		    case 0		      formatstring = formatstring+"\ql"		    case 1		      formatstring = formatstring+"\ql"		    case 2		      formatstring = formatstring+"\qc"		    case 3		      formatstring = formatstring+"\qr"		    case 4		      formatstring = formatstring+"\qj"		    end 		  end		  		  if oldstate = nil or st.font <> oldstate.font then		    if fonts.getid(st.font) = 0 then		      fonts.addfont(st.font)		    end		    formatstring = formatstring+"\f"+str(fonts.getid(st.font))		  end		  if oldstate = nil or st.textsize <> oldstate.textsize then		    formatstring = formatstring+"\fs"+str(2*st.textsize)		  end		  if oldstate = nil or st.foregroundcolor <> oldstate.foregroundcolor then		    if colors.getid(st.foregroundcolor) = 0 then		      colors.addcolor(st.foregroundcolor)		    end		    formatstring = formatstring+"\cf"+str(colors.getid(st.foregroundcolor))		  end		  if oldstate = nil or st.bold <> oldstate.bold then		    if st.bold then		      formatstring = formatstring+"\b"		    else		      formatstring = formatstring+"\b0"		    end		  end		  if oldstate = nil or st.italic <> oldstate.italic then		    if st.italic then		      formatstring = formatstring+"\i"		    else		      formatstring = formatstring+"\i0"		    end		  end		  if oldstate = nil or st.underline <> oldstate.underline then		    if st.underline then		      formatstring = formatstring+"\ul"		    else		      formatstring = formatstring+"\ulnone"		    end		  end		  if oldstate = nil or st.expanded <> oldstate.expanded then		    formatstring = formatstring+"\expnd"+str(4*st.expanded)		  end		  if oldstate = nil or st.outline <> oldstate.outline then		    if st.outline then		      formatstring = formatstring+"\outl"		    else		      formatstring = formatstring+"\outl0"		    end		  end		  if oldstate = nil or st.shadow <> oldstate.shadow then		    if st.shadow then		      formatstring = formatstring+"\shad"		    else		      formatstring = formatstring+"\shad0"		    end		  end		  		  body = body + formatstring+" "		  		  oldstate = st		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Version()		  // 1.1 ignore chr(10) on writing, pc flag on win output, alignment tag		  // 1.0a2		  // supports currently only export styles which are known by an editfield		  // fixed bug color tag		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Write(t as string)		  dim i,len,a as integer		  dim tcar,tcar1,h as string		  		  		  len = len(t)		  		  for i = 1 to len		    tcar = mid(t,i,1)		    tcar = tcar.convertEncoding(encodings.utf8)		    if asc(tcar) > 128 then		      'body = body + "\'"+hex(asc(tcar))		      a = asc(tcar)		      h = str(a)		      tcar1 =  tcar.convertEncoding(encodings.ascii)		      body = body + "\u" + h + " " '+ tcar1		    elseif asc(tcar) = 9 then		      body = body + "\tab "		    elseif asc(tcar) = 13 then		      body = body + "\par "		      //change 1.1		    elseif asc(tcar) = 10 then		      //ignore		    else		      body = body+tcar		    end		  next		End Sub	#tag EndMethod	#tag Note, Name = version		  1.2 dump, use ramstream		  // 1.1 ignore chr(10) on writing, pc flag on win output, alignment tag		  // 1.0a2		  // supports currently only export styles which are known by an editfield		  // fixed bug color tag				8.1.9 added space after unicode character			#tag EndNote	#tag Property, Flags = &h0		body As string	#tag EndProperty	#tag Property, Flags = &h0		colors As rtfcolor	#tag EndProperty	#tag Property, Flags = &h0		exportfolderitem As folderitem	#tag EndProperty	#tag Property, Flags = &h0		fonts As rtffont	#tag EndProperty	#tag Property, Flags = &h0		oldState As RTFstate	#tag EndProperty	#tag Property, Flags = &h0		outputstream As binarystream	#tag EndProperty	#tag Property, Flags = &h0		progress As progressbar	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="body"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass