#tag ClassProtected Class FCPXMLConverterInherits cTitlelistConverter	#tag Event		Sub DoConvert(s as string)		  dim v,position, position0, dummy, itemstart, effectstart, starttcframes, item, countlines, oldposition, olditemstart as integer		  dim starttc, dummystring, startframes, endframes, effectname, titletext, effectcategory, lines(-1),line as string		  dim tit as ctitle		  		  // matti		  v = instr(s,"<?xml")		  if  v = 0 or v > 80 then 		    msgbox "This is not an XML document"		    return		  end		  		  // we will use our own parser.		  		  // find starting TimeCodeOld		  if getnextItem(position,s,"sequence/TimeCodeOld/string", starttc, dummy) then		    // ok		  else		    starttc = "01:00:00:00"		  end		  starttcframes = tc.tctoframes(tc.texttotc(starttc))		  		  countlines = max(countfields(s,"<generatoritem"),1)		  		  		  if getnextItem(position,s,"sequence/media/video", dummystring, position) then		    while getnextItem(position,s,"track", dummystring, position) 		      position = position + 1		      while getnextItem(position,s,"generatoritem", dummystring, position)		        itemstart = position		        		        		        if rnd*100>99 then		          position = position		        end		        		        if getnextItem(itemstart,s,"start", startframes, dummy) then		          if getnextItem(itemstart,s,"end", endframes, dummy) then		            if getnextItem(itemstart,s,"effect/effectid", effectname, effectstart) and effectname = "Text" then		              		              if getnextItem(effectstart,s,"parameter/parameterid", dummystring, dummy) and dummystring = "str" then		                if getnextitem(dummy,s,"value", titletext, dummy) then		                  startframes = tc.tctotext(tc.framestotc(starttcframes + val(startframes)))		                  endframes = tc.tctotext(tc.framestotc(starttcframes + val(endframes)))		                  item = item + 1		                  titletext = unescape(titletext)		                  		                  lines = split(titletext,endofline.macintosh)		                  		                  		                  		                  tit = new ctitle		                  titlelist.titles.append tit		                  tit.eventnr = item		                  tit.start =  startframes		                  tit.ende = endframes		                  for each line in lines		                    if trim(line)<>"" then		                      tit.lines.append trim(line)		                    end		                  next		                  		                end		              end		            end		          end		        end		        		        		        if rnd*10>9 then		          progress 100*position/len(s)		        end		        if userCancelled then		          exit		        end		        		        		      wend		      		      position = position		      		    wend		  end		  		  createEDL uppercase(documentname),0,ubound(titlelist.titles)		  		  		  		  		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub Constructor()		  label = "FinalCutPro Text Effect XML"		  binaryfile = true		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GetNextItem(start as integer, s as string, path as string, byref result as string, byref stringstart as integer) As boolean		  dim position, endposition as integer		  dim paths(-1), pathitem as string		  		  position = start		  stringstart = position+1		  paths = split(path,"/")		  		  for each pathitem in paths		    position = instr(position, s, "<" + pathitem)		    if position = 0  then 		      return false		    end		  next		  stringstart = position+1		  		  position = instr(position, s, ">" )		  if position = 0 then		     return false		  end		  stringstart = position		  		  endposition = instr(position,s, "<")		  if endposition = 0 then 		    return false		  end		  		  		  		  result = mid(s,position + 1, endposition - position -1)		  		  return true		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Unescape(s as string) As string		  dim result as string		  result = replaceall(s, "&quot;", """")		  result = replaceall(result, "&gt;", ">")		  result = replaceall(result, "&lt;", "<")		  result = replaceall(result, "&#13;", endofline.macintosh)		  result = replaceall(result, "&lt;", "<")		  		  		  		  result = replaceall(result, "&amp;", "&")		  		  return result		  		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="binaryfile"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="charactercount"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="clipnames"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="documentname"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="endline"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="framerate"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="italicstring"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="label"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass