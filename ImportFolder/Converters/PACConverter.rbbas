#tag ClassProtected Class PACConverterInherits cTitlelistConverter	#tag Event		Sub DoConvert(s as string)		  dim m as memoryBlock		  dim mtitle as memoryBlock		  dim item as integer		  dim tit as ctitle		  dim i,j,cf,sz,offset,test,startl, endl as integer		  dim start,ende,text as string		  dim minutes,frames as integer		  dim lines(-1) as string		  dim stylecomment as string		  dim format1, format2, format3 as integer		  dim chinese as boolean		  dim iscomment as boolean		  dim fedone as boolean		  		  m = newmemoryBlock(lenb(s))		  m.stringValue(0,lenb(s)) = s		  m.littleEndian = true		  		  offset = &h15		  		  		  		  while offset < m.size		    stylecomment = ""		    		    'text = hex2(m.stringValue(offset,2))		    i = m.short(offset)		    offset = offset + 2		    'text = text + hex2(m.stringValue(offset,1))		    offset = offset + 1		    		    text = text+hex2(m.stringValue(offset,4))		    start = PACTimeCode(m,offset)		    offset = offset + 4		    		    text = text+hex2(m.stringValue(offset,4))		    ende = PACTimeCode(m,offset)		    offset = offset + 4		    		    'text = hex2(m.stringValue(offset,6))		    		    // header is variant size depending on offset+2 value		    // weiss der geier		    		    offset = offset + 2		    if m.byte(offset) = &h0B then		      offset = offset + 1		    elseif m.byte(offset+1) = &hFE then //2013-08-16		      offset = offset + 1		    else		      // mostly &h0A		      offset = offset + 4		    end  		    		    redim lines(-1)		    		    startl = offset		    endl = offset 		    fedone = false		    		    		    		    while offset <  m.size		      test = m.byte(offset)		      select case test		        		        		      case &hfe  // lines are preceeded by FE and a short, which may include a 00 byte		        // fehler mit chinesisch, hier stoppt f1 nicht, sondern 00		        fedone = true		        text = text + hex2(m.stringValue(offset,3))		        format1 = m.byte(offset+1)		        format2 = m.byte(offset+2)		        format3 = m.byte(offset+3)		        select case format1		        case 0		          if not (instr(stylecomment,"right")>0) then		            stylecomment = stylecomment + "right "		          end		        case 1		          if not (instr(stylecomment,"left")>0) then		            stylecomment = stylecomment + "left "		          end		        case 2		          if not (instr(stylecomment,"center")>0) then		            stylecomment = stylecomment + "center "		          end		        case 4		          if not (instr(stylecomment,"right italic")>0) then		            stylecomment = stylecomment + "right italic"		          end		        case 5		          if not (instr(stylecomment,"left italic")>0) then		            stylecomment = stylecomment + "left italic"		          end		        case 6		          if not (instr(stylecomment,"center italic")>0) then		            stylecomment = stylecomment + "center italic"		          end		        else		          if format1 > 16 then		            chinese = true // character, not new line		          end		        end		        offset = offset + 3 		        select case format3		        case 3 // yellow		          if not (instr(stylecomment,"color")>0) then		            stylecomment = stylecomment + "color(235,235,16) "		          end		          offset = offset + 1		        case 6 // cyan		          if not (instr(stylecomment,"color")>0) then		            stylecomment = stylecomment + "color(16,235,235) "		          end		          offset = offset + 1		        end		        if not chinese then		          if endl > startl then		            lines.append m.stringValue(startl,endl-startl)		          end		          startl = offset 		        end		        chinese = false		      case 0 // end string		        //text = text + hex2(m.stringValue(offset,1))		        offset = offset + 1		        if endl > startl then		          if iscomment then		            lines.append "/ "+m.stringValue(startl,endl-startl)		            iscomment = false		          else		            lines.append m.stringValue(startl,endl-startl)		          end		        end		        exit		      case &h1f		        // this is a comment		        		        if endl > startl then		          if iscomment then		            lines.append "/ "+m.stringValue(startl,endl-startl)		            iscomment = false		          else		            lines.append m.stringValue(startl,endl-startl)		          end		        end		        offset = offset + 2		        startl = offset		        iscomment = true		        'case &h2e // 2013-08-15		        '// end of line		        'if endl > startl then		        'if iscomment then		        'lines.append "/ "+m.stringValue(startl,endl-startl)		        'iscomment = false		        'else		        'MsgBox m.stringValue(startl,endl-startl)		        'lines.append m.stringValue(startl,endl-startl)		        'end		        'end		        'offset = offset + 1		        'startl = offset		      case &hff		        // end, not really, we ignore it just		        'text = text + hex2(m.stringValue(offset,1))		        'offset = m.size		        if endl > startl then		          if iscomment then		            lines.append "/ "+m.stringValue(startl,endl-startl)		            iscomment = false		          else		            lines.append m.stringValue(startl,endl-startl)		          end		        end		        offset = offset + 1		        startl = offset		        'exit		      else		        offset = offset + 1		        if fedone then		          endl = offset		        end		      end		    wend		    		    if start<>"00:00:00:00" and start<>"00:00:00;00" then //and start <> ende then		      tit = new ctitle		      titlelist.titles.append tit		      tit.eventnr = i		      if start<>"" then		        tit.start = start		        tit.ende = ende		      end		      'tit.lines.append "/" + text		      if stylecomment <> "" then tit.lines.append "/style " +stylecomment		      for i = 0 to ubound(lines)		        lines(i) = PAC2UTF8(lines(i))		        if lenb(lines(i))>0 then 		          if iscomment then		            tit.lines.append "/ " +lines(i)		          else		            tit.lines.append lines(i)		          end		        end		      next		    end		    if i>0 and i mod 10 = 0 then		      progress 33+66*offset/m.size		    end		    if userCancelled then		      exit		      		    end		  wend		  		  createedl uppercase(documentname),0,ubound(titlelist.titles)		  		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub Constructor()		  label = "PAC"		  binaryfile = true		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function hex2(s as string) As string		  dim m,m2 as memoryBlock		  dim i,sz, offset, test as integer		  		  sz = lenb(s)		  if sz = 0 then return "<>"		  		  m = newmemoryBlock(sz)		  m2 = newmemoryBlock(2*sz)		  		  m.stringValue(0,sz) = s		  		  for i = 0 to m.size-1		    test = m.byte(i)		    if test<16 then		      m2.byte(offset) = asc("0")		      m2.stringValue(offset+1,1) = hex(test)		    else		      m2.stringValue(offset,2) = hex(test)		    end		    offset = offset + 2		  next		  		  return "<" +m2.stringValue(0,offset)+">"		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function PAC2UTF8(s as string) As string		  dim m1 as memoryBlock		  dim offset, i, size, test, test2 as integer		  dim result, character, chset,s2  as string		  dim found as boolean		  		  size = lenb(s)		  		  if size = 0 then		    return ""		  end		  		  m1 = newmemoryBlock(size)		  		  m1.stringValue(0,size) = s		  		  for i = 0 to size-1		    test = m1.byte(i)		    		    		    if test >= 32 and test < 128 then		      // ascii literally		      		      // apparently, some characters in ascii range are changed:		      select case test		      case &h23		        result = result + "£"		      case &h5b		        result = result + "¤"		      case &h5c		        result = result + "Æ"		      case &h5d		        result = result + "Ø"		      case &h5f  // use long continuation and not underscore		        result = result + "–"  // n-dash 		      case &h7c		        result = result + "æ"		      case &h7d		        result = result + "ø"		      case &h7e		        result = result + "§"		      case asc("<")   // italic		        if (i<>0) then result = result + " <i>"		      case asc(">")  // italic		        if i<>size-1 then result = result + "</i> "		      else		        character = m1.stringvalue(i,1)		        character = defineEncoding(character,encodings.dosLatin1) // to verify		        character = convertEncoding(character,encodings.utf8)		        result = result + character		      end		    else		      select case test		      case &h80		        result = result + "#" // ignore 1.7b22		      case &h81		        result = result + "ß" // doppel s		      case &h82		        i = i + 1		        character = m1.stringValue(i,1)		        test2 = instrb("aceinouyACEINOUY",character) 		        if test2 > 0 then		          result = result + mid("ácéínóúyACÉINOUY",test2,1)		        end		      case &h83		        i = i + 1		        character = m1.stringValue(i,1)		        test2 = instrb("aceinouyACEINOUY",character) 		        if test2 > 0 then		          result = result + mid("âcêînôûyÂCÊÎNÔÛY",test2,1)		        end		      case &h84		        result = result + "½"		      case &h85		        result = result + "ŧ"		      case &h86		        i = i + 1		        character = m1.stringValue(i,1)		        test2 = instrb("aceinouyACEINOUY",character) 		        if test2 > 0 then		          result = result + mid("äcëïnöüÿÄcËÏNÖÜŸ",test2,1)		        end		      case &h87		        result = result + "þ"		      case &h88		        result = result + "Þ"		      case &h89		        result = result + "ð"		      case &h8c		        result = result + "Ð"		      case &h8d		        result = result + "ŋ"		      case &h8e		        result = result + "Ŋ"		      case &h9a		        result = result + "Œ"		      case &h9b		        result = result + "¢"		      case &h9c		        result = result + "Ł"		      case &h9e		        result = result + "€"		      case &hA8		        result = result + ""		      case &hA9		        result = result + "°"		      case &hAA		        result = result + "¼"		      case &hAC		        result = result + "¾"		      case &hAD		        result = result + "¡"		      case &hBA		        result = result + "œ"		      case &hBC		        result = result + "ł"		      case &hBE		        result = result + "-"		      case &hD2		        i = i + 1		        character = m1.stringValue(i,1)		        test2 = instrb("aceinouyACEINOUY",character) 		        if test2 > 0 then		          result = result + mid("àcèìnòùyÀCÈÌNÒÙY",test2,1)		        end		      case &hD3		        result = result + " ©"		      case &hE0		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h41		            result = result + "Ã"		          case &h61		            result = result + "ã"		          case &h4E		            result = result + "Ñ"		          case &h6E		            result = result + "ñ"		          case &h4F		            result = result + "Õ"		          case &h6F		            result = result + "õ"		          case &h49		            result = result + "Ĩ"		          case &h69		            result = result + "ĩ"		          case &h55		            result = result + "Ũ"		          case &h75		            result = result + "ũ"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hE1		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h41		            result = result + "Å"		          case &h61		            result = result + "å"		          case &h55		            result = result + "Ů"		          case &h75		            result = result + "ů"		          case &h2d		            result = result + "º"		          else		            result = result + "<!"+hex(test)+hex(test2)+">" 		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hE2		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h41		            result = result + "Á"		          case &h61		            result = result + "á"		          case &h43		            result = result + "Ć"		          case &h63		            result = result + "ć"		          case &h45		            result = result + "É"		          case &h65		            result = result + "é"		          case &h49		            result = result + "Í"		          case &h69		            result = result + "í"		          case &h4E		            result = result + "Ń"		          case &h6E		            result = result + "ń"		          case &h4F		            result = result + "Ó"		          case &h6F		            result = result + "ó"		          case &h52		            result = result + "Ŕ"		          case &h72		            result = result + "ŕ"		          case &h53		            result = result + "Ś"		          case &h73		            result = result + "ś"		          case &h55		            result = result + "Ú"		          case &h75		            result = result + "ú"		          case &h59		            result = result + "Ý"		          case &h79		            result = result + "ý"		          case &h5A		            result = result + "Ź,"		          case &h7A		            result = result + "ź"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hE3		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h41		            result = result + "À"		          case &h61		            result = result + "à"		          case &h45		            result = result + "È"		          case &h65		            result = result + "è"		          case &h49		            result = result + "Ì"		          case &h69		            result = result + "ì"		          case &h4F		            result = result + "Ò"		          case &h6F		            result = result + "ò"		          case &h55		            result = result + "Ù"		          case &h75		            result = result + "ù"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hE4		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h41		            result = result + "Â"		          case &h61		            result = result + "â"		          case &h43		            result = result + "Ĉ"		          case &h63		            result = result + "ĉ"		          case &h45		            result = result + "Ê"		          case &h65		            result = result + "ê"		          case &h47		            result = result + "Ĝ"		          case &h67		            result = result + "ĝ"		          case &h48		            result = result + "Ĥ"		          case &h68		            result = result + "ĥ"		          case &h49		            result = result + "Î"		          case &h69		            result = result + "î"		          case &h4A		            result = result + "Ĵ"		          case &h6A		            result = result + "ĵ"		          case &h4F		            result = result + "Ô"		          case &h6F		            result = result + "ô"		          case &h53		            result = result + "Ŝ"		          case &h73		            result = result + "ŝ"		          case &h55		            result = result + "Û"		          case &h75		            result = result + "û"		          case &h59		            result = result + "Ŷ"		          case &h79		            result = result + "ŷ"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hE5		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h41		            result = result + "Ä"		          case &h61		            result = result + "ä"		          case &h45		            result = result + "Ë"		          case &h65		            result = result + "ë"		          case &h49		            result = result + "Ï"		          case &h69		            result = result + "ï"		          case &h4F		            result = result + "Ö"		          case &h6F		            result = result + "ö"		          case &h55		            result = result + "Ü"		          case &h75		            result = result + "ü"		          case &h59		            result = result + "Ÿ"		          case &h79		            result = result + "ÿ"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hE6		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h43		            result = result + "Ç"		          case &h63		            result = result + "ç"		          case &h47		            result = result + "Ģ"		          case &h67		            result = result + "ģ"		          case &h4B		            result = result + "Ķ"		          case &h6B		            result = result + "ķ"		          case &h4C		            result = result + "Ļ"		          case &h6C		            result = result + "ļ"		          case &h4E		            result = result + "Ņ"		          case &h6E		            result = result + "ņ"		          case &h52		            result = result + "Ŗ"		          case &h72		            result = result + "ŗ"		          case &h53		            result = result + "Ş"		          case &h73		            result = result + "ş"		          case &h54		            result = result + "Ţ"		          case &h74		            result = result + "ţ"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hE7		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h43		            result = result + "Č"		          case &h63		            result = result + "č"		          case &h44		            result = result + "Ď"		          case &h64		            result = result + "ď"		          case &h45		            result = result + "Ě"		          case &h65		            result = result + "ě"		          case &h4E		            result = result + "Ň"		          case &h6E		            result = result + "ň"		          case &h52		            result = result + "Ř"		          case &h72		            result = result + "ř"		          case &h53		            result = result + "Š"		          case &h73		            result = result + "š"		          case &h54		            result = result + "Ť"		          case &h74		            result = result + "ť"		          case &h5A		            result = result + "Ż"		          case &h7A		            result = result + "ż"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hE8		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h43		            result = result + "Ċ"		          case &h63		            result = result + "ċ"		          case &h45		            result = result + "Ė"		          case &h65		            result = result + "ė"		          case &h47		            result = result + "Ġ"		          case &h67		            result = result + "ġ"		          case &h49		            result = result + "İ"		          case &h69		            result = result + "ı"		          case &h5A		            result = result + "Ż"		          case &h7A		            result = result + "ż"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hE9  // macron		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h41		            result = result + "Ā"		          case &h61		            result = result + "ā"		          case &h45		            result = result + "Ē"		          case &h65		            result = result + "ē"		          case &h49		            result = result + "Ī"		          case &h69		            result = result + "ī"		          case &h4F		            result = result + "Ō"		          case &h6F		            result = result + "ō"		          case &h55		            result = result + "Ū"		          case &h75		            result = result + "ū"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hEA  // breve		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h41		            result = result + "Ă"		          case &h61		            result = result + "ă"		          case &h45		            result = result + "Ĕ"		          case &h65		            result = result + "ĕ"		          case &h47		            result = result + "Ğ"		          case &h67		            result = result + "ğ"		          case &h49		            result = result + "Ĭ"		          case &h69		            result = result + "ĭ"		          case &h4F		            result = result + "Ŏ"		          case &h6F		            result = result + "ŏ"		          case &h55		            result = result + "Ŭ"		          case &h75		            result = result + "ŭ"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hEB  // ogonek		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h41		            result = result + "Ą"		          case &h61		            result = result + "ą"		          case &h45		            result = result + "Ę,"		          case &h65		            result = result + "ę"		          case &h49		            result = result + "Į"		          case &h69		            result = result + "į"		          case &h55		            result = result + "Ų"		          case &h75		            result = result + "ų"		          else		            result = result + "<!"+hex(test)+hex(test2)+">"		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &hEC		        i = i + 1		        if i< size then		          test2 = m1.byte(i)		          select case test2		          case &h4f		            result = result + "Ő"		          case &h6f		            result = result + "ő"		          case &h55		            result = result + "Ű"		          case &h75		            result = result + "ű"		          else		            result = result + "<!"+hex(test)+hex(test2)+">" 		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      case &h1		        result = result + " <i>" 		      case &h2		        result = result + "</i> " 		      case &h14		        result = result +"²"		      case &h1f		        // following text is special characterset		        // W16		        chset = m1.stringValue(i+1,4)		        if chset = "W16." then		          s2 = m1.stringValue(i+5,m1.size-i-5)		          s2 = s2.defineEncoding(encodings.doschinesesimplif)		          result= s2.convertEncoding(encodings.utf8)		          return result		        end		      else		        if test \ 16 = &hE then		          i = i + 1		          if i< size then		            character = m1.stringValue(i,1)		            test2 = instrb("aceinouyACEINOUY",character)  // 1.7.4b5 test uppercase		            if test2 > 0 then		              select case test		              case &hE4		                result = result + mid("âcêînôûyÂCÊÎNÔÛY",test2,1)		              case &hE5		                result = result + mid("äcëïnöüÿÄcËÏNÖÜŸ",test2,1)		              case &hE6		                result = result + mid("açeinouyAÇEINOUY",test2,1)		              else		                result = result + "<"+hex(test)+">" + character		                		              end		            else		              if test= &he2 then		                if ascb(character) = &h7b then		                  result = result + "í"		                  found = true		                end		              end		              if not found then		                result =  result + "<!"+hex(test)+ hex(asc(character))+">"		              end		            end		          end		        else		          result = result + "<!"+hex(test)+">" + character		        end		      end		    end		  next		  		  // catch some punctuation problems:		  result = replaceall(result,"</i> .", "</i>.")		  result = replaceall(result,"</i> ,", "</i>,")		  result = replaceall(result,"</i> !", "</i>!")		  result = replaceall(result,"</i> ?", "</i>?")		  result = replaceall(result,"</i> :", "</i>:")		  result = replaceall(result,"</i> ;", "</i>;")		  		  		  		  result = trim(result)		  result = defineEncoding(result,encodings.utf8)		  return result		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function PACTimeCode(m as memoryBlock, offset as integer) As string		  dim hours, minutes, seconds, frames as integer		  dim mi, f as integer		  dim result as string		  		  mi = m.short(offset)		  hours = mi/100		  minutes = mi mod 100		  f = m.short(offset+2)		  seconds = f / 100		  frames = f mod 100		  		  		  // if there is no Timecode, then mi is -1 and f is 0.		  if mi = -1 and f = 0 then		    return ""		  end		  		  if framerate=29.97 then		    result = format(hours,"00")+":"+format(minutes,"00")+":"+format(seconds,"00")+":"+format(frames,"00")		  else		    result = format(hours,"00")+":"+format(minutes,"00")+":"+format(seconds,"00")+":"+format(frames,"00")		  end		  return result		End Function	#tag EndMethod	#tag Note, Name = characters		So far we have found this ones:				<AD> = ¡ (reverse/opening exclamation sign !)		<A8> = ¿ (reverse/opening quiestion sign ?)		<E0> = ñ (enie = ~ + n)					#tag EndNote	#tag ViewBehavior		#tag ViewProperty			Name="binaryfile"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="charactercount"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="clipnames"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="documentname"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="endline"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="framerate"			Group="Behavior"			InitialValue="0"			Type="double"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="italicstring"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="label"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass