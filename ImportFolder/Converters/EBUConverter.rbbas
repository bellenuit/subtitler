#tag ClassProtected Class EBUConverterInherits cTitlelistConverter	#tag Event		Sub DoConvert(s as string)		  dim m as memoryBlock		  dim tticount,offset as integer		  dim codepage, charactercodetablenumber as integer		  dim diskformat, start, ende, text as string		  dim item as integer		  dim tit as ctitle		  dim i,j,cf as integer		  dim line as string		  dim extensionblocknumber as integer		  dim codepagenumber as integer		  dim justificationcode as integer		  dim extended as boolean		  dim comment as string		  dim justificationcomment as string		  dim verticalposition as integer		  dim verticalcomment as string		  dim erroroffset as integer		  		  ebuc = new ebuExporterBN		  		  dim lens as integer		  		  lens = lenb(s)		  		  if lens < 1024 + 128 then		    return		  end		  		  		  		  tticount = val(midb(s,238+1,5))		  tticount = min(tticount,(lens-1024)/128)		  codepagenumber =val(midb(s,1,3))		  charactercodetablenumber = val(midb(s,12+1,2))		  		  //test 1.7.8		  'charactercodetablenumber = 1		  		  		  m = newmemoryBlock(128)		  		  for i=0 to tticount-1		    		    		    		    		    		    m.stringValue(0,128) = midb(s,1024 + i * 128 +1 + erroroffset,128) //mid starts at 1		    m.littleEndian = true		    		    start = ebutoTCtext(m.stringValue(5,4))		    ende = ebutoTCtext(m.stringValue(9,4))		    verticalposition = m.byte(13)		    		    // verticalposition is 1-23 for teletext		    // so lets say that there are 23 lines in titlesave 576 - 20% = 460		    // document vertical align must be set to bottom, as we take only the lower line.		    // so the formula for vertical position is		    // 0 for 23, -20 for 22, -40 for 21   : 		    // (VP-23)*20		    		    if showVertical then		      verticalcomment = " vertical("+str((verticalposition-23)*20) +")"		    else		      verticalcomment =""		    end		    		    justificationcode = m.byte(14)		    		    dim commentflag as integer		    commentflag = m.byte(15)		    		    		    select case justificationcode		    case 0,2		      justificationcomment = ""		    case 1		      justificationcomment = " left"		    case 3		      justificationcomment = " right"		    else		      justificationcomment = ""		    end		    		    text  = m.stringValue(16, 112)		    if left(text,5) <> "FABst" and start<>"00:00:00:00" and ende <> "00:00:00:00" then  // exclude FAB styles		      tit = new ctitle		      titlelist.titles.append tit		      tit.eventnr = m.short(1)		      tit.start = start		      tit.ende = ende		      'text = replaceallb(text,chrb(&h8F),"")		      		      text = ebucontrolFilter(text)		      		      cf = countfields(text,endofline)		      for j = 1 to cf		        line = nthfield(text,endofline,j)		        line = ebutextFilter(line,charactercodetablenumber,codepagenumber)		        line = trim(line)		        if commentflag=1 then		          line = "/"+line		        end		        if line<>"" then		          tit.lines.append line		        end		      next		      		      // find colors		      comment = detectComments(nthfield(text,chrb(&h8A),1))+justificationcomment + verticalcomment		      		      if trim(comment)<>"" then		        tit.lines.insert 0, "/style"+comment		      end		      		      '// corrector for wrong		      'if m.byte(127) <> &h8f then		      'if erroroffset = 0 then		      'msgBox "EBU file is badly formatted (block size). I try to recover."		      'end		      'j = 127		      ''while j>0 and m.byte(j)<> &h8f  and erroroffset>-32		      ''erroroffset = erroroffset -1		      ''wend		      'erroroffset = -1		      '		      'end		      		      if i>0 and i mod 10 = 0 then		        progress 33+66*i/tticount		      end		      if userCancelled then		        exit		      end		    end		  next		  		  createedl uppercase(documentname),0,ubound(titlelist.titles)		  		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub Constructor()		  label = "EBU (STL Binary)"		  binaryfile = true		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function EBUControlFilter(s as string) As string		  dim m as memoryBlock		  dim result as string		  dim i,sz as integer		  		  sz = lenb(s)		  		  if sz=0 then return ""		  		  m = newmemoryBlock(sz)		  m.stringValue(0,sz) = s		  		  for i = 0 to sz-1		    select case m.byte(i)		    case 07		      result = result // nothing		    case &h80		      result = result + "<i>"		    case &h81		      result = result + "</i>"		    case &h8A		      result = result + endofLine		    case &h8F		      result = result 		    else		      result = result + chrb(m.byte(i))		    end		  next		  		  return result		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function EBUTextFilter(s as string, characterencoding as integer, codepagenumber as integer) As string		  dim m1,m2 as memoryBlock		  dim offset, i, size, test as integer		  dim charactercode as textEncoding		  dim result as string		  dim s2 as string		  		  		  result = ebucontrolFilter(s)		  		  		  i = instr(result,chrb(&h80))		  if i>0 then		    msgBox "80"		  end		  		  		  if characterencoding = 0 then return ebuc.LatinEBU2UTF8(result)		  		  		  		  's2 = replaceallb(s,chrb(&h81)," ")		  '		  'if s2="" then return ""		  '		  'size = lenb(s2)		  '		  'm1 = newmemoryBlock(size)		  'm2 = newmemoryBlock(size)		  '		  'm1.stringValue(0,size) = s2		  '		  'for i = 0 to size-1		  ''test = m1.byte(i) mod 128		  ''if test >= 32 then		  'm2.byte(offset) = m1.byte(i)		  'offset = offset +  1		  ''end		  'next		  '		  'result =  m2.stringValue(0,offset)		  		  		  		  select case characterencoding		  case 0		    select case codepagenumber		    case 850		      result = latinFloating2UTF8(result)		    case 852		      result = latin8522UTF8(result)		    else		      result = latinFloating2UTF8(result)		    end		  case 1		    result = defineEncoding(result, encodings.isolatinCyrillic)		  case 2		    result = defineEncoding(result, encodings.isolatinarabic)		  case 3		    result = defineEncoding(result, encodings.isolatingreek)		    result = result.convertEncoding(encodings.utf8)		    result = replaceall(result,"´","")		    result = replaceall(result,"΄","")  // from windows		    result = replaceall(result,"΅","")		    		    '0xB4 0x0384 # GREEK TONOS		    '0xB5 0x0385 # GREEK DIALYTIKA TONOS		  case 4		    result = defineEncoding(result, encodings.isolatinhebrew)		  else		    msgBox "Unknown EBU encoding "+str(characterencoding)+endofLine +endofLine +"Please contact developer"		  end		  		  result = result.convertEncoding(encodings.utf8)		  		  return result		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function EBUtoTCtext(ebu as string) As string		  dim result as string		  dim m as memoryBlock		  m = newmemoryBlock(4)		  m.stringValue(0,4) = ebu		  result = format(m.byte(0),"00") + ":" + format(m.byte(1),"00") + ":"		  result = result + format(m.byte(2),"00")  + ":" + format(m.byte(3),"00") 		  if m.byte(0) = 255 or m.byte(1) = 255 or m.byte(2) = 255 then		    return "00:00:00:00"		  end		  return result		End Function	#tag EndMethod	#tag Hook, Flags = &h0		Event DetectComments(s as string) As string	#tag EndHook	#tag Hook, Flags = &h0		Event ShowVertical() As boolean	#tag EndHook	#tag Note, Name = DoConvert 1.8		  dim m as memoryBlock		  dim tticount,offset as integer		  dim codepage, charactercodetablenumber as integer		  dim diskformat, start, ende, text as string		  dim item as integer		  dim tit as ctitle		  dim i,j,cf as integer		  dim line as string		  dim extensionblocknumber as integer		  dim extended as boolean		  dim oneoff as integer		  		  if lenb(s) < 1024 + 128 then		    return		  end		  		  tticount = val(midb(s,238,5))		  tticount = min(tticount,(lenb(s)-1024)/128)		  charactercodetablenumber = val(mid(s,12,2))		  		  		  m = newmemoryBlock(128)		  		  // fix offset  oneoff 		  oneoff = 0		  		  for i =0 to tticount-1		    m.stringValue(0,128) = midb(s,1024 + i * 128 + oneoff,128)		    		    start = ebutoTCtext(m.stringValue(5,4))		    ende = ebutoTCtext(m.stringValue(9,4))		    		    // apparently offset is sometimes 1 byte off		    if (m.byte(8) > 29 or m.byte(12) > 29) and oneoff <> 1 then		      redim titlelist.titles(-1)		      oneoff = 1		      i = -1  // start over		    else		      text  = m.stringValue(16, 112)		      		      tit = new ctitle		      titlelist.titles.append tit		      tit.eventnr = i		      tit.start = start		      tit.ende = ende		      text = replaceallb(text,chrb(&h8F),"")		      cf = countfields(text,chrb(&h8A))		      for j = 1 to cf		        line = nthfield(text,chrb(&h8A),j)		        line = ebutextFilter(line,charactercodetablenumber)		        line = trim(line)		        if line<>"" then		          tit.lines.append line		        end		      next		      		      if i>0 and i mod 10 = 0 then		        progress 33+66*i/tticount		      end		      if userCancelled then		        exit		      end		      		    end		  next		  		  createedl uppercase(documentname),0,ubound(titlelist.titles)		  			#tag EndNote	#tag Property, Flags = &h0		ebuc As ebuexporterBN	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="binaryfile"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="charactercount"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="clipnames"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="documentname"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="endline"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="framerate"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="italicstring"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="label"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass