#tag ClassProtected Class c890ConverterInherits cTitlelistConverter	#tag Event		Sub DoConvert(s as string)		  		  		  // &h7f separate		  // then there are 6 bytes		  // then the text		  // &h7f separate		  // then there are 20 bytes		  // 00 00 00 00 05 e0 0e 01  33 0e 01 8d 14 00 00 00 00 00 00 16		  // 00 00 00 00 05 f0 0e 02  12 02 57 14 00 00 00  00 00 00 16		  		  // header size &h180		  // a block is &h80 bytes		  // 20 bytes info		  // 51 bytes &h7f   first line!!		  // 6 bytes info		  // text		  // completed with &h7f		  		  dim m as memoryBlock		  dim i, c, item,  stop, framesin, framesout as integer		  dim tit as ctitle		  dim sb, text as string		  dim info as string		  		  m = newmemoryBlock(&h80)		  m.littleEndian = false		  		  c = lenb(s)		  for i = &h180 to c step &h80		    sb = midb(s,i+1,&h80)		    m.stringValue(0,&h80) = sb		    tit = new ctitle		    		    text = midb(sb,20+1)		    stop = instrb(text,chr(&h7f))		    if stop>0 then		      text = leftb(text,stop-1)		    end		    text = cleanText(text)		    if text<>"" then		      tit.lines.append text		    end		    		    text = midb(sb,20+51+6+1)		    stop = instrb(text,chr(&h7f))		    if stop>0 then		      text = leftb(text,stop-1)		    end		    text = cleanText(text)		    if text<>"" then		      tit.lines.append text		    end		    		    		    item = m.ushort(4)		    framesin = m.ushort(6)*256 + m.byte(8)		    framesout= m.byte(9)*256*256 + m.ushort(10)		    info = "item "+ str(item)		    info = info + " frames in " + format(framesin,"0")		    info = info + " frames out " + format(framesout,"0")		    tit.eventnr = item/ 16		    if item mod 16 <> 0 then		      tit.lines.append "// event "+str(m.ushort(4))		    end		    tit.start = tc.tctotext(tc.framesTotc(framesin))		    tit.ende =  tc.tctotext(tc.framesTotC(framesout))		    		    		    if (framesin>0 or framesout>0 or item>0) and ubound(tit.lines)>-1 then		      titlelist.titles.append tit		    end		  next		  		  		  createEDL uppercase(documentname),0,ubound(titlelist.titles)		  		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Function CleanText(s as string) As string		  dim result, test as string		  dim i,c, test2, test1int as integer		  dim italic as boolean		  		  c = lenb(s)		  for i = 0 to c		    test = midb(s,i,1)		    test1int = ascb(test)		    if ascb(test)<128 then		      select case asc(test)		      case &h01		        result = result + "ç"		      case &h06		        result = result + "ş"		      case &h11		        result = result + "Ç"		      case &h14		        result = result + "²"		      case &h16		        result = result + "Ş"		      case &h1b		        result = result + "æ"		      case &h1c		        result = result + "ø"		      case &h1d		        result = result + "å"		      case &h5b		        result = result + "İ"		      case &h5d		        result = result + "Å"		      case &h7e		        result = result + "ı"		      else		        result = result + test.convertEncoding(encodings.utf8)		      end		    else		      test2 = instrb("aceinouyACEINOUY",midb(s,i+1,1))		      select case ascb(test)		        //case &h82 // accent?		      case &h81 		        result = result + mid("àcèìnòùyÀCÈÌNÒÙY",test2,1)		        i = i+1		      case &h82 		        result = result +mid("ácéínóúyACÉINOUY",test2,1)		        i = i+1		      case &h83 		        result = result + mid("âcêînôûyÂCÊÎNÔÛY",test2,1)		        i = i+1		      case &h85 		        result = result + mid("ãceiñõuyÃCEIÑÕUY",test2,1)		        i = i+1		      case &h86		        result = result + mid("äcëïnöüÿÄCËÏNÖÜŸ",test2,1)		        i = i+1		      case &h87 		        result = result + mid("açeinouyAÇEINOUY",test2,1)		        i = i+1		      case &h88		        result = result + "<i>"		        italic = true		      case &h89		        select case asc(midb(s,i+1,1))		        case asc("G")		          result = result +"Ğ"		          i = i+ 1		        case asc("g")		          result = result +"ğ"		          i = i+ 1		        end		      case &h8c		        result = result + mid("åceinouyÅCEINOUY",test2,1)		        i= i+1		      case &h98		        result = result + "</i>"		        italic = false		      case &hBE		        result = result + "-"		      else		        result = result + "<!"+hex(ascb(test)) + ">"		      end		    end		  next		  		  if italic then		    result = result + "</i>"		  end		  		  result = result.defineencoding(encodings.utf8)		  		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  label = "Cavena (.890)"		  binaryfile = true		End Sub	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="binaryfile"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="charactercount"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="clipnames"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="documentname"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="endline"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="framerate"			Group="Behavior"			InitialValue="0"			Type="double"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="italicstring"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="label"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass