#tag ClassProtected Class TransscriptConverterInherits cTitlelistConverter	#tag Event		Sub DoConvert(s as string)		  dim item as integer		  dim start, ende, text, textline, words(-1), word, filename as string		  dim tit as ctitle		  dim speakers(-1), speaker, titles(-1), title, lines(-1), line as string		  		  endline = guessseparator(s)		  		  speakers = split(s,endline+endline)		  		  for each speaker in speakers		    titles = wrap(speaker)		    for each title in titles		      item = item + 1		      tit = new ctitle		      tit.eventnr = item		      		      lines = split(title,endofLine)		      for each line in lines		        tit.lines.append line		      next		      titlelist.titles.append tit		    next		    if userCancelled then		      exit		    end		  next		  		  createEDL uppercase(documentname),0,ubound(titlelist.titles)		  		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub Constructor()		  label = "Transscript"		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Wrap(s as string) As string()		  dim result(-1), words(-1), titlewords(-1), title,s2, word, nexttitlewords(-1), lasttitle, lastwords(-1)  as string		  dim start, junk, cursor, le, i as integer		  dim test as string		  dim characterspertitle as double		  		  // we can calculate that on the template 		  characterspertitle = 2 * charactercount		  		  s2 = replacelineEndings(s," ")		  words = split(s2," ")		  		  for each word in words		    junk = junk + len(word)		    if junk < characterspertitle then		      titlewords.append word		    else		      // check about period. rule: not only two words after a period, except if it is the last.		      redim nexttitlewords(-1)		      if ubound(titlewords) > 2 then		        test = right(titlewords(ubound(titlewords)-1),1)		        select case test		        case ".", ":", "?", "!", ",", ";", "-"		          nexttitlewords.append titlewords.pop		        else		          test = right(titlewords(ubound(titlewords)-2),1)		          select case test		          case ".", ":", "?", "!", ",", ";", "-"		            nexttitlewords.append titlewords.pop		            nexttitlewords.append titlewords.pop		          end		        end		      end		      		      title = join(titlewords," ")		      result.append title		      redim titlewords(-1)		      while ubound(nexttitlewords) > -1 		        titlewords.append nexttitlewords.pop		      wend		      titlewords.append word		      junk = len(word)		    end		  next		  if ubound(titlewords) > -1 then		    		    // avoid small titles at the end		    if ubound(titlewords)<2  and ubound(result) > -1 then		      lasttitle = result.pop		      lastwords = split(lasttitle," ")		      if ubound(lastwords) >3 then		        titlewords.insert 0, lastwords.pop		        if ubound(titlewords)<2 and ubound(lastwords) >3 then		          titlewords.insert 0, lastwords.pop		        end		      end		      result.append join(lastwords," ")		    end		    		    title = join(titlewords," ")		    result.append title		  end		  		  		  		  return result		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Wrap2(s as string) As string()		  dim result(-1), title as string		  dim start, junk, cursor, le as integer		  dim test as string		  dim characterspertitle as double		  		  // we can calculate that on the template 		  characterspertitle = charactercount		  		  // look for word break before end		  // if there are less than 3 words after a sign, then use the sign.		  		  le = len(s)		  		  start = 1		  junk = characterspertitle		  		  while start + junk < le		    cursor = junk		    while cursor > 0		      select case mid(s,start+cursor,1)		      case " "		        junk = cursor		        		        // now go back, if there is a sign near before, use the sign.		        		        		        		        // now check at the end. if we are near end, go also back one word.		        		        exit		      end		      cursor = cursor-1		    wend		    title = mid(s,start,junk)  // implicite all, if it  does not find a space		    title = replacelineEndings(title,endofLine)		    result.Append title		    		    start = start + junk+1		    junk = characterspertitle		    		    if start + junk >= le then		      title = mid(s,start,junk)  // implicite all, if it  does not find a space		      title = replacelineEndings(title,endofLine)		      result.Append title		    end		  wend		  		  		  		  		  return result		  		  		End Function	#tag EndMethod	#tag Note, Name = rules				double returns  = new title				52 or 62  characters per line, 2 liners				close to the end break on periods				no short titles, so last title at least 3 words. 							#tag EndNote	#tag ViewBehavior		#tag ViewProperty			Name="binaryfile"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="charactercount"			Group="Behavior"			InitialValue="0"			Type="integer"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="clipnames"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="documentname"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="endline"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="framerate"			Group="Behavior"			InitialValue="0"			Type="double"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="italicstring"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="label"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass