#tag ClassProtected Class STLBinaryConverterInherits cTitlelistConverter	#tag Event		Sub DoConvert(s as string)		  dim i,j,item ,slen as integer		  dim start, ende, text, textline as string		  dim textlines(-1) as string		  dim tit as ctitle		  dim m, mtitle as memoryBlock		  		  		  mtitle = newmemoryBlock(&h80)		  		  slen = lenb(s)-&h80		  for i = &h400 to slen step &h80		    mtitle.stringValue(0,&h80) = midb(s,i+1,&h80)		    mtitle.littleEndian = true		    		    item = mtitle.short(1)		    		    		    if item > 0 then		      //start = 		      //ende =		      text = mtitle.stringValue(&h10,&h70)		      text = cleanup(text)		      		      tit = new ctitle		      titlelist.titles.append tit		      tit.eventnr = item		      tit.start = trim(start)		      tit.ende = trim(ende)		      		      		      		      textlines = split(text,endofline.macintosh)		      for each textline in textlines		        if trim(textline) <> "" then		          tit.lines.append trim(textline)		        end		      next		    end		    if i mod 10 = 0 then		      progress 33+66*i/slen		    end		    if userCancelled then		      exit		    end		  next		  		  createEDL uppercase(documentname),0,ubound(titlelist.titles)		  		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Function Cleanup(s as string) As string		  		  return latinFloating2UTF8(s)		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  label = "STL Binary"		  binaryfile = true		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function hex2(s as string) As string		  dim m,m2 as memoryBlock		  dim i,sz, offset, test as integer		  		  sz = lenb(s)		  if sz = 0 then return "<>"		  		  m = newmemoryBlock(sz)		  m2 = newmemoryBlock(2*sz)		  		  m.stringValue(0,sz) = s		  		  for i = 0 to m.size-1		    test = m.byte(i)		    if test<16 then		      m2.byte(offset) = asc("0")		      m2.stringValue(offset+1,1) = hex(test)		    else		      m2.stringValue(offset,2) = hex(test)		    end		    offset = offset + 2		  next		  		  return "<" +m2.stringValue(0,offset)+">"		  		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="binaryfile"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="charactercount"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="clipnames"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="documentname"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="endline"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="framerate"			Group="Behavior"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="italicstring"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="label"			Group="Behavior"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="cTitlelistConverter"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass