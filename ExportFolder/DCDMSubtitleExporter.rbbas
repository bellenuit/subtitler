#tag ClassProtected Class DCDMSubtitleExporterInherits TitleExporterBN	#tag Event		Function ExportEvent() As string		  dim title as oneTitle		  dim result, s as string		  dim root, node, fontnode, listnode as xmlnode		  dim item as integer		  dim textnode as xmltextNode		  dim comment as xmlcomment		  dim size as integer		  dim d as date		  dim mytc as TimeCode		  dim fontfile as string		  '<DCSubtitle Version="1.0">		  '<SubtitleID>ac17d141-7e83-6548-a50a-6dd9cbda5d31</SubtitleID>		  '<MovieTitle>"THE SWENKAS"</MovieTitle>		  '<ReelNumber>1</ReelNumber>		  '<Language>Custom</Language>		  '<LoadFont Id="Gilc" URI="Gilc-swenkas_d_14.ttf" />		  '<GDC voff="140" />		  '<Font Id="Gilc" Color="FFFFFFFF" Weight="normal" Size="50" >		  		  xdoc = new xmlDocument		  		  s = "Created with Belle Nuit Subtitler " + app.shortVersion + "."		  comment = xdoc.createcomment(s)		  xdoc.appendChild(comment)		  		  s = "You need to review manually the nodes ReelNumber and Language"		  comment = xdoc.createcomment(s)		  xdoc.appendChild(comment)		  		  fontfile = uniqueID.GetUniqueID		  s = "You need to rename the font "+ style.font + " as " +fontfile + " and put it into the same folder as the XML file"		  comment = xdoc.createcomment(s)		  xdoc.appendChild(comment)		  		  root = xdoc.createElement("SubtitleReel")		  root.SetAttribute("xmlns", "http://www.smpte-ra.org/schemas/428-7/2010/DCST")		  xdoc.AppendChild(root)		  		  node = xdoc.createElement("Id")		  textnode = xdoc.createtextNode("urn:uuid:"+uniqueID.GetUniqueID) 		  node.appendChild textnode 		  root.appendChild(node)		  		  node = xdoc.createElement("ContentTitleText")		  textnode = xdoc.createtextNode(documentname) 		  node.appendChild textnode		  root.appendChild(node)		  		  node = xdoc.createElement("AnnotationText")		  textnode = xdoc.createtextNode("Created with Belle Nuit Subtitler " + app.shortVersion + ".")		  node.appendChild textnode		  root.appendChild(node)		  		  node = xdoc.createElement("IssueDate")		  d = new date		  s = d.SQLDateTime+".000-00:00"		  s = replace(s," ","T")		  textnode = xdoc.createtextNode(s)		  node.appendChild textnode		  root.appendChild(node)		  		  node = xdoc.createElement("ReelNumber")		  textnode = xdoc.createtextNode("1")		  node.appendChild textnode		  root.appendChild(node)		  		  node = xdoc.createElement("Language")		  textnode = xdoc.createtextNode("En")		  node.appendChild textnode		  root.appendChild(node)		  		  node = xdoc.createElement("EditRate")		  mytc = gettimeCode.clone		  s = mytc.GetEditRate		  textnode = xdoc.createtextNode(s)		  node.appendChild textnode		  root.appendChild(node)		  		  node = xdoc.createElement("TimeCodeRate")		  s = format(mytc.getfps,"0")		  textnode = xdoc.createtextNode(s)		  node.appendChild textnode		  root.appendChild(node)		  		  node = xdoc.createElement("StartTime")		  textnode = xdoc.createtextNode("00:00:00:00")		  node.appendChild textnode		  root.appendChild(node)		  		  		  node = xdoc.createElement("LoadFont")		  node.setAttribute("ID",style.font)		  textnode = xdoc.createtextNode("urn:uuid:"+fontfile) 		  node.appendChild textnode		  root.appendChild(node)		  		  listnode = xdoc.createElement("SubtitleList")		  		  fontnode =xdoc.createElement("Font")		  fontnode.setAttribute("ID",style.font)		  fontnode.setAttribute("Color", create32bitColorString(style.textc,style.textalpha))		  if style.shadowalpha>0 then		    fontnode.setAttribute("Effect","shadow")		    fontnode.setAttribute("EffectColor", create32bitColorString(style.shadowc,style.shadowalpha))		  elseif style.borderalpha>0 then		    fontnode.setAttribute("Effect","border")		    fontnode.setAttribute("EffectColor", create32bitColorString(style.borderc,style.borderalpha))		  else		    fontnode.setAttribute("Effect","none")		  end		  		  fontnode.setAttribute("Weight","normal")		  		  fontnode.setAttribute("Size",str(titlesize))		  		  for each title in titles		    if title.getinpoint<>"" and title.getoutpoint<>"" then		      item = item  + 1		      node = addclip(item, title)		      fontnode.appendChild node		    end		  next		  		  listnode.AppendChild(fontnode)		  root.appendChild(listnode)		  		  doindent xdoc, 0		  result = xdoc.toString		  result = xmlCharacterFilter(result)		  		  return result		  		End Function	#tag EndEvent	#tag Event		Function GetDefaultNameEvent() As string		  return documentname + ".xml"		End Function	#tag EndEvent	#tag Event		Function GetLabelEvent() As string		  return "Digital Cinema Distribution Master Subtitle"		End Function	#tag EndEvent	#tag Event		Sub ImportEvent(s as string)		  		  		  dim v,position, position0, position2, dummy, itemstart, effectstart, starttcframes, item, countlines as integer		  dim starttc, dummystring, startframes, endframes, effectname, titletext, effectcategory, tagparameter, parameterstring, subtitletagcontent, fonttagccontent, halign as string		  dim title as onetitle		  dim st as Subtitle		  dim currentitalic, firstline as boolean		  		  // matti		  v = instr(s,"<?xml")		  if  v = 0 or v > 80 then		    msgbox "This is not an XML document"		    return		  end		  		  // we will use our own parser.		  		  countlines = max(countfields(s,"<generatoritem"),1)		  		  redim titles(-1)		  		  		  		  while GetNextItem(position,s,"Subtitle",subtitletagcontent,parameterstring)		    item = val(GetParameter(parameterstring,"SpotNumber"))		    startframes = GetParameter(parameterstring,"TimeIn")		    tc.SetTextDLP startframes		    startframes = tc.GetText		    endframes = GetParameter(parameterstring,"TimeOut")		    tc.SetTextDLP endframes		    endframes = tc.GetText		    		    title = new oneTitle(style)		    title.SetInOut(startframes,endframes)		    title.SetItemFilename item		    		    position2=0		    firstline = true		    while GetNextItem(position2,subtitletagcontent,"Text",dummystring, parameterstring)		      if firstline then		        halign = GetParameter(parameterstring,"Halign")		        if halign<>"" then title.AddLine "/style "+halign		        firstline = false		      end		      // hack		      if instr(dummystring,"<Font Italic=""yes"">")>0 then		        dummystring = replaceall(dummystring,"<Font Italic=""yes"">","<i>")		        dummystring = replaceall(dummystring,"</Font>","</i>")		      end		      title.AddLine dummystring		    wend		    		    titles.append title		    position = position + 1		  wend		  		  		  		  		  		  		  		  		  		  		  		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Function AddClip(item as integer, title as onetitle) As xmlnode		  dim tc as timeCode		  dim startframe, endframe as integer		  dim result as xmlnode		  dim textnode as xmlnode		  dim inp, outp as string		  dim tline as xmltextNode		  dim i,pos, pos1, pos2 as integer		  dim titlestyle as subtitle		  dim text as string		  dim fontnode as xmlnode		  		  tc = gettimeCode.clone		  tc.setText title.getinPoint		  inp = tc.GetText		  		  tc = gettimeCode.clone		  tc.setText title.getoutPoint		  outp = tc.GetText		  		  titlestyle = title.style		  		  		  result = xdoc.createelement("Subtitle")		  result.SetAttribute("SpotNumber", str(item))		  result.SetAttribute("TimeIn",inp)		  result.SetAttribute("TimeOut",outp)		  		  if titlestyle.italic or titlestyle.underline then		    fontnode =xdoc.createElement("Font")		    if titlestyle.italic then fontnode.setAttribute("Italic", "yes")		    if titlestyle.underline then fontnode.setAttribute("Underline", "yes")		    result.appendChild fontnode		  else		    fontnode = result		  end		  		  text = title.textclean		  		  for i = 1 to 2		    textnode = xdoc.createelement("Text")		    select case titlestyle.halign		    case 0		      textnode.SetAttribute("Halign","left")		      pos = 100 * titlestyle.left.value / titlestyle.width		      textnode.SetAttribute("Hposition",str(pos))		    case 1		      textnode.SetAttribute("Halign","center")		      pos = ((titlestyle.right.value+titlestyle.left.value)/2 - titlestyle.width/2) * 100 / titlestyle.width		      textnode.SetAttribute("Hposition",str(pos))		    case 2		      textnode.SetAttribute("Halign","right")		      pos = 100 * (titlestyle.width-titlestyle.right.value) / titlestyle.width		      textnode.SetAttribute("Hposition",str(pos))		    case 3  // center left		      textnode.SetAttribute("Halign","center")		      pos = ((titlestyle.right.value+titlestyle.left.value)/2 - titlestyle.width/2) * 100 / titlestyle.width		      textnode.SetAttribute("Hposition",str(pos))		    end		    textnode.SetAttribute("Valign","top")		    select case titlestyle.valign		    case 0		      pos1 = 100 * titlestyle.ver.value / titlestyle.height		      pos2 = pos1 + titlesizepercentage		    case 1		      if countfields(text,endofLine)>1 then		        pos1 = 100 * titlestyle.ver.value / titlestyle.height - titlesizePercentage/2		        pos2 = pos1 + titlesizepercentage		      else		        pos1 = 100 * titlestyle.ver.value / titlestyle.height		      end		    case 2		      if countfields(text,endofLine)>1 then		        pos1 = 100 * titlestyle.ver.value / titlestyle.height - titlesizePercentage		        pos2 = pos1 + titlesizepercentage		      else		        pos1 = 100 * titlestyle.ver.value / titlestyle.height		      end		    end		    select case i		    case 1		      textnode.SetAttribute("Vposition",str(pos1))		    case 2		      textnode.SetAttribute("Vposition",str(pos2))		    end		    if nthfield(text,endofLine,i)<>"" then		      tline = xdoc.createTextNode(nthField(text,endofLine,i))		      textnode.AppendChild tline		      fontnode.AppendChild textnode		    end		  next		  		  return result		  		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function Create32bitColorString(c as color, alpha as double) As string		  dim result as string		  		  result = right("0"+hex(alpha*255),2) + _		  right("0"+hex(c.red),2) + _		  right("0"+hex(c.green),2) + _		  right("0"+hex(c.blue),2)		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub DoIndent(parent as xmlnode, level as integer)		  Dim i,cf As Integer		  Dim s1,s As String		  dim haschildren as boolean		  s = Chr(10) // Linefeed		  For i = 0 To level-1		    s = s + " " //Chr(9) // Tab		  Next		  s1 = s + " " //chr(9)		  		  cf = parent.ChildCount 		  		  for i = cf-1 downto 0		    select case parent.child(i).type		    case 1 // element, 		      doindent parent.child(i), level + 1		      parent.insert(xdoc.createtextNode(s1),parent.Child(i))		      haschildren = true		    case 8 // comments		      parent.insert(xdoc.createtextNode(s1),parent.Child(i))		    end		  next		  if haschildren then		    parent.appendChild(xdoc.createtextNode(s))		  end		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ExportXML() As string		  'Dim root  As XmlElement		  'dim sequence, clip, file, track, rate, tcnode, medianode, videonode, filemedia, filemediavideo as xmlnode		  'dim mediasample as xmlnode		  'dim formatnode, tracknode, appspecific as xmlnode		  'dim samplecharnode as xmlnode		  'dim tc as timecode		  'dim s as string		  'dim i, inf, outf  as integer		  'dim f as folderitem		  'dim unixpath as string		  'tc = start.clone		  '		  'xdoc = New XmlDocument		  'root = XmlElement(xdoc.AppendChild(xdoc.CreateElement("xmeml")))		  'root.SetAttribute("version", "1") 		  '		  'sequence = addchild(root,"sequence")		  'sequence.setAttribute("id",label)		  '		  'addproperty sequence, "name", label		  'addproperty sequence, "duration", maxend-minstart		  'addrate sequence		  '		  'tcnode = addchild(sequence,"timecode")		  'tc.setframes minstart		  'addproperty tcnode, "string", tc.gettext		  'addproperty tcnode, "frame", format(tc.getframes,"0")		  'if start.dropframeP then		  'addproperty tcnode, "displayformat", "DF"		  'else		  'addproperty tcnode, "displayformat", "NDF"		  'end		  '		  'medianode = addchild(sequence, "media")		  'videonode = addchild(medianode, "video")		  'formatnode = addchild(videonode,"format")		  'samplecharnode = addchild(formatnode,"samplecharacteristics")		  'addproperty samplecharnode, "width", width		  'addproperty samplecharnode, "height", height		  'addproperty samplecharnode, "anamorphic", anamorphic		  'addproperty samplecharnode, "pixelaspectratio", pixelaspectratio		  '		  '// removed FCP says Unknown key (appspecificdata) encountered		  ''appspecific = addchild(formatnode,"appspecificdata")		  ''addproperty appspecific, "appname", "Belle Nuit Subtitler"		  ''addproperty appspecific, "appmanufacturer", "Belle Nuit Montage"		  ''addproperty appspecific, "appversion", "1.5"		  ''		  'track = addchild(videonode,"track")		  '		  'if exportfolder<>nil then		  'unixpath = "file:" + exportfolder.shellPath + "/" 		  'else		  'unixpath = ""		  'end		  '		  'for i = 0 to ubound(starts)		  'clip = addchild(track,"clipitem")		  'addproperty clip, "name", filenames(i)		  'tc.settext starts(i)		  'inf = tc.getframes-minstart		  'tc.settext ends(i)		  'outf = tc.getframes-minstart		  'addproperty clip, "duration", outf-inf		  'addproperty clip, "start", inf		  'addproperty clip, "end", outf		  'addproperty clip, "stillframe", true		  'addproperty clip, "anamorphic", anamorphic		  'addproperty clip, "alphatype", "straight"  //changed 1.6.3		  'file = addchild(clip, "file")		  'file.SetAttribute("id", filenames(i)) 		  'addproperty file, "name", filenames(i)		  'addproperty file, "pathurl", unixpath + filenames(i)		  'filemedia = addchild(file, "media")		  'filemediavideo = addchild(filemedia,"video")		  'addproperty filemediavideo, "duration", 2		  'addproperty filemediavideo, "stillframe", true		  'mediasample = addchild(filemediavideo, "samplecharacteristics")		  'addproperty mediasample, "width", width		  'addproperty mediasample, "height", height		  'next		  '		  '		  'doindent root, 0		  'xdoc.AppendChild(xdoc.CreateTextNode(ChrB(10)))		  '		  's =  xdoc.toString		  'i = s.InStr("<xmeml")		  's = s.Mid(1, i-1)+ Chr(10) + "<!DOCTYPE xmeml>" + Chr(10) + s.Mid(i)		  'return s		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetNextItem(byref start as integer, s as string, path as string, byref result as string, byref parameters as string) As boolean		  dim position, position0, endposition as integer		  dim paths(-1), pathitem, lastpathitem as string		  		  position = start		  		  paths = split(path,"/")		  		  for each pathitem in paths		    position = instr(position, s, "<" + pathitem + " ")		    lastpathitem = pathitem		    if position = 0 then return false		  next		  position0 = position + len(lastpathitem)		  		  position = instr(position, s, ">" )		  if position = 0 then return false		  		  endposition = instr(position,s, "</"+lastpathitem)		  if endposition = 0 then return false		  		  		  result = mid(s,position + 1, endposition - position -1)		  parameters = mid(s,position0+1,position-1-position0)		  start = position		  		  return true		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetParameter(s as string, parameter as string) As string		  dim result as string		  dim pospar, posquotestart, posquoteend as integer		  		  pospar = instr(s,parameter)		  if pospar = 0 then return ""		  		  posquotestart = instr(pospar+1,s,"""")		  if posquotestart = 0 then		    posquotestart = instr(pospar+1,s,"'")		    if posquotestart=0 then return ""		  end		  		  posquoteend = instr(posquotestart+1,s,"""")		  if posquoteend = 0 then		    posquoteend = instr(posquotestart+1,s,"'")		    if posquoteend = 0 then return ""		  end		  		  return mid(s,posquotestart+1,posquoteend-posquotestart-1)		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function TitleSize() As integer		  if style<>nil then 		    return  72 * 11 * style.size / style.height		  else		    return 42		  end		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function TitleSizePercentage() As integer		  if style<>nil then		    return 100*(style.size + style.leading)/style.height		  else		    return 6		  end		End Function	#tag EndMethod	#tag Note, Name = sample		xml version="1.0" encoding="UTF-8"?>		<DCSubtitle Version="1.0">		<SubtitleID>ac17d141-7e83-6548-a50a-6dd9cbda5d31</SubtitleID>		<MovieTitle>"THE SWENKAS"</MovieTitle>		<ReelNumber>1</ReelNumber>		<Language>Custom</Language>		<LoadFont Id="Gilc" URI="Gilc-swenkas_d_14.ttf" />		<GDC voff="140" />		<Font Id="Gilc" Color="FFFFFFFF" Weight="normal" Size="50" >		<Subtitle SpotNumber="1" FadeUpTime="20" FadeDownTime="20" TimeIn="00:00:32:110" TimeOut="00:00:34:230">		 <Text VAlign="bottom" HAlign="center" VPosition="14" ></Text>		 <Text VAlign="bottom" HAlign="center" VPosition="24" >Die Geschichte begann hier,</Text>		</Subtitle>		<Subtitle SpotNumber="2" FadeUpTime="20" FadeDownTime="20" TimeIn="00:00:35:130" TimeOut="00:00:39:180">		 <Text VAlign="bottom" HAlign="center" VPosition="14" >in dieser Stadt,</Text>		 <Text VAlign="bottom" HAlign="center" VPosition="24" >die die meisten "Joburg" nennen.</Text>		</Subtitle>		<Subtitle SpotNumber="3" FadeUpTime="20" FadeDownTime="20" TimeIn="00:00:40:050" TimeOut="00:00:43:180">		 <Text VAlign="bottom" HAlign="center" VPosition="14" ></Text>		 <Text VAlign="bottom" HAlign="center" VPosition="24" >Aber eigentlich hie√ü sie immer Egoli.</Text>		</Subtitle>		<Subtitle SpotNumber="4" FadeUpTime="20" FadeDownTime="20" TimeIn="00:00:43:220" TimeOut="00:00:48:100">		 <Text VAlign="bottom" HAlign="center" VPosition="14" >Das bedeutet:</Text>		 <Text VAlign="bottom" HAlign="center" VPosition="24" >Hier gibt's 'ne Menge Gold.</Text>		</Subtitle>		</Font>		</DCSubtitle>					#tag EndNote	#tag Property, Flags = &h0		xdoc As xmldocument	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="documentname"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="dumpstring"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="moviename"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass