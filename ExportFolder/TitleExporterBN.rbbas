#tag ClassProtected Class TitleExporterBN	#tag Method, Flags = &h0		Function ConvertText(s as string) As string		  dim result as string		  dim t as string		  dim rtft as rtftext		  dim rtffile as rtfwriter		  dim b as binarystream		  		  result = s.convertencoding(gettextEncoding)		  		  if dict.getstring("textencoding",t) and t=  "Unicode RTF" then		    rtft = new rtftext		    rtft.text = s 'result		    rtffile = new rtfwriter		    rtffile.exportfolderitem = gettemporaryFolderItem		    rtft.export rtffile		    result = rtffile.dump		    rtffile.exportfolderitem.delete		  end		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Export() As string		  app.mouseCursor = system.Cursors.Wait		  		  if mainwindow<>nil then		    exportfolder = getfolderitem(mainwindow.folderpath)		  end		  		  		  dumpstring = exportevent		  app.mouseCursor = System.Cursors.StandardPointer		  return dumpstring		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetCreator() As string		  dim s as string		  s = getcreatorEvent		  if s="" then return "ttxt" else return s		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetDefaultDict() As dictionary		  return getdefaultdictevent		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetDefaultName() As string		  dim s as string		  s = getdefaultnameevent		  		  if s="" then 		    return documentname + " " + getlabel		   else 		    return s		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetDefaultPath() As folderitem		  dim result as folderitem		  result = getdefaultpathevent		  if result =nil then		    if document<>nil then		      return document.parent		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetFrameRateList() As string()		  return array("24","25","29.97 DF", "29.97 NDF","30")		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetLabel() As string		  return GetLabelEvent		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetLineEncodingList() As string()		  return array("Macintosh","Unix","Windows")		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetLineEnding() As string		  dim s as string		  if dict.getstring("lineending",s) then		    select case s		    case "Macintosh"		      return endofLine.macintosh		    case "Windows"		      return endofLine.windows		    case "Unix"		      return endofLine.unix		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function GetMovieDuration() As double		  if mainwindow<>nil then		    if mainwindow.movieplayer1.movie<>nil then		      // removed dependency, not needed		      // return mainwindow.movieplayer1.movie.DurationMBS		      return mainwindow.movieplayer1.Duration		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetMovieFileName() As string		  if mainwindow<>nil then		    return mainwindow.moviefilename		  end		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function GetMovieHeight() As integer		  if mainwindow<>nil then		    if mainwindow.movieplayer1.movie<>nil then		      return mainwindow.movieplayer1.movie.baseMovieheight		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function GetMovieOffset() As timecode		  dim s as string		  dim result as timecode		  result = getTimeCode		  if mainwindow<>nil then		    s  = mainwindow.movieOffsetField.text		    result.settext(s)		  end		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function GetMovieWidth() As integer		  if mainwindow<>nil then		    if mainwindow.movieplayer1.movie<>nil then		      return mainwindow.movieplayer1.movie.baseMoviewidth		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetNextItem(byref start as integer, s as string, path as string, byref result as string, byref parameters as string) As boolean		  dim position, position0, endposition as integer		  dim paths(-1), pathitem, lastpathitem as string		  		  position = start		  		  paths = split(path,"/")		  		  for each pathitem in paths		    position = instr(position, s, "<" + pathitem + " ")		    lastpathitem = pathitem		    if position = 0 then return false		  next		  position0 = position + len(lastpathitem)		  		  position = instr(position, s, ">" )		  if position = 0 then return false		  		  endposition = instr(position,s, "</"+lastpathitem)		  if endposition = 0 then return false		  		  		  result = mid(s,position + 1, endposition - position -1)		  parameters = mid(s,position0+1,position-1-position0)		  start = position		  		  return true		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetOffset() As timecode		  dim applyoffset as boolean		  dim applyoffsetvalue as string		  dim result as timecode		  result = getTimeCode		  if dict.getboolean("applyoffset", applyoffset) and applyoffset then		    if dict.getstring("applyoffsetvalue",applyoffsetvalue) then		      result.settext(applyoffsetvalue)		    end		  end		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetParameter(s as string, parameter as string) As string		  dim result as string		  dim pospar, posquotestart, posquoteend as integer		  		  pospar = instr(s,parameter)		  if pospar = 0 then return ""		  		  posquotestart = instr(pospar+1,s,"""")		  if posquotestart = 0 then		    posquotestart = instr(pospar+1,s,"'")		    if posquotestart=0 then return ""		  end		  		  posquoteend = instr(posquotestart+1,s,"""")		  if posquoteend = 0 then		    posquoteend = instr(posquotestart+1,s,"'")		    if posquoteend = 0 then return ""		  end		  		  return mid(s,posquotestart+1,posquoteend-posquotestart-1)		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function GetTextEncoding() As textencoding		  dim s as string		  if dict.getstring("textencoding",s) then		    select case s		    case "DOS Chinese Simplified"		      return encodings.DOSChineseSimplif		    case "DOS Chinese Traditional"		      return encodings.DOSCHineseTrad		    case "DOS Latin1"		      return encodings.DOSLatin1		    case "ISO Latin1"		      return encodings.ISOLatin1		    case "Mac Chinese Simplified"		      return encodings.macchinesesimp		    case "Mac Chinese Traditional"		      return encodings.macchinesetrad		    case "MacRoman"		      return encodings.macRoman		    case "Windows Latin1"		      return encodings.windowsLatin1		    case "UTF-8", "Unicode RTF"		      return encodings.uTF8		    case "UTF-16"		      return encodings.uTF16		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTextEncodingList() As string()		  dim s as string		  s = gettextEncodingListEvent		  if s<>"" then return split(s,";")		  return array("DOS Chinese Simplified", "DOS Chinese Traditional", "DOS Latin1","ISO Latin1","Mac Chinese Simplified", "Mac Chinese Traditional","MacRoman","UTF-8","UTF-16","Unicode RTF","Windows Latin1")		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTimeCode() As Timecode		  'dim framerate as string		  '		  		  dim tc as timecode		  tc = style.getTimeCode		  return tc		  		  		  'if dict.getstring("framerate", framerate) then		  'select case framerate		  'case "24"		  'return new timecode(24,24,false)		  'case "25"		  'return new timecode(25,25,false)		  'case "29.97 DF"		  'return new timecode(30,29.97,true)		  'case "29.97 NDF"		  'return new timecode(30,29.97,false)		  'case "30"		  'return new timecode(30,30,false)		  'else		  'return new timecode		  'end		  'end		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function GetTimeCodeImport() As timecode		  dim framerate as string		  		  		  if dict.getstring("framerate", framerate) then		    select case framerate		    case "24"		      return new timecode(24,24,false)		    case "25"		      return new timecode(25,25,false)		    case "29.97 DF", "29.97"		      return new timecode(30,29.97,true)		    case "29.97 NDF"		      return new timecode(30,29.97,false)		    case "30"		      return new timecode(30,30,false)		    else		      return  style.getTimeCode		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetType() As string		  dim s as string		  s = gettypeevent		  if s="" then return "TEXT" else return s		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Import(s as string) As string		  dim sources(-1) as string		  		  		  		  dim title as onetitle		  importevent s		  		  for each title in titles		    sources.append title.source		  next		  return join(sources,endofLine + endofLine)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsBinary() As boolean		  return Isbinaryevent		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Progress(n as integer)		  if myprogress<>nil then		    myprogress.value = n		    myprogress.window.updatenow		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function SimplifyText(s as string) As string		  dim result as string		  result = s		  result = replaceall(result,"…","...")		  result = replaceall(result,"–","-")		  result = replaceall(result,"—","-")		  result = replaceall(result,"“","""")		  result = replaceall(result,"”","""")		  result = replaceall(result,"«","""")		  result = replaceall(result,"»","""")		  result = replaceall(result,"„","""")		  result = replaceall(result,"‚","'") 		  result = replaceall(result,"‛","'")		  result = replaceall(result,"‟","""")		  result = replaceall(result,"´","'")		  result = replaceall(result,"′","'")		  result = replaceall(result,"″","""")		  result = replaceall(result,"‘","'")		  result = replaceall(result,"’","'")		  return result		End Function	#tag EndMethod	#tag Hook, Flags = &h0		Event ExportEvent() As string	#tag EndHook	#tag Hook, Flags = &h0		Event GetCreatorEvent() As string	#tag EndHook	#tag Hook, Flags = &h0		Event GetDefaultDictEvent() As dictionary	#tag EndHook	#tag Hook, Flags = &h0		Event GetDefaultNameEvent() As string	#tag EndHook	#tag Hook, Flags = &h0		Event GetDefaultPathEvent() As folderitem	#tag EndHook	#tag Hook, Flags = &h0		Event GetLabelEvent() As string	#tag EndHook	#tag Hook, Flags = &h0		Event GetTextEncodingListEvent() As string	#tag EndHook	#tag Hook, Flags = &h0		Event GetTypeEvent() As string	#tag EndHook	#tag Hook, Flags = &h0		Event ImportEvent(s as string)	#tag EndHook	#tag Hook, Flags = &h0		Event IsBinaryEvent() As boolean	#tag EndHook	#tag Property, Flags = &h0		dict As dictionary	#tag EndProperty	#tag Property, Flags = &h0		document As folderitem	#tag EndProperty	#tag Property, Flags = &h0		documentname As string	#tag EndProperty	#tag Property, Flags = &h0		dumpstring As string	#tag EndProperty	#tag Property, Flags = &h0		exportfolder As folderitem	#tag EndProperty	#tag Property, Flags = &h0		mainwindow As main	#tag EndProperty	#tag Property, Flags = &h0		moviename As string	#tag EndProperty	#tag Property, Flags = &h0		myprogress As progressBar	#tag EndProperty	#tag Property, Flags = &h0		style As subtitle	#tag EndProperty	#tag Property, Flags = &h0		tc As timecode	#tag EndProperty	#tag Property, Flags = &h0		titles(-1) As oneTitle	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="documentname"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="dumpstring"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="moviename"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass