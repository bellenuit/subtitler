#tag ClassProtected Class FCPXMLExporterBNInherits TitleExporterBN	#tag Event		Function ExportEvent() As string		  dim title as oneTitle		  dim result as string		  dim f as folderitem		  		  label = documentname		  start = getTimeCode		  start.setframes 0		  width = style.width		  height = style.height		  anamorphic = style.FCPanamorphic		  pixelaspectratio = style.FCPpixelaspectratio		  		  for each title in titles		    'exportfolder = title.exportfolder		    if title.getinpoint<>"" and title.getoutpoint<>"" then		      addClip title.getinpoint, title.getoutpoint, title.filenameComplete		    end		  next		  		  result = ExportXML		  return result		  		End Function	#tag EndEvent	#tag Event		Function GetDefaultNameEvent() As string		  return documentname + ".xml"		End Function	#tag EndEvent	#tag Event		Function GetLabelEvent() As string		  return "Final Cut Pro XML"		End Function	#tag EndEvent	#tag Method, Flags = &h0		Function AddChild(parent as xmlnode, key as string, inlinetag as boolean = false) As xmlnode		  dim node as xmlnode		  node = parent.appendChild(xdoc.createelement(key))		  return node		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub AddClip(st as string, en as string, filename as string)		  dim tc as timeCode		  dim startframe, endframe as integer		  		  tc = start.clone		  tc.settext st		  startframe = tc.getframes		  tc.settext en		  endframe = tc.getframes		  		  if endframe <= startframe then return		  		  starts.append st		  tc.settext st		  if ubound(starts) = 0 then 		    minstart = tc.getframes		  else		    minstart = min(tc.getframes,minstart)		  end		  ends.append en		  tc.settext en		  if ubound(ends) = 0 then 		    maxend = tc.getframes		  else		    maxend = max(tc.getframes,maxend)		  end		  		  filenames.append filename		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddProperty(parent as xmlnode, key as string, value as variant)		  dim node as xmlnode		  node = addchild(parent,key, true)		  select case value.type		  case 2,5		    node.AppendChild(xdoc.CreateTextNode(format(value,"-0")))		  case 8		    node.AppendChild(xdoc.CreateTextNode(value))		  case 11		    if value.booleanValue then		      node.AppendChild(xdoc.CreateTextNode("TRUE"))		    else		      node.AppendChild(xdoc.CreateTextNode("FALSE"))		    end		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddRate(parent as xmlnode)		  dim rate as xmlnode		  		  rate = addchild(parent,"rate")		  addproperty rate, "ntsc", (start.getfps = 30 or start.getfps = 29.97)		  addproperty rate, "timebase",round(start.getfps)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoIndent(parent as xmlnode, level as integer)		  Dim i,cf As Integer		  Dim s1,s As String		  dim haschildren as boolean		  s = Chr(10) // Linefeed		  For i = 0 To level-1		    s = s + Chr(9) // Tab		  Next		  s1 = s + chr(9)		  		  cf = parent.ChildCount 		  		  for i = cf-1 downto 0		    if parent.child(i).type = 1 then		      doindent parent.child(i), level + 1		      parent.insert(xdoc.createtextNode(s1),parent.Child(i))		      haschildren = true		    end		  next		  if haschildren then		    parent.appendChild(xdoc.createtextNode(s))		  end		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ExportXML() As string		  Dim root  As XmlElement		  dim sequence, clip, file, track, rate, tcnode, medianode, videonode, filemedia, filemediavideo as xmlnode		  dim mediasample as xmlnode		  dim formatnode, tracknode, appspecific as xmlnode		  dim samplecharnode as xmlnode		  dim tc as timecode		  dim s, sp as string		  dim i, inf, outf  as integer		  dim f as folderitem		  dim unixpath as string		  dim comm as xmlnode		  tc = start.clone		  		  xdoc = New XmlDocument		  comm = xdoc.appendChild(xdoc.createComment("Created by Belle Nuit Subtitler " + app.shortVersion))		  root = XmlElement(xdoc.AppendChild(xdoc.CreateElement("xmeml")))		  root.SetAttribute("version", "1") 		  		  sequence = addchild(root,"sequence")		  sequence.setAttribute("id",label)		  		  addproperty sequence, "name", label		  addproperty sequence, "duration", maxend-minstart		  addrate sequence		  		  tcnode = addchild(sequence,"timecode")		  tc.setframes minstart		  addproperty tcnode, "string", tc.gettext		  addproperty tcnode, "frame", format(tc.getframes,"0")		  if start.dropframeP then		    addproperty tcnode, "displayformat", "DF"		  else		    addproperty tcnode, "displayformat", "NDF"		  end		  		  medianode = addchild(sequence, "media")		  videonode = addchild(medianode, "video")		  formatnode = addchild(videonode,"format")		  samplecharnode = addchild(formatnode,"samplecharacteristics")		  addproperty samplecharnode, "width", width		  addproperty samplecharnode, "height", height		  addproperty samplecharnode, "anamorphic", anamorphic		  addproperty samplecharnode, "pixelaspectratio", pixelaspectratio		  		  // removed FCP says Unknown key (appspecificdata) encountered		  'appspecific = addchild(formatnode,"appspecificdata")		  'addproperty appspecific, "appname", "Belle Nuit Subtitler"		  'addproperty appspecific, "appmanufacturer", "Belle Nuit Montage"		  'addproperty appspecific, "appversion", "1.5"		  '		  track = addchild(videonode,"track")		  		  if exportfolder<>nil then		    unixpath = urlpath(exportfolder)		  else		    msgBox "Error: No export folder has been defined" + endofLine+endofLine+"Final Cut Pro may not import the file properly"		    unixpath = ""		  end		  		  for i = 0 to ubound(starts)		    clip = addchild(track,"clipitem")		    addproperty clip, "name", filenames(i)		    tc.settext starts(i)		    inf = tc.getframes-minstart		    tc.settext ends(i)		    outf = tc.getframes-minstart		    addproperty clip, "duration", outf-inf+100		    addproperty clip, "start", inf		    addproperty clip, "end", outf		    addproperty clip, "in", 50		    addproperty clip, "out", 50 + outf-inf		    addproperty clip, "stillframe", true		    addproperty clip, "anamorphic", anamorphic		    addproperty clip, "pixelaspectratio", pixelaspectratio		    addproperty clip, "alphatype", "straight"  //changed 1.6.3		    file = addchild(clip, "file")		    file.SetAttribute("id", filenames(i)) 		    addproperty file, "name", filenames(i)		    sp = filenames(i)		    sp = unixpath + sp		    addproperty file, "pathurl", sp		    filemedia = addchild(file, "media")		    filemediavideo = addchild(filemedia,"video")		    addproperty filemediavideo, "duration", outf-inf+100		    addproperty filemediavideo, "stillframe", true		    mediasample = addchild(filemediavideo, "samplecharacteristics")		    addproperty mediasample, "width", width		    addproperty mediasample, "height", height		    addproperty mediasample, "pixelaspectratio", pixelaspectratio //added 1.7.8		    addproperty mediasample, "alphatype", "straight"  //added 1.7.8		  next		  		  		  doindent root, 0		  xdoc.AppendChild(xdoc.CreateTextNode(ChrB(10)))		  		  s =  xdoc.toString		  i = s.InStr("<xmeml")		  s = s.Mid(1, i-1)+ Chr(10) + "<!DOCTYPE xmeml>" + Chr(10) + s.Mid(i)		  return s		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function URLPath(f as folderitem) As string		  dim result as string		  		  result =  "file://localhost" + f.shellPath 		  if f.directory then		    result = result + "/" 		  end		  result = replaceall(result, "\ ", " ")		  		  // removing dependency MBS		  //result = encodingToURLMBS(result)		  dim b as new RAMstream(256)		  dim i as integer		  dim ch as string		  for i = 1 to lenb(result)		    ch = midb(result,i,1)		    select case asc(ch)		    case 48 to 57, 65 To 90, 97 To 122		      b.Write(ch)		    else		      b.write("%"+right("0" + Hex(Asc(ch)),2))		    end		  next		  i = b.Position		  b.Position 0		  result = b.Read(i)		  result = DefineEncoding(result,encodings.UTF8) // not nil!		  //end		  		  result = replaceall(result, "%2F","/")		  result = replaceall(result, "%3A",":")		  		  		  return result		  		End Function	#tag EndMethod	#tag Property, Flags = &h0		anamorphic As boolean	#tag EndProperty	#tag Property, Flags = &h0		ends(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		filenames(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		height As integer	#tag EndProperty	#tag Property, Flags = &h0		label As string	#tag EndProperty	#tag Property, Flags = &h0		maxend As integer	#tag EndProperty	#tag Property, Flags = &h0		minstart As integer	#tag EndProperty	#tag Property, Flags = &h0		pixelaspectratio As string	#tag EndProperty	#tag Property, Flags = &h0		start As timecode	#tag EndProperty	#tag Property, Flags = &h0		starts(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		width As integer	#tag EndProperty	#tag Property, Flags = &h0		xdoc As xmldocument	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="anamorphic"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="documentname"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="dumpstring"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="height"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="label"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="maxend"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="minstart"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="moviename"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="pixelaspectratio"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="width"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass