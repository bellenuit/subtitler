#tag ClassProtected Class STLTextExporterBNInherits TitleExporterBN	#tag Event		Function ExportEvent() As string		  dim i,j,cf, currenthalign as integer		  dim tapeoffset as boolean		  dim lines(-1), result, inp, outp, t as string		  dim title as onetitle		  dim yoff, currentver as integer		  dim tc, offset as timecode		  		  		  tc = gettimeCode		  offset = getoffset		  call dict.getboolean("usetapeoffset", tapeoffset)		  		  if tapeoffset then		    lines.append "$TapeOffset = true" 		  else		    lines.append "$TapeOffset = false" 		  end		  '$FontName = FranklinGothic		  '$FontSize = 24		  '$Bold = false		  '$Italic = false		  '$Underline = false		  '$HorzAlign = Left		  '$VertAlign = Bottom		  '$XOffset = 0		  '$YOffset = 0		  '$FadeIn = 0		  '$FadeOut = 0		  		  lines.append "$FontName = " + style.font		  lines.append "$FontSize = " + format(style.size,"0")		  if style.bold then		    lines.append "$Bold = true"		  else		    lines.append "$Bold = false"		  end		  if style.italic then		    lines.append "$Italic = true"		  else		    lines.append "$Italic = false"		  end		  if style.underline then		    lines.append "$Underline = true"		  else		    lines.append "$Underline = false"		  end		  select case style.halign		  case style.kHalignleft		    lines.append   "$HorzAlign = Left"		  case style.kHaligncenter		    lines.append   "$HorzAlign = Center"		  case style.khalignright		    lines.append   "$HorzAlign = Right"		  case style.KHalignCenterLeft		    lines.append   "$HorzAlign = Center"		  end		  currenthalign = style.halign		  		  yoff = style.ver.value		  currentver = style.ver.value		  select case style.valign		  case style.kvaligntop		    lines.append "$VertAlign = Top"		    yoff = yoff - style.height * 0.1 // title save are borders in DVDSP		  case style.kvaligncenter		    lines.append "$VertAlign = Center"		    yoff = yoff - style.height / 2 		  case style.kvalignbottom		    lines.append "$VertAlign = Bottom"		    yoff = yoff - style.height * 0.9 // title save are borders in DVDSP		  end		  lines.append "$YOffset = " + str(yoff)		  		  lines.append "$ColorIndex1 =  "  + style.DVDinfo("textColor")		  lines.append "$ColorIndex2 =  "  + style.DVDinfo("Outline1Color")		  lines.append "$ColorIndex3 =  "  + style.DVDinfo("Outline2Color")		  lines.append "$ColorIndex4 =  "  + style.DVDinfo("BackgroundColor")		  lines.append "$TextContrast = "  + style.DVDinfo("textContrast")		  lines.append "$Outline1Contrast = " + style.DVDinfo("Outline1Contrast")		  lines.append "$Outline2Contrast = " + style.DVDinfo("Outline2Contrast")		  lines.append "$BackgroundContrast = " + style.DVDinfo("BackgroundContrast")		  lines.append "// STL file by Belle Nuit Subtitler " + app.shortVersion		  lines.append "// " + style.DVDinfo("Comments")		  		  for each title in titles		    if title.getinpoint<>"" and title.getoutpoint<>"" then		      inp = title.getinpoint		      outp = title.getoutpoint		      		      tc.settext inp		      tc.plus(offset)		      inp = tc.gettext		      tc.settext outp		      tc.plus(offset)		      outp = tc.gettext		      		      t = title.gettext		      t = replaceall(t,endofline," | ")		      if title.style.underline and not style.underline then		        t = "^U"+t+"^U"		      end		      if title.style.italic and not style.italic then		        t = "^I"+t+"^I"		      end		      if title.style.bold and not style.bold then		        t = "^B"+t+"^B"		      end		      		      t = replaceall(t,"<b>","^B")		      t = replaceall(t,"</b>","^B")		      t = replaceall(t,"<i>","^I")		      t = replaceall(t,"</i>","^I")		      t = replaceall(t,"<u>","^U")		      t = replaceall(t,"</u>","^U")		      		      if title.style.halign <> currenthalign then		        currenthalign = title.style.halign		        select case currenthalign		        case style.khalignleft		          lines.append "$HorzAlign = left"		        case style.khaligncenter		          lines.append "$HorzAlign = center"		        case style.khalignright		          lines.append "$HorzAlign = right"		        end		      end		      		      if title.style.ver.value <> currentver then		        yoff = yoff + (title.style.ver.value - currentver) 		        lines.append "$YOffset = " + str(yoff ) 		        currentver = title.style.ver.value		      end		      		      lines.append inp + " , " + outp +  " , " + t		    end		  next		  		  result = join(lines,getlineEnding)		  result = converttext(result)		  return result		  		End Function	#tag EndEvent	#tag Event		Function GetDefaultDictEvent() As dictionary		  dim d as new dictionary		  d.value("textencoding") = "MacRoman"		  d.value("lineending") = "Macintosh"		  d.value("applyoffset") = true		  d.value("applyoffsetvalue") = "00:00:00:00"		  d.value("usetapeoffset") = false		  return d		End Function	#tag EndEvent	#tag Event		Function GetDefaultNameEvent() As string		  return documentname + ".stl"		End Function	#tag EndEvent	#tag Event		Function GetLabelEvent() As string		  return "STL Text"		End Function	#tag EndEvent	#tag Note, Name = dump		  dim i,j,cf as integer		  dim onet as onetitle		  dim titles(-1) as string		  dim lines(-1) as string		  dim result as string		  dim title as string		  dim tc as timecode		  dim inp, outp, t as string		  dim currenthalign as integer		  		  onet = new onetitle(style)		  		  if tapeoffset then		    lines.append "$TapeOffset = true" 		  else		    lines.append "$TapeOffset = false" 		  end		  		  lines.append "$FontName = " + style.font		  lines.append "$FontSize = " + str(style.size)		  if style.bold then		    lines.append "$Bold = true"		  end		  if style.italic then		    lines.append "$Italic = true"		  end		  if style.underline then		    lines.append "$Underlined = true"		  end		  currenthalign = -1 // illegal		  		  		  cf = titlecount		  		  tc = style.getTimeCode		  		  for i = 1 to cf		    onet = gettitle(i)		    if onet.getinpoint<>"" and onet.getoutpoint<>"" then		      inp = onet.getinpoint		      outp = onet.getoutpoint		      if not tapeoffset then		        tc.settext inp		        tc.minus(offset)		        inp = tc.gettext		        tc.settext outp		        tc.minus(offset)		        outp = tc.gettext		      end		      t = onet.text		      t = replaceall(t,endofline," | ")		      if onet.style.underline and not style.underline then		        t = "^U"+t+"^U"		      end		      if onet.style.italic and not style.italic then		        t = "^I"+t+"^I"		      end		      if onet.style.bold and not style.bold then		        t = "^B"+t+"^B"		      end		      if app.parsestyletags then		        t = replaceall(t,"<b>","^B")		        t = replaceall(t,"</b>","^B")		        t = replaceall(t,"<i>","^I")		        t = replaceall(t,"</i>","^I")		        t = replaceall(t,"<u>","^U")		        t = replaceall(t,"</u>","^U")		      end		      if not app.reg.online then		        t = "Offline" + mid(t,8)		      end		      if onet.style.halign <> currenthalign then		        currenthalign = onet.style.halign		        select case currenthalign		        case style.khalignleft		          lines.append "$HorzAlign = left"		        case style.khaligncenter		          lines.append "$HorzAlign = center"		        case style.khalignright		          lines.append "$HorzAlign = right"		        end		      end		      lines.append inp + " , " + outp +  " , " + t		    end		    		  next		  		  result = join(lines,endofline)		  result = result.convertEncoding(encodings.macroman)		  return result		  			#tag EndNote	#tag Note, Name = menuhandler		  dim f as folderItem		  dim t as textoutputStream		  dim i as integer		  dim st as string		  dim s as string		  dim sd as saveasDialog		  dim tc as timecode		  		  sd = new saveasDialog		  sd.Filter = "TEXT"		  sd.ActionButtonCaption = "Export STL Text"		  sd.suggestedFileName = title + ".stl"		  if document = nil then		    sd.initialDirectory = documentsFolder		  else		    sd.initialDirectory = document.parent		  end		  //f = sd.showmodalwithin(me)		  f = sd.showmodal		  if f<>nil then		    t = f.createtextfile		    if t<>nil then		      offlineWarning		      app.mouseCursor = system.cursors.wait		      tc = style.gettimeCode		      tc.settext movieoffsetField.text		      t.write titlelist.dumpsTLtext(app.stltapeoffset, tc)		      t.close 		      app.mouseCursor = system.cursors.standardpointer		    else		      msgbox "Error Main:FileExportSTLText: No TextOutPutStream"		    end		    		  end			#tag EndNote	#tag ViewBehavior		#tag ViewProperty			Name="documentname"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="dumpstring"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="moviename"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass