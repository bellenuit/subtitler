#tag ClassProtected Class QuicktimeTextExporterBNInherits TitleExporterBN	#tag Event		Function ExportEvent() As string		  dim i,j,cf,topi,bottomi,currenthalign as integer		  dim applyoffset, resetformat as boolean		  dim result,  lines(-1) , textlines(-1), inp, outp, t,stylestr, resetline, applyoffsetvalue as string		  dim title as onetitle		  dim tc, offset as timecode		  		  currenthalign = -1 // illegal		  		  // use textheight not size and add the leading		  		  lines.append "{QTtext} "		  lines.append "{width:"+ str(style.width)+"}"		  lines.append "{height:"+ str(2 * style.textheight + style.leading)+"}"		  lines.append "{font:"+ style.font + "}"		  if style.bold then		    lines.append  "{bold}"		  end		  if style.italic then		    lines.append  "{italic}"		  end		  if style.underline then		    lines.append  "{underline}"		  end		  lines.append "{size:" + str(style.size) + "}"		  		  lines.append "{textColor:" + format(style.textc.red * 257,"0")  _		  + "," + format(style.textc.green * 257,"0")  + "," + format(style.textc.blue * 257,"0") + "}"		  lines.append "{timeStamps:absolute}"		  lines.append "{timeScale:" + str(round(val(style.framerate))) + "}" // how handle dropframe??		  		  if style.rectalpha>0 then		    lines.append "{backColor:" + format(style.rectc.red * 257,"0")  _		    + "," + format(style.rectc.green * 257,"0")  + "," + format(style.rectc.blue * 257,"0") + "}"		    lines.append "{keyedtext:off}"		  else		    lines.append "{keyedtext:on}"		  end		  		  if style.shadowalpha > 0 then		    lines.append "{dropShadow:on}"		    lines.append "{dropShadowOffset:" +str(style.shadowx)+"," + str(style.shadowy) +"}"		    lines.append "{dropShadowTransparency:" +format(style.shadowalpha*100,"0") + "}"		  end		  		  offset = getoffset		  tc = getTimeCode		  		  for each title in titles		    		    if title.getinpoint<>"" and title.getoutpoint<>"" then		      inp = title.getinpoint		      outp = title.getoutpoint		      		      // always be absolute		      tc.settext inp		      tc.plus(offset)		      inp = tc.gettext		      inp = left(inp,8) + "."+ right(inp,2)		      tc.settext outp		      tc.plus(offset)		      outp = tc.gettext		      outp = left(outp,8) + "."+ right(outp,2)		      		      resetline = ""		      if title.style.halign <> currenthalign then		        currenthalign = title.style.halign		        select case currenthalign		        case style.khalignleft		          lines.append "{justify:left}"		        case style.khaligncenter		          lines.append "{justify:center}"		        case style.khalignright		          lines.append "{justify:right}"		        case style.KHalignCenterLeft		          lines.append "{justify:center}"		        end		      end		      if title.style.underline <> style.underline or _		        title.style.italic <> style.italic or _		        title.style.bold <> style.bold or _		        title.style.textc <> style.textc then		        if title.style.underline then lines.append "{underline}"		        if title.style.italic then lines.append "{italic}"		        if title.style.bold then lines.append "{bold}"		        if not (title.style.underline or  title.style.italic  or  title.style.bold ) then		          lines.append "{plain}"		        end 		        if title.style.textc <> style.textc then		          lines.append "{textcolor:" + format(title.style.textc.red * 257,"0")  + "," _		          + format(title.style.textc.green * 257,"0")  + "," + format(title.style.textc.blue * 257,"0") + "}"		          resetline = "{textcolor:" + format(title.style.textc.red * 257,"0")  + "," _		          + format(title.style.textc.green * 257,"0")  + "," + format(title.style.textc.blue * 257,"0") + "}"		        end		        if style.underline then resetline = resetline + "{underline}"		        if style.italic then resetline = resetline + "{italic}"		        if style.bold then resetline = resetline + "{bold}"		        if not (style.underline or style.italic  or style.bold ) then		          resetline = resetline + "{plain}"		        end 		      end		      if title.style.italic <> style.italic then		        lines.append "{italic}"		      end		      if title.style.bold <> style.bold then		        lines.append "{bold}"		      end		      lines.append "[" + inp + "]"		      textlines = split(title.textclean,endofLine)		      		      for each t in textlines		        lines.append t		      next		      lines.append "[" + outp + "]"		      if resetline<>"" then lines.append resetline		    end		  next		  		  result = join(lines,endofline.macintosh)		  result = converttext(result)		  return result		  		End Function	#tag EndEvent	#tag Event		Function GetDefaultDictEvent() As dictionary		  dim d as new dictionary		  d.value("textencoding") = "MacRoman"		  d.value("applyoffset") = true		  d.value("applyoffsetvalue") = "00:00:00:00"		  return d		End Function	#tag EndEvent	#tag Event		Function GetDefaultNameEvent() As string		  return documentname + ".txt"		End Function	#tag EndEvent	#tag Event		Function GetDefaultPathEvent() As folderitem		  if document<>nil then		    return document.parent		  end		End Function	#tag EndEvent	#tag Event		Function GetLabelEvent() As string		  return "Quicktime Text"		End Function	#tag EndEvent	#tag Note, Name = Dump		  dim i,j,cf,topi,bottomi as integer		  dim onet as onetitle		  dim titles(-1), textlines(-1) as string		  dim lines(-1) as string		  dim result as string		  dim title as string		  dim tc as timecode		  dim inp, outp, t as string		  dim stylestr as string		  dim resetline as string		  dim d as date		  dim resetformat as boolean		  dim currenthalign as integer		  currenthalign = -1 // illegal		  		  onet = new onetitle(style)		  		  lines.append "{QTtext} "		  lines.append "{width:"+ str(style.width)+"}"		  lines.append "{height:"+ str(2 * style.size)+"}"		  'topi = style.ver.value - style.size		  'bottomi = 2 * style.size		  'lines.append "{textBox:" + str(style.ver.value - style.size) + "," + str(style.left.value) + "," + str(2 * style.size) _		  '+ "," + str(style.right.value-style.left.value) + "}"		  lines.append "{font:"+ style.font + "}"		  if style.bold then		    lines.append  "{bold}"		  end		  if style.italic then		    lines.append  "{italic}"		  end		  if style.underline then		    lines.append  "{underline}"		  end		  lines.append "{size:" + str(style.size) + "}"		  		  lines.append "{textColor:" + format(style.textc.red * 257,"0")  _		      + "," + format(style.textc.green * 257,"0")  + "," + format(style.textc.blue * 257,"0") + "}"		  lines.append "{timeStamps:absolute}"		  lines.append "{timeScale:" + str(round(val(style.framerate))) + "}" // how handle dropframe??		  		  		  'lines.append "{anti-alias:on}"		  lines.append "{keyedtext:on}"		  		  if style.shadowalpha > 0 then		    lines.append "{dropShadow:on}"		    lines.append "{dropShadowOffset:" +str(style.shadowx)+"," + str(style.shadowy) +"}"		    lines.append "{dropShadowTransparency:" +format(style.shadowalpha*100,"0") + "}"		  end		  		  cf = titlecount		  		  tc = style.getTimeCode		  		  for i = 1 to cf		    onet = gettitle(i)		    if onet.getinpoint<>"" and onet.getoutpoint<>"" then		      inp = onet.getinpoint		      outp = onet.getoutpoint		      		      // always be absolute		      tc.settext inp		      tc.minus(offset)		      inp = tc.gettext		      inp = left(inp,8) + "."+ right(inp,2)		      tc.settext outp		      tc.minus(offset)		      outp = tc.gettext		      outp = left(outp,8) + "."+ right(outp,2)		      		      resetline = ""		      if onet.style.halign <> currenthalign then		        currenthalign = onet.style.halign		        select case currenthalign		        case style.khalignleft		          lines.append "{justify:left}"		        case style.khaligncenter		          lines.append "{justify:center}"		        case style.khalignright		          lines.append "{justify:right}"		        end		      end		      if onet.style.underline <> style.underline or _		          onet.style.italic <> style.italic or _		          onet.style.bold <> style.bold or _		          onet.style.textc <> style.textc then		        if onet.style.underline then lines.append "{underline}"		        if onet.style.italic then lines.append "{italic}"		        if onet.style.bold then lines.append "{bold}"		        if not (onet.style.underline or  onet.style.italic  or  onet.style.bold ) then		          lines.append "{plain}"		        end 		        if onet.style.textc <> style.textc then		          lines.append "{textcolor:" + format(onet.style.textc.red * 257,"0")  + "," _		              + format(onet.style.textc.green * 257,"0")  + "," + format(onet.style.textc.blue * 257,"0") + "}"		          resetline = "{textcolor:" + format(onet.style.textc.red * 257,"0")  + "," _		              + format(onet.style.textc.green * 257,"0")  + "," + format(onet.style.textc.blue * 257,"0") + "}"		        end		        if style.underline then resetline = resetline + "{underline}"		        if style.italic then resetline = resetline + "{italic}"		        if style.bold then resetline = resetline + "{bold}"		        if not (style.underline or style.italic  or style.bold ) then		          resetline = resetline + "{plain}"		        end 		      end		      if onet.style.italic <> style.italic then		        lines.append "{italic}"		      end		      if onet.style.bold <> style.bold then		        lines.append "{bold}"		      end		      lines.append "[" + inp + "]"		      textlines = split(onet.text,endofline)		      		      for each t in textlines		        // remove style tags		        t = replaceall(t,"<b>","")		        t = replaceall(t,"</b>","")		        t = replaceall(t,"<i>","")		        t = replaceall(t,"</i>","")		        t = replaceall(t,"<u>","")		        t = replaceall(t,"</u>","")		        if not app.reg.online then		          t = "Offline" + mid(t,8)		        end		        lines.append t		      next		      lines.append "[" + outp + "]"		      if resetline<>"" then lines.append resetline		    end		  next		  		  		  		  result = join(lines,endofline)		  result = result.convertEncoding(encodings.macroman)		  return result		  			#tag EndNote	#tag Note, Name = MenuHandler		  dim f as folderItem		  dim t as textoutputStream		  dim i as integer		  dim st as string		  dim s as string		  dim sd as saveasDialog		  dim tc as timecode		  		  sd = new saveasDialog		  sd.Filter = "TEXT"		  sd.ActionButtonCaption = "Export QT"		  sd.suggestedFileName = title + ".txt"		  if document = nil then		    sd.initialDirectory = documentsFolder		  else		    sd.initialDirectory = document.parent		  end		  //f = sd.showmodalwithin(me)		  f = sd.showmodal		  if f<>nil then		    t = f.createtextfile		    if t<>nil then		      offlineWarning		      app.mouseCursor = system.cursors.wait		      tc = style.gettimeCode		      tc.settext movieoffsetField.text		      t.write titlelist.dumpQuicktime(tc)		      t.close 		      app.mouseCursor = system.cursors.standardpointer		    else		      msgbox "Error Main:FileExportQuickTimeText: No TextOutPutStream"		    end		    		  end		  		  //test		  addmovieText f			#tag EndNote	#tag ViewBehavior		#tag ViewProperty			Name="documentname"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="dumpstring"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="moviename"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"			InheritedFrom="TitleExporterBN"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass