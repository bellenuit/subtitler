#tag ClassProtected Class AppInherits Application	#tag Event		Sub Close()		  // save preferences only if there was one before or if there was a registerwindow		  dim msgbx as messageDialog		  dim btt as messageDialogbutton		  dim d as date		  		  		  consolelog "app.close"		  		  d = new date		  if (not app.reg.online and d.totalSeconds - licensenag > 86400 * 5)  then		    licensenag = d.totalSeconds		    msgBx = new messageDialog		    msgBx.Message = "Do not wait for the last moment to buy your Subtitler online license."		    msgBx.explanation = "License processing is manual and may take some time after you buy it."		    msgBx.ActionButton.caption = "Quit"		    msgbx.AlternateActionButton.caption = "Buy at Kagi"		    msgbx.cancelButton.visible = false		    msgbx.AlternateActionButton.visible = true		    btt = msgBx.showModal		    select case btt		    case msgBx.actionButton 		      // continue		    case msgBx.alternateActionButton		      showurl("http://order.kagi.com/?ZSI")		    case msgBx.cancelButton		      // cannot cancel quit here		    end		  end		  		  'if voldat > -1 then		  savepreferences		  'end		  		  consolelog "app.close success"		  		  		exception err as nilobjectException		  msgBox "Serious error in App.Close. Please contact developer"		  		  		End Sub	#tag EndEvent	#tag Event		Sub EnableMenuItems()		  dim m as menuitem		  dim i as integer		  		  appleaboutsubtitler.enabled = true		  filenew.enabled = true		  		  if keyboard.optionkey then		    fileopen.Text = app.getlabel("fileopenany")		    openany = true		  else		    fileopen.Text = app.getlabel("fileopen")		    openany = false		  end		  fileopen.enabled = true		  fileimport.enabled = true		  windowssettings.enabled = true		  windowsmonitor.enabled = true		  		End Sub	#tag EndEvent	#tag Event		Sub NewDocument()		  dim w as main		  dim m as menuItem		  		  		  		  openingfile = nil		  w = new main		  untitledcount = untitledcount + 1		  w.title = app.GetLabel("Untitled")+str(untitledcount)		  if mainleft <0 or mainleft > screen(0).width then		    mainleft = 0		  end		  if maintop <48 or maintop > screen(0).height then		    maintop = 48		  end		  mainwidth = min(screen(0).width-maintop,max(mainwidth,w.minwidth))		  mainheight = min(screen(0).height-mainleft,max(mainheight,w.minheight))		  w.left = mainleft		  w.top = maintop		  w.width = mainwidth		  w.height = mainheight		  w.document = nil		  w.exportformat =exportformat		  w.pagesetup = pagesetup		  'actmain = w		  w.show		  		  if firsttime then 		    about.show		    firsttime = false		  end		  		  		exception err as nilobjectException		  msgBox "Serious error in App.NewDocument. Please contact developer"		  		End Sub	#tag EndEvent	#tag Event		Sub Open()		  dim sd as saveasDialog		  		  		  		  		  // removed dependency MBS FEATURE MISSING		  		  #if kMBSused		    dim author, aut2 as string		    dim n1, n2 as integer		    		    author = " "		    n1 = 0		    aut2 = ""		    n2 = 0		    		    if not registerMBSPlugin(author+aut2, "MBS" + " Complete", n1,n2) then		      MsgBox "MBS Plugin serial not valid?"		    end if		  #endif		  		  consolelog "app.open"		  		  qtok = true		  		  style = new subtitle		  firsttime = true		  		  mainleft=21		  maintop = 48		  mainwidth = 600		  mainheight = 422		  monitortop = screen(0).height/2		  monitorleft = screen(0).width/2		  monitorsize = 0		  findtop = screen(0).height/2-68		  findleft = screen(0).width/2-210		  exportformat = "TIFF-RLE"		  pictextension = ".pct"		  pictcreator = "prvw"		  tiffextension = ".tif"		  tiffcreator = "prvw"		  editortextsize = 12		  previewtextsize = 12		  language = "English"		  splitdistance = 3		  readingspeed = 12		  stltapeoffset = true		  		  		  		  		  openpreferences		  		  openlanguage		  		  about.showtemp		  		  about.show		  		  parsetemplateFolder		  		  		  		  		  		  		  		  consolelog "app.open success"		  		exception err as nilobjectException		  msgBox "Serious error in App.Open. Please contact developer"		  		  		  		End Sub	#tag EndEvent	#tag Event		Sub OpenDocument(item As FolderItem)		  dim w as main		  dim i as integer		  dim sj as Subtitlerjob		  		  openingfile = item		  		  		  if right(item.name,4) = ".job" then		    sj = new SubtitlerJob		    sj.OpenJobFile(item)		    sj.DoJob		    return		  end		  		  		  		  		  w = returnOpenDoc(item) //testing if it is already open		  if w <> nil then		    'actmain = w		    w.show		  else		    'if item.mactype = "STLI" then //removed condition		    w = new main		    w.title = item.name		    w.document = item		    'actmain = w		    w.show		    		    addrecent item		    		  end if		  		  		  		exception err as nilobjectException		  msgBox "Serious error in App.OpenDocument. Please contact developer"		  		  		End Sub	#tag EndEvent	#tag Event		Function UnhandledException(error As RuntimeException) As Boolean		  if error isa OutOfBoundsException then		    if DebugBuild then		      MsgBox "Subtitler OutOfBoundsException in app"		    end		    return true		  end		End Function	#tag EndEvent	#tag MenuHandler		Function AppleAboutSubtitler() As Boolean Handles AppleAboutSubtitler.Action			about.timer1.mode = 0			// moved 1.4 into registerwindow			if not app.reg.online then						end if			about.showmodal			return true								End Function	#tag EndMenuHandler	#tag MenuHandler		Function FileImport() As Boolean Handles FileImport.Action			'dim f as folderitem			'dim old as main			'old = actmain			'f = getopenFolderItem("AnyTEXT")			'if f<> nil then			'newdocument			'actmain.import f			'if old.title = app.getlabel("Untitled")+"1" and not old.haschanged then			'old.close			'end			'end if						titlelistconverterwindow.show			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function FileNew() As Boolean Handles FileNew.Action			newdocument			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function FileOpen() As Boolean Handles FileOpen.Action			dim f as folderitem			dim old as main			dim od as openDialog			old = actmain						// optionkey to open all						od = new openDialog						if openany then			od.Filter = "any"			else			od.filter = "Subtitler"			end						f = od.showmodal						if f<> nil then			opendocument f			if old.title = app.getlabel("Untitled")+"1" and not old.haschanged then			old.close			end			end if			return true					End Function	#tag EndMenuHandler	#tag MenuHandler		Function HelpMail() As Boolean Handles HelpMail.Action			showurl("mailto:matti@belle-nuit.com?subject=Subtitler")			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function HelpOnlineHelp() As Boolean Handles HelpOnlineHelp.Action			showurl("http://www.belle-nuit.com/subtitler")			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function HelpSpottingShortcuts() As Boolean Handles HelpSpottingShortcuts.Action			shortcutsWindow.show			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function RecentDocumentMenu(index as Integer) As Boolean Handles RecentDocumentMenu.Action			opendocument recentfiles(index)			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function TemplateMenuItem(index as Integer) As Boolean Handles TemplateMenuItem.Action			dim w as main						w = new main						openingfile =  templatefiles(index)			'actmain = w						w.show						untitledcount = untitledcount + 1			w.title = app.GetLabel("Untitled")+str(untitledcount)			w.settemplate						return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function ToolsAvidHelper() As Boolean Handles ToolsAvidHelper.Action			avidHelperTool.show			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function ToolsExport() As Boolean Handles ToolsExport.Action			exportwindow.show			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function ToolsPreflight() As Boolean Handles ToolsPreflight.Action			preflightWindow.show			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function ToolsSpotting() As Boolean Handles ToolsSpotting.Action			spottingwindow.show			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function ToolsStyle() As Boolean Handles ToolsStyle.Action			stylewindow.show			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function ToolsTitleListConverter() As Boolean Handles ToolsTitleListConverter.Action			titleListConverterWindow.show			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function WindowsDocument(index as Integer) As Boolean Handles WindowsDocument.Action			app.nthdocwindow(index).show			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function WindowsMonitor() As Boolean Handles WindowsMonitor.Action			monitor.show			monitor.update			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function WindowsSettings() As Boolean Handles WindowsSettings.Action			settingsWindow.show			return true		End Function	#tag EndMenuHandler	#tag Method, Flags = &h0		Sub AddRecent(item as folderitem)		  dim i as integer		  		  for i = 0 to ubound(recentfiles)		    if item = recentfiles(i) then		      recentfiles.remove i		      exit		    end		  next		  		  recentfiles.insert 0, item		  		  if ubound(recentfiles) > 9 then		    redim recentfiles(9)		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub closeall()		  dim i as integer		  for i = 0 to windowcount-1		    if window(i) isa main then		      window(i).close		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub consolelog(s as string)		  'if debugbuild then		  'console.show		  'console.out s		  'end		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function getdocdict(type as string, creationdate as date) As dictionary		  dim docdict as dictionary		  dim d as date		  dim beta, platform as string		  		  docdict = new dictionary		  		  docdict.value("creator") = "SICT"		  docdict.value("type") = type		  docdict.value("version") = 1.4		  if app.nonreleaseversion>0 then beta = "b"+str(app.nonreleaseversion)		  platform = ""		  docdict.value("applicationversion") = app.longVersion +beta + platform		  d = new date		  if creationdate = nil then		    creationdate = d		  end		  docdict.value("creationdate") = creationdate		  docdict.value("modificationdate") = d		  		  return docdict		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getkeyfolderitem() As folderitem		  dim f,folder as folderitem		  		  consolelog "app.getkeyfolderitem"		  		  folder = getsupportfolder		  		  if folder = nil then return nil		  		  f= folder.child("com.belle-nuit.subtitler.keyfile")		  		  if f<>nil then		    consolelog "name: " + f.name		    consolelog "path: " + f.parent.absolutePath		    consolelog "app.getkeyfolderitem success"		  else		    consolelog "app.getkeyfolderitem f=nil"		  end		  		  		  		  return f		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetLabel(key as string) As string		  dim value as string		  		  if languagedict =nil then return ""		  		  if languagedict.getstring(key, value) then return value		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getpreffolderitem() As folderitem		  dim f as folderitem		  consolelog "app.getpreffolderitem"		  dim PreferencesFolder as FolderItem		  		  PreferencesFolder = SpecialFolder.Preferences		  		  		  if preferencesFolder<>nil then		    f= preferencesFolder.child("com.belle-nuit.subtitler.preferences")		  end		  		  if f<>nil then		    consolelog "name: " + f.name		    consolelog "path: " + f.parent.absolutePath		    consolelog "app.getpreffolderitem success"		  else		    consolelog "app.getpreffolderitem f=nil"		  end		  		  return f		  		  		exception err as nilobjectException		  msgBox "Serious error in App.GetPreffolderItem. Please contact developer"		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getsupportfolder() As folderitem		  dim f,folder as folderitem		  dim ApplicationSupportFolder as FolderItem		  dim s as string		  ApplicationSupportFolder = specialfolder.ApplicationData		  		  consolelog "app.getsupportfolder"		  		  folder = ApplicationSupportFolder.child("Belle Nuit Montage")		  		  if folder = nil then 		    consolelog "app.getsupportfolder folder nil"		    return nil		  end		  if not folder.exists then		    folder.createasFolder		  end		  		  // second chance		  if folder=nil or not folder.exists then		    folder = getfolderItem("Belle Nuit Montage")		    if not folder.exists then		      folder.createasFolder		    end		  end		  if not folder.exists or not folder.directory then		    if not folder.exists then		      consolelog "app.getsupportfolder not folder.exists"		    elseif not folder.directory then		      consolelog "app.getsupportfolder not folder.directory"		      s = "Error: Cannot create support folder" + endofline + endofline		      s = s + "There is a file called ""Belle Nuit Montage"" in the folder "+folder.parent.absolutePath		      s = s + endofline + "Please quit Subtitler and remove that file manually."		      msgBox s		    end		    return nil		  end		  		  return folder		  		exception err as nilobjectException		  msgBox "Serious error in App.GetSupportFolder. Please contact developer"		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTemplatesFolder() As folderitem		  dim f,folder, folder0 as folderitem		  dim s as string		  		  consolelog "app.gettemplatesfolder"		  		  folder0 = getsupportfolder		  if folder0 = nil then return nil		  		  folder = folder0.child("Subtitler Templates")		  		  if not folder.exists then		    folder.createasFolder		  end		  if not folder.exists or not folder.directory then		    if not folder.exists then		      consolelog "app.gettemplatesfolder not folder.exists"		    end		    if not folder.directory then		      consolelog "app.gettemplatesfolder not folder.directory"		      s = "Error: Cannot create template folder" + endofline + endofline		      s = s + "There is a file called ""Subtitler Templates"" in the folder "+folder0.absolutePath		      s = s + endofline + "Please quit Subtitler and remove that file manually."		      msgBox s		    end		    return nil		  end		  		  return folder		  		  		exception err as nilobjectException		  msgBox "Serious error in App.GetTemplatesFolder. Please contact developer"		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function nthDocWindow(n as integer) As Main		  dim i,j,u as integer		  if n >= windowcount then		    return nil		  end		  u = windowcount-1		  for i = 0 to u		    if window(i) isa main then		      if j = n then		        return main(window(i))		      else		        j = j+1		      end		    end		  next		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub openkey()		  dim folder,f as folderitem		  dim dict as dictionary		  dim t as textoutputStream		  dim d as date		  dim m as memoryBlock		  dim u as string		  dim db as double		  		  consolelog "app.openkey"		  		  reg = new regclass()		  reg.openKey		  		  consolelog "app.openkey success"		  		  		exception err as nilobjectException		  msgBox "Serious error in App.OpenKey. Please contact developer"		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub openlanguage()		  dim line,tab, key, value, linesep as string		  dim i,count, column as integer		  dim source,s2 as string		  		  consolelog "app.openlanguage"		  		  languagedict = new localizationDictClass		  		  source = "<?xml version=""1.0"" encoding=""UTF-8""?><!DOCTYPE lang>"		  s2 = langxml		  s2 = s2.defineEncoding(encodings.uTF8)		  source = source + s2		  'source = source.defineEncoding(encodings.uTF8)		  		  languagedict.load(source,language)		  		  setlanguage		  		  consolelog "app.openlanguage success"		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub openpreferences()		  dim f,f1,f2,picturef, testfile as folderitem		  dim m as memoryblock		  dim dict, docdict, d as dictionary		  dim test as string		  dim testinteger as integer		  dim testdouble as double		  dim p as picture		  dim c as collection		  dim i as integer		  		  consolelog "app.openpreferences"		  		  openkey		  		  f = getpreffolderitem		  if f=nil then return		  		  if not f.exists then		    consolelog "app.openpreferences f=nil"		    return		  end		  		  		  dict = new dictionary		  if not dict.loadxml(f) then		    consolelog "app.openpreferences xml error"		    return		  end		  		  		  		  call dict.getinteger("mainleft", mainleft)		  if mainleft <0 or mainleft > screen(0).width then		    mainleft = 0		  end		  call dict.getinteger("maintop", maintop)		  if maintop <48 or maintop > screen(0).height then		    maintop = 48		  end		  call dict.getinteger("mainwidth", mainwidth)		  mainwidth = min(screen(0).width,mainwidth)		  call dict.getinteger("mainheight", mainheight)		  mainheight = min(screen(0).height-32,mainheight)		  		  call dict.getinteger("settingsleft", settingsleft)		  call dict.getinteger("settinngstop", settingstop)		  		  call dict.getinteger("monitorleft", monitorleft)		  call dict.getinteger("monitortop", monitortop)		  call dict.getinteger("monitorwidth", monitorwidth)		  call dict.getinteger("monitorheight", monitorheight)		  		  call dict.getinteger("registerleft",registerleft)		  call dict.getinteger("registertop",registertop)		  		  call dict.getinteger("monitorsize",monitorsize)		  if monitorsize > 3 then 		    monitorsize = 0		  end		  		  call dict.getstring("exportformat",exportformat)		  		  call dict.getboolean("showsavetitle", showsavetitle)		  call dict.getstring("showbackgroundpicture", showbackgroundpicture)		  call dict.getstring("picturepath",picturepath)		  		  		  if picturepath <>"" then		    picturef = getfolderitem(picturepath)		    if picturef <> nil and picturef.exists then		      p = picturef.openaspicture		      if p<> nil then		        backgroundpict = p		      end		    end		  end		  		  call dict.getstring("pictextension",pictextension)		  call dict.getstring("pictcreator",pictcreator)		  call dict.getstring("tiffextension", tiffextension)		  call dict.getstring("tiffcreator",tiffcreator)		  call dict.getinteger("editortextsize", editortextsize)		  'call dict.getboolean("parsestyletags", parsestyletags)		  call dict.getinteger("previewtextsize", previewtextsize)		  call dict.getinteger("splitdistance", splitdistance)		  call dict.getinteger("readingspeed", readingspeed)		  call dict.getboolean("stltapeoffset", stltapeoffset)		  		  		  if dict.getdictionary("avidtool",d) then		    aviddict = d		  end		  		  if dict.getdictionary("exporttool",d) then		    exporterdict = d		  end		  		  if dict.getdictionary("importtool",d) then		    importerdict = d		  end		  		  if dict.getdictionary("preflighttool",d) then		    preflightdict = d		  end		  		  		  if dict.getdictionary("spottingtool",d) then		    spottingdict = d		  end		  		  if dict.getdictionary("styletool",d) then		    styledict = d		  end		  		  if dict.getdictionary("dcphelpertool",d) then		    dcphelperdict = d		  end		  		  if dict.getdictionary("style",d) then		    style.restorefromDict d		  end		  		  call dict.getbinary("pagesetup",pagesetup)		  		  if dict.getcollection("recentfiles",c) then		    for i = 1 to c.count 		      if c.item(i).stringValue <> "" then		        test = c.item(i).stringValue		        testfile = getfolderItem(test)		        if testfile <>nil and testfile.exists then		          recentfiles.append testfile		        end		      end		    next		  end		  		  		  call dict.getstring("language",language)		  		  		  call dict.getdouble("licensenag", licensenag)		  		  consolelog "app.openpreferences success"		  		  		exception err as nilobjectException		  msgBox "Serious error in App.OpenPreferences. Please contact developer"		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ParseTemplateFolder()		  dim i as integer		  dim f,folder as folderitem		  		  redim templatefiles(-1)		  		  folder = gettemplatesFolder		  		  if folder = nil then return		  		  for i = 1 to folder.count		    f = folder.item(i)		    if f.exists and f.visible then		      templatefiles.append f		    end		  next		  		  		exception err as nilobjectException		  msgBox "Serious error in App.ParseTemplateFolder. Please contact developer"		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ReturnOpenDoc(f as folderitem) As main		  dim i,j,u as integer		  		  //testing if the document is already in one of the woindows and returns		  // the window if there is		  		  if f = nil then		    return nil		  end		  u = windowcount-1		  for i = 0 to u		    if window(i) isa main then		      if main(window(i)).document <> nil then		        if main(window(i)).document.absolutepath = f.absolutepath then		          return main(window(i))		        end		      end		    end		  next		  return nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub savepreferences()		  dim f as folderitem		  dim dict as dictionary		  dim t as textoutputStream		  dim d as date		  dim i as integer		  dim c as collection		  		  		  		  consolelog "app.savepreferences"		  		  'if app.reg.online and not startonline then // apprarently does not work directly from the register window		  'savekey		  'end		  		  dict = new dictionary		  		  dict.value("document") = getdocdict("PREF", preferencecreationdate)		  		  dict.value("mainleft") = mainleft		  dict.value("maintop") = maintop		  dict.value("mainwidth") = mainwidth		  dict.value("mainheight") = mainheight		  		  dict.value("settingsleft") = settingsleft		  dict.value("settingstop") = settingstop		  		  dict.value("monitorleft") = monitorleft		  dict.value("monitortop") = monitortop		  dict.value("monitorwidth") = monitorwidth		  dict.value("monitorheight") = monitorheight		  		  dict.value("registerleft") = registerleft		  dict.value("registertop") = registertop		  		  dict.value("monitorsize") = monitorsize		  		  		  dict.value("exportformat") = exportformat		  		  		  dict.value("showsavetitle") = showsavetitle		  dict.value("showbackgroundpicture") = showbackgroundpicture		  dict.value("picturepath")= picturepath		  		  dict.value("pictextension") = pictextension		  dict.value("pictcreator") = pictcreator		  dict.value("tiffextension") = tiffextension		  dict.value("tiffcreator") = tiffcreator		  		  dict.value("editortextsize") = editortextsize		  'dict.value("parsestyletags") = parsestyletags		  dict.value("previewtextsize") = previewtextsize		  		  dict.value("splitdistance") = splitdistance		  dict.value("readingspeed") = readingspeed		  		  dict.value("stltapeoffset") = stltapeoffset		  		  dict.value("style") = style.backupToDict		  		  dict.binaryvalue("pagesetup") = pageSetup		  		  c = new collection		  for i = 0 to ubound(recentfiles)		    c.add recentfiles(i).absolutePath		  next		  		  dict.value("recentfiles") = c		  		  if aviddict<>nil then		    dict.value("avidtool") = aviddict		  end		  		  		  if exporterdict<>nil then		    dict.value("exporttool") = exporterdict		  end		  		  if importerdict<>nil then		    dict.value("importtool") = importerdict		  end		  		  if preflightdict<>nil then		    dict.value("preflighttool") = importerdict		  end		  		  if spottingdict<>nil then		    dict.value("spottingtool") = spottingdict		  end		  		  if styledict<>nil then		    dict.value("styletool") = styledict		  end		  		  if dcphelperdict<>nil then		    dict.value("dcphelpertool") = styledict		  end		  		  		  dict.value("language") = language		  		  if not app.reg.online then		    dict.value("licensenag") = licensenag		  end		  		  		  		  		  		  f = getpreffolderitem		  if f = nil then return		  t = f.createtextFile		  if t<>nil then		    t.Write dict.exportXMLString		    t.close		  else		    consolelog "app.savepreferences t=nil"		  end		  		  consolelog "app.savepreferences success"		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub setlanguage()		  dim value as string		  		  if languagedict =nil then return		  		  // set for menu		  if languagedict.getstring("appleaboutsubtitler", value) then appleaboutSubtitler.text = value		  if languagedict.getstring("filefile", value) then filemenu.text = value		  if languagedict.getstring("filenew", value) then filenew.text = value		  if languagedict.getstring("fileopen", value) then fileopen.text = value		  if languagedict.getstring("filerecent", value) then recentfilemenu.text = value		  if languagedict.getstring("fileclose", value) then fileclose.text = value		  if languagedict.getstring("filesave", value) then filesave.text = value		  if languagedict.getstring("filesaveas", value) then filesaveas.text = value		  if languagedict.getstring("fileimport", value) then fileimport.text = value		  if languagedict.getstring("fileexport", value) then fileexport.text = value		  if languagedict.getstring("exportother", value) then fileexportother.text = value		  'if languagedict.getstring("text", value) then exportothertext.text = value		  if languagedict.getstring("filepagesetup", value) then filepagesetup.text = value		  if languagedict.getstring("fileprint", value) then fileprint.text = value		  if languagedict.getstring("editedit", value) then editmenu.text = value		  if languagedict.getstring("editundo", value) then editundo.text = value		  if languagedict.getstring("editredo", value) then editredo.text = value		  if languagedict.getstring("editcut", value) then editcut.text = value		  if languagedict.getstring("editcopy", value) then editcopy.text = value		  if languagedict.getstring("editpaste", value) then editpaste.text = value		  if languagedict.getstring("editclear", value) then editclear.text = value		  if languagedict.getstring("editselectall", value) then editselectall.text = value		  if languagedict.getstring("editselecttitle", value) then editselecttitle.text = value		  if languagedict.getstring("editfind", value) then editfind.text = value		  if languagedict.getstring("editfindagain", value) then editfindagain.text = value		  if languagedict.getstring("editreplace", value) then editreplace.text = value		  if languagedict.getstring("windowwindow", value) then windowmenu.text = value		  if languagedict.getstring("windowmonitor", value) then windowsmonitor.text = value		  if languagedict.getstring("windowpreferences", value) then windowssettings.text = value		  'if languagedict.getstring("windowquarter", value) then monitorscale(0).text = value		  'if languagedict.getstring("windowhalf", value) then monitorscale(1).text = value		  'if languagedict.getstring("windowfullframe", value) then monitorscale(2).text = value		  'if languagedict.getstring("windoworiginal", value) then monitorscale(3).text = value		  //if languagedict.getstring("windowinfo", value) then windowinfo.text = value		  if languagedict.getstring("importmovie", value) then fileImportMovie.text = value		  if languagedict.getstring("removemovie", value) then fileRemoveMovie.text = value		  if languagedict.getstring("helpshortcuts", value) then helpspottingshortcuts.text = value		  if languagedict.getstring("helponlineHelp", value) then helpOnlineHelp.text = value		  if languagedict.getstring("helpmail", value) then helpmail.text = value		  if languagedict.getstring("spotting", value) then spottingmenu.text = value		  if languagedict.getstring("spottingplayforward", value) then spottingplayforward.text = value		  if languagedict.getstring("spottingstop", value) then spottingstop.text = value		  if languagedict.getstring("spottingplaybackward", value) then spottingplaybackward.text = value		  if languagedict.getstring("spottingmarkin", value) then spottingmarkin.text = value		  if languagedict.getstring("spottingmarkout", value) then spottingmarkout.text = value		  if languagedict.getstring("spottingnewtitle", value) then spottingnewtitle.text = value		  if languagedict.getstring("spottingsplittitle", value) then spottingsplittitle.text = value		  if languagedict.getstring("spottingjointitle", value) then spottingjointitle.text = value		  if languagedict.getstring("spottingmarktitle", value) then spottingmarktitle.text = value		  if languagedict.getstring("spottingupdatetimecode", value) then spottingupdatetimecode.text = value		  if languagedict.getstring("spottingsortbytimecode", value) then spottingsortbytimecode.text = value		  'if languagedict.getstring("spottingoffsettimecode", value) then spottingoffsettimecode.text = value		  if languagedict.getstring("filenewfromtemplate", value) then filenewfromtemplate.text = value		  if languagedict.getstring("filesaveastemplate", value) then filesaveastemplate.text = value		  		  if languagedict.getstring("avidtitle", value) then toolsavidHelper.text = value		  if languagedict.getstring("exportother", value) then toolsexport.text = value		  if languagedict.getstring("importtitle", value) then toolsTitleListConverter.text = value		  if languagedict.getstring("preflighttitle", value) then toolspreflight.text = value		  if languagedict.getstring("spottingtitle", value) then toolsspotting.text = value		  if languagedict.getstring("styletitle", value) then toolsStyle.text = value		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub settimer(set as boolean)		  'if set then		  'actmain.timer1.mode = 1		  'actmain.haschanged = true		  'else		  'actmain.timer1.mode = 0		  'end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub writetag(b as binarystream,  tag as integer,type as integer,size as integer, value as integer)		  		  b.writeshort tag		  b.writeshort type		  b.writelong size		  		  if type = 3 and size = 1 then		    b.writeshort value		    b.writeshort 0		  else		    b.writelong value		  end if		  		End Sub	#tag EndMethod	#tag Note, Name = GNU Lesser General Public License		 GNU LESSER GENERAL PUBLIC LICENSE		                       Version 3, 29 June 2007				 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>		 Everyone is permitted to copy and distribute verbatim copies		 of this license document, but changing it is not allowed.						  This version of the GNU Lesser General Public License incorporates		the terms and conditions of version 3 of the GNU General Public		License, supplemented by the additional permissions listed below.				  0. Additional Definitions.				  As used herein, "this License" refers to version 3 of the GNU Lesser		General Public License, and the "GNU GPL" refers to version 3 of the GNU		General Public License.				  "The Library" refers to a covered work governed by this License,		other than an Application or a Combined Work as defined below.				  An "Application" is any work that makes use of an interface provided		by the Library, but which is not otherwise based on the Library.		Defining a subclass of a class defined by the Library is deemed a mode		of using an interface provided by the Library.				  A "Combined Work" is a work produced by combining or linking an		Application with the Library.  The particular version of the Library		with which the Combined Work was made is also called the "Linked		Version".				  The "Minimal Corresponding Source" for a Combined Work means the		Corresponding Source for the Combined Work, excluding any source code		for portions of the Combined Work that, considered in isolation, are		based on the Application, and not on the Linked Version.				  The "Corresponding Application Code" for a Combined Work means the		object code and/or source code for the Application, including any data		and utility programs needed for reproducing the Combined Work from the		Application, but excluding the System Libraries of the Combined Work.				  1. Exception to Section 3 of the GNU GPL.				  You may convey a covered work under sections 3 and 4 of this License		without being bound by section 3 of the GNU GPL.				  2. Conveying Modified Versions.				  If you modify a copy of the Library, and, in your modifications, a		facility refers to a function or data to be supplied by an Application		that uses the facility (other than as an argument passed when the		facility is invoked), then you may convey a copy of the modified		version:				   a) under this License, provided that you make a good faith effort to		   ensure that, in the event an Application does not supply the		   function or data, the facility still operates, and performs		   whatever part of its purpose remains meaningful, or				   b) under the GNU GPL, with none of the additional permissions of		   this License applicable to that copy.				  3. Object Code Incorporating Material from Library Header Files.				  The object code form of an Application may incorporate material from		a header file that is part of the Library.  You may convey such object		code under terms of your choice, provided that, if the incorporated		material is not limited to numerical parameters, data structure		layouts and accessors, or small macros, inline functions and templates		(ten or fewer lines in length), you do both of the following:				   a) Give prominent notice with each copy of the object code that the		   Library is used in it and that the Library and its use are		   covered by this License.				   b) Accompany the object code with a copy of the GNU GPL and this license		   document.				  4. Combined Works.				  You may convey a Combined Work under terms of your choice that,		taken together, effectively do not restrict modification of the		portions of the Library contained in the Combined Work and reverse		engineering for debugging such modifications, if you also do each of		the following:				   a) Give prominent notice with each copy of the Combined Work that		   the Library is used in it and that the Library and its use are		   covered by this License.				   b) Accompany the Combined Work with a copy of the GNU GPL and this license		   document.				   c) For a Combined Work that displays copyright notices during		   execution, include the copyright notice for the Library among		   these notices, as well as a reference directing the user to the		   copies of the GNU GPL and this license document.				   d) Do one of the following:				       0) Convey the Minimal Corresponding Source under the terms of this		       License, and the Corresponding Application Code in a form		       suitable for, and under terms that permit, the user to		       recombine or relink the Application with a modified version of		       the Linked Version to produce a modified Combined Work, in the		       manner specified by section 6 of the GNU GPL for conveying		       Corresponding Source.				       1) Use a suitable shared library mechanism for linking with the		       Library.  A suitable mechanism is one that (a) uses at run time		       a copy of the Library already present on the user's computer		       system, and (b) will operate properly with a modified version		       of the Library that is interface-compatible with the Linked		       Version.				   e) Provide Installation Information, but only if you would otherwise		   be required to provide such information under section 6 of the		   GNU GPL, and only to the extent that such information is		   necessary to install and execute a modified version of the		   Combined Work produced by recombining or relinking the		   Application with a modified version of the Linked Version. (If		   you use option 4d0, the Installation Information must accompany		   the Minimal Corresponding Source and Corresponding Application		   Code. If you use option 4d1, you must provide the Installation		   Information in the manner specified by section 6 of the GNU GPL		   for conveying Corresponding Source.)				  5. Combined Libraries.				  You may place library facilities that are a work based on the		Library side by side in a single library together with other library		facilities that are not Applications and are not covered by this		License, and convey such a combined library under terms of your		choice, if you do both of the following:				   a) Accompany the combined library with a copy of the same work based		   on the Library, uncombined with any other library facilities,		   conveyed under the terms of this License.				   b) Give prominent notice with the combined library that part of it		   is a work based on the Library, and explaining where to find the		   accompanying uncombined form of the same work.				  6. Revised Versions of the GNU Lesser General Public License.				  The Free Software Foundation may publish revised and/or new versions		of the GNU Lesser General Public License from time to time. Such new		versions will be similar in spirit to the present version, but may		differ in detail to address new problems or concerns.				  Each version is given a distinguishing version number. If the		Library as you received it specifies that a certain numbered version		of the GNU Lesser General Public License "or any later version"		applies to it, you have the option of following the terms and		conditions either of that published version or of any later version		published by the Free Software Foundation. If the Library as you		received it does not specify a version number of the GNU Lesser		General Public License, you may choose any version of the GNU Lesser		General Public License ever published by the Free Software Foundation.				  If the Library as you received it specifies that a proxy can decide		whether future versions of the GNU Lesser General Public License shall		apply, that proxy's public statement of acceptance of any version is		permanent authorization for you to choose that version for the		Library.			#tag EndNote	#tag Property, Flags = &h0		aboutmenu As boolean	#tag EndProperty	#tag Property, Flags = &h0		aboutopen As boolean	#tag EndProperty	#tag Property, Flags = &h0		actmain As main	#tag EndProperty	#tag Property, Flags = &h0		alpha As picture	#tag EndProperty	#tag Property, Flags = &h0		aviddict As dictionary	#tag EndProperty	#tag Property, Flags = &h0		backgroundpict As picture	#tag EndProperty	#tag Property, Flags = &h0		big As picture	#tag EndProperty	#tag Property, Flags = &h0		capitalcheck As boolean	#tag EndProperty	#tag Property, Flags = &h0		consoletext As string	#tag EndProperty	#tag Property, Flags = &h0		dcphelperdict As Dictionary	#tag EndProperty	#tag Property, Flags = &h0		editortextsize As integer	#tag EndProperty	#tag Property, Flags = &h0		exporterdict As dictionary	#tag EndProperty	#tag Property, Flags = &h0		exportformat As string	#tag EndProperty	#tag Property, Flags = &h0		findleft As integer	#tag EndProperty	#tag Property, Flags = &h0		findtext As string	#tag EndProperty	#tag Property, Flags = &h0		findtop As integer	#tag EndProperty	#tag Property, Flags = &h0		findwhere As integer	#tag EndProperty	#tag Property, Flags = &h0		firsttime As boolean	#tag EndProperty	#tag Property, Flags = &h0		frame As picture	#tag EndProperty	#tag Property, Flags = &h0		importerdict As dictionary	#tag EndProperty	#tag Property, Flags = &h0		keycreationdate As date	#tag EndProperty	#tag Property, Flags = &h0		language As string	#tag EndProperty	#tag Property, Flags = &h0		languagedict As localizationdictclass	#tag EndProperty	#tag Property, Flags = &h1		Protected licensenag As double	#tag EndProperty	#tag Property, Flags = &h0		MainHeight As integer	#tag EndProperty	#tag Property, Flags = &h0		MainLeft As integer	#tag EndProperty	#tag Property, Flags = &h0		MainTop As integer	#tag EndProperty	#tag Property, Flags = &h0		MainWidth As integer	#tag EndProperty	#tag Property, Flags = &h0		monitorheight As integer	#tag EndProperty	#tag Property, Flags = &h0		MonitorLeft As integer	#tag EndProperty	#tag Property, Flags = &h0		monitorsize As integer	#tag EndProperty	#tag Property, Flags = &h0		MonitorTop As integer	#tag EndProperty	#tag Property, Flags = &h0		monitorwidth As integer	#tag EndProperty	#tag Property, Flags = &h0		openany As boolean	#tag EndProperty	#tag Property, Flags = &h0		openingfile As folderitem	#tag EndProperty	#tag Property, Flags = &h0		PageSetup As string	#tag EndProperty	#tag Property, Flags = &h0		parsestyletags As boolean	#tag EndProperty	#tag Property, Flags = &h0		pictcreator As string	#tag EndProperty	#tag Property, Flags = &h0		pictextension As string	#tag EndProperty	#tag Property, Flags = &h0		picturepath As string	#tag EndProperty	#tag Property, Flags = &h1		Protected preferencecreationdate As date	#tag EndProperty	#tag Property, Flags = &h0		preflightdict As dictionary	#tag EndProperty	#tag Property, Flags = &h0		previewtextsize As integer	#tag EndProperty	#tag Property, Flags = &h0		qtok As boolean	#tag EndProperty	#tag Property, Flags = &h0		readingspeed As integer	#tag EndProperty	#tag Property, Flags = &h0		recentfiles(-1) As folderitem	#tag EndProperty	#tag Property, Flags = &h0		reg As regclass	#tag EndProperty	#tag Property, Flags = &h0		registerleft As integer	#tag EndProperty	#tag Property, Flags = &h0		registertop As integer	#tag EndProperty	#tag Property, Flags = &h0		replacetext As string	#tag EndProperty	#tag Property, Flags = &h0		Settingsleft As integer	#tag EndProperty	#tag Property, Flags = &h0		SettingsTop As integer	#tag EndProperty	#tag Property, Flags = &h0		showbackgroundpicture As string	#tag EndProperty	#tag Property, Flags = &h0		showsavetitle As boolean	#tag EndProperty	#tag Property, Flags = &h0		splitdistance As integer	#tag EndProperty	#tag Property, Flags = &h0		spottingdict As dictionary	#tag EndProperty	#tag Property, Flags = &h21		Private startonline As boolean	#tag EndProperty	#tag Property, Flags = &h0		stltapeoffset As boolean	#tag EndProperty	#tag Property, Flags = &h0		style As subtitle	#tag EndProperty	#tag Property, Flags = &h0		styledict As dictionary	#tag EndProperty	#tag Property, Flags = &h0		templatefiles(-1) As folderitem	#tag EndProperty	#tag Property, Flags = &h0		tiffcreator As string	#tag EndProperty	#tag Property, Flags = &h0		tiffextension As string	#tag EndProperty	#tag Property, Flags = &h0		untitledcount As integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="aboutmenu"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="aboutopen"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="alpha"			Group="Behavior"			InitialValue="0"			Type="picture"		#tag EndViewProperty		#tag ViewProperty			Name="backgroundpict"			Group="Behavior"			InitialValue="0"			Type="picture"		#tag EndViewProperty		#tag ViewProperty			Name="big"			Group="Behavior"			InitialValue="0"			Type="picture"		#tag EndViewProperty		#tag ViewProperty			Name="capitalcheck"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="consoletext"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="editortextsize"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="exportformat"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="findleft"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="findtext"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="findtop"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="findwhere"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="firsttime"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="frame"			Group="Behavior"			InitialValue="0"			Type="picture"		#tag EndViewProperty		#tag ViewProperty			Name="language"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="MainHeight"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="MainLeft"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="MainTop"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="MainWidth"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="monitorheight"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="MonitorLeft"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="monitorsize"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="MonitorTop"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="monitorwidth"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="openany"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="PageSetup"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="parsestyletags"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="pictcreator"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="pictextension"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="picturepath"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="previewtextsize"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="qtok"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="readingspeed"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="registerleft"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="registertop"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="replacetext"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Settingsleft"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="SettingsTop"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="showbackgroundpicture"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="showsavetitle"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="splitdistance"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="stltapeoffset"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="tiffcreator"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="tiffextension"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="untitledcount"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass