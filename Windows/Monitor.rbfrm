#tag WindowBegin Window Monitor   BackColor       =   0   Backdrop        =   0   BalloonHelp     =   ""   CloseButton     =   True   Composite       =   False   Frame           =   0   FullScreen      =   False   HasBackColor    =   False   Height          =   600   ImplicitInstance=   True   LiveResize      =   False   MacProcID       =   0   MaxHeight       =   32000   MaximizeButton  =   False   MaxWidth        =   32000   MenuBar         =   0   MenuBarVisible  =   True   MinHeight       =   120   MinimizeButton  =   True   MinWidth        =   160   Placement       =   1   Resizeable      =   False   Title           =   "Monitor"   Visible         =   True   Width           =   720   Begin EventReceiver EventReceiver1      Height          =   32      Index           =   -2147483648      InitialParent   =   ""      Left            =   126      LockedInPosition=   False      Scope           =   0      TabIndex        =   0      TabPanelIndex   =   0      TabStop         =   True      Top             =   445      Width           =   32   End   Begin Canvas2 test      AcceptFocus     =   False      AcceptTabs      =   False      activating      =   0      AutoDeactivate  =   True      Backdrop        =   0      bg              =   0      buffer          =   0      DoubleBuffer    =   False      dvdbuffer       =   0      Enabled         =   True      EraseBackground =   True      extbuffer       =   0      extbufferalpha  =   0      Height          =   576      HelpTag         =   ""      Index           =   -2147483648      InitialParent   =   ""      Left            =   0      LockBottom      =   False      LockedInPosition=   False      LockLeft        =   False      LockRight       =   False      LockTop         =   False      savetitle       =   0      Scope           =   0      showbackgroundpicture=   0      TabIndex        =   1      TabPanelIndex   =   0      TabStop         =   True      Top             =   0      UseFocusRing    =   True      Visible         =   True      Width           =   960      Begin ProgressWheel ChasingArrows1         AutoDeactivate  =   True         Enabled         =   True         Height          =   16         HelpTag         =   ""         Index           =   -2147483648         InitialParent   =   "test"         Left            =   9         LockBottom      =   False         LockedInPosition=   False         LockLeft        =   False         LockRight       =   False         LockTop         =   False         Scope           =   0         TabIndex        =   0         TabPanelIndex   =   0         TabStop         =   True         Top             =   9         Visible         =   True         Width           =   16      End      Begin Thread UpdateThread         Height          =   32         Index           =   -2147483648         InitialParent   =   "test"         Left            =   282         LockedInPosition=   False         Priority        =   5         Scope           =   0         StackSize       =   0         TabIndex        =   1         TabPanelIndex   =   0         TabStop         =   True         Top             =   477         Width           =   32      End   End   Begin Timer UpdateTimer      Height          =   32      Index           =   -2147483648      Left            =   330      LockedInPosition=   False      Mode            =   2      Period          =   1000      Scope           =   0      TabIndex        =   2      TabPanelIndex   =   0      TabStop         =   True      Top             =   233      Width           =   32   EndEnd#tag EndWindow#tag WindowCode	#tag Event		Sub Activate()		  		  		  if not opening then		    if test<>nil then test.activating = true		    update		    if test<>nil then test.activating = false		    'test.drawinto frame,alpha		  end		  		  		End Sub	#tag EndEvent	#tag Event		Function CancelClose(appQuitting as Boolean) As Boolean		  if opening or test.activating then		    beep		    return true		  end		End Function	#tag EndEvent	#tag Event		Sub Close()		  app.monitortop = top		  app.monitorleft = left		  app.monitorwidth = width		  app.monitorheight = height		  app.monitorsize = psize		  if height > screen(0).height then		    app.monitorheight = 100		  end		End Sub	#tag EndEvent	#tag Event		Sub EnableMenuItems()		  fileclose.enabled = true		End Sub	#tag EndEvent	#tag Event		Function KeyDown(Key As String) As Boolean		  select case asc(key)		  case 3 'enter		    update		  case 13' return		    update		  end select 		End Function	#tag EndEvent	#tag Event		Sub Open()		  opening = true		  		  setlanguage		  height = 100		  if app.monitorheight > 0 then		    top = app.monitortop		    left = app.monitorleft		    height = app.monitorheight		    size(app.monitorsize)		  else		    size(0)		  end if		  		  'refresh		  if test<>nil then test.activating = true		  update		  if test<>nil then test.activating = false		  		  opening = false		End Sub	#tag EndEvent	#tag MenuHandler		Function FileCLose() As Boolean Handles FileCLose.Action			me.close		End Function	#tag EndMenuHandler	#tag Method, Flags = &h0		Sub init()		  // rewritten π3 using masks    // <-- CONVERTED		  		  frame2 = nil		  alpha=nil		  		  frame2 = newpicture(style.width,style.height,32)		  if frame2 = nil then		    msgbox StErrorMemoryMonitor+ " (frame2)"		    app.closeall		    quit		  end if		  alpha = newpicture(style.width,style.height,32)		  if frame2 = nil then		    msgbox StErrorMemoryMonitor+ " (alpha)"		    app.closeall		    quit		  end if		  dvdframe = newpicture(style.width,style.height,32)		  if dvdframe = nil then		    msgbox StErrorMemoryMonitor+ " (dvdframe)"		    app.closeall		    quit		  end if		  		  ststring = style.standard		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub setlanguage()		  dim value as string		  dim languagedict as dictionary		  languagedict = app.languagedict		  if languagedict =nil then return		  		  if languagedict.getstring("monitor", value) then self.title = value		  if languagedict.getstring("monitororiginal", value) then monitororiginal= value		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub size(s as integer)		  dim w,h as integer		  dim chb as boolean		  style = app.actmain.style		  select case s		  case 0		    w = style.widthreal/4		    h = style.height/4		  case 1		    w = style.widthreal/2		    h = style.height/2		  case 2		    w = style.widthreal		    h = style.height		  case 3		    w = style.width		    h = style.height		  else		    msgbox str(s)		  end 		  'chb = chasingArrows1.visible		  'chasingArrows1.visible = false		  width = w		  height = h		  'chasingArrows1.visible = chb		  Psize = s		  test.canvas2(w,h)		  'test.drawinto frame,alpha		  updatenow		  'update		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub update()		  dim f,s as string		  if app.actmain<>nil then		    if app.actmain.titlelist<>nil  and app.actmain.preview<>nil then		      app.actmain.titlelist.preview		      'style = app.actmain.acttitle.style		      style = app.actmain.titlelist.acttitle.style		      f = app.actmain.preview.firstline		      s = app.actmain.preview.secondline		      update(f+endofline+s)		    end		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub update(s as string)		  dim newstyle as string		  dim m as MemoryBlock		  		  if userCancelled then		    return		  end		  		  // do not update if the sames a before		  		  m = style.backup		  newstyle = m.StringValue(0,m.size) + s		  if StrComp(newstyle,laststyle,0) = 0 then		    return		  else		    laststyle = newstyle		  end		  		  		  		  		  if app.actmain<>nil then		    select case app.showbackgroundpicture		    case "black"		      test.showbackgroundpicture = false		    case "pict"		      test.showbackgroundpicture = true		      test.bg = app.backgroundpict		    case "movie"		      test.showbackgroundpicture = true		      if app.actmain<>nil then		        test.bg = app.actmain.moviePlayer1.getcurrentPicture		      end		    end		    		    		    		    //added in 1.1π14 to adapt when style.standard has changed between documents    // <-- CONVERTED		    if style.standard <> app.actmain.style.standard then		      size(psize)		    end		    		    'style = app.actmain.acttitle.style 		    style = app.actmain.titlelist.acttitle.style		    if style.standard <> ststring then		      init		    end		    		    if frame2 <> nil and alpha <> nil then		      'test.drawblack		      if chasingarrows1 <> nil then chasingArrows1.visible = true		      if chasingarrows1 <> nil then chasingArrows1.refresh		      		      updatenow		      		      // here add code to detect DVD		      		      if app.actmain<>nil then		        select case app.actmain.exportformat		        case "TIFF-DVD", "BMP-DVD"		          if dvdframe = nil then init		          style.renderDVDpreview(s,frame2,alpha,dvdframe,eventreceiver1)		          		        else		          dvdframe = nil		          style.render(s,frame2,alpha,eventreceiver1)		        end		      end		      		      if chasingarrows1 <> nil then chasingArrows1.visible = false		      		      if test <> nil then  		        test.drawinto frame2,alpha		        test.dvdbuffer = dvdframe		      end		      		      		    else		      msgbox "error monitor.update: frame or alpha nil"		    end if		    'show		  end		  		exception err as nilObjectException		  // ignore 		  		End Sub	#tag EndMethod	#tag Property, Flags = &h0		alpha As picture	#tag EndProperty	#tag Property, Flags = &h1		Protected dvdframe As picture	#tag EndProperty	#tag Property, Flags = &h0		frame2 As picture	#tag EndProperty	#tag Property, Flags = &h0		laststyle As string	#tag EndProperty	#tag Property, Flags = &h21		Private monitororiginal As string	#tag EndProperty	#tag Property, Flags = &h0		oldheight As integer	#tag EndProperty	#tag Property, Flags = &h0		opening As boolean	#tag EndProperty	#tag Property, Flags = &h0		PSize As integer	#tag EndProperty	#tag Property, Flags = &h0		ststring As string	#tag EndProperty	#tag Property, Flags = &h0		style As subtitle	#tag EndProperty	#tag Property, Flags = &h0		updating As boolean	#tag EndProperty#tag EndWindowCode#tag Events EventReceiver1	#tag Event		Sub DoEventsEvent()		  if not opening then		    self.updateNow		  end		End Sub	#tag EndEvent#tag EndEvents#tag Events test	#tag Event		Sub Open()		  style =app.style		  me.canvas2		  if style = nil then		    msgbox StErrorMonitorNoStyle		  end		  me.savetitle =app.showsavetitle		  		  		  		  		End Sub	#tag EndEvent#tag EndEvents#tag Events UpdateTimer	#tag Event		Sub Action()		  if not opening then		    if test<>nil then test.activating = true		    update		    if test<>nil then test.activating = false		    'test.drawinto frame,alpha		  end		  		End Sub	#tag EndEvent#tag EndEvents