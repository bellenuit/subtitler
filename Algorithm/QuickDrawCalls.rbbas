#tag ModuleProtected Module QuickDrawCalls	#tag Method, Flags = &h0		Sub DrawPictureHQ(extends g as graphics, p as picture, targetx as integer, targety as integer)		  g.drawpicture p,targetx,targety		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DrawPictureHQ(extends g as graphics, p as picture, targetx as integer, targety as integer, targetwidth as integer, targetheight as integer)		  g.DrawPictureHQ p,targetx,targety,targetwidth,targetheight,0,0,p.width,p.height		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DrawPictureHQ(extends g as graphics, p as picture, targetx as integer, targety as integer, targetwidth as integer, targetheight as integer, sourcex as integer, sourcey as integer)		  g.DrawPictureHQ p,targetx,targety,targetwidth,targetheight,sourcex,sourcey,p.width,p.height		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DrawPictureHQ(extends g as graphics, p as picture, targetx as integer, targety as integer, targetwidth as integer, targetheight as integer, sourcex as integer, sourcey as integer, sourcewidth as integer, sourceheight as integer)		  #if targetmacos then		    g.drawpicture p,targetx,targety,targetwidth,targetheight,sourcex,sourcey,sourcewidth,sourceheight		  #else		    dim pclip, mclip, p2 as picture		    dim psize, msize as picture		    		    app.consolelog "graphics.DrawPictureHQ"		    		    // removed dependency was probably faster		    //p2 = p.cloneMBS		    p2 = new picture(p.Width,p.Height,32)		    p2.Graphics.DrawPicture p		    //end		    		    pclip = newpicture(sourcewidth,sourceheight,32)		    mclip = newpicture(sourcewidth,sourceheight,32)		    mclip.graphics.drawpicture p2.mask,-sourcex,-sourcey		    		    // clear mask		    p2.mask.graphics.foreColor = &c000000		    p2.mask.graphics.fillrect 0,0,p2.width,p2.height		    pclip.graphics.drawpicture p2,-sourcex,-sourcey		    		    p2 = nil		    		    // resize both picture and mask to new dimensions		    'psize = BilinearScale(pclip,targetwidth,targetheight,nil)		    'msize = BilinearScale(mclip,targetwidth,targetheight,nil)		    psize = ScaleQT(pclip,targetwidth,targetheight)		    msize = ScaleQT(mclip,targetwidth,targetheight)		    		    if psize = nil or msize = nil then		      msgbox "Error graphics.DrawPictureHQ: Quicktime not installed"		    end		    		    pclip = nil		    mclip = nil		    		    // draw with mask		    psize.mask.graphics.drawpicture msize,0,0		    		    g.drawpicture psize,targetx,targety		    		    app.consolelog "graphics.DrawPictureHQ end"		    		  #endif		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DrawStringWithSpace(extends g as graphics, s as string, x as integer, y as integer, space as double, encodingstring as string)		  dim t as string		  dim oldrend as boolean		  		  call g.drawtaggedStringWithSpace(s,x,y,space,true,encodingstring)		  return		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function DrawTaggedStringWithSpace(extends g as graphics, s as string, x as integer, y as integer, space as double, print as boolean, encodingstring as string) As integer		  dim t, runs(-1), run, history,ch as string		  dim x2,y2, sw, oldpenheight, ph, h,i as integer		  dim oldrend, oldbold, olditalic, oldunderline, myunderline as boolean		  		  oldbold = g.bold		  olditalic = g.italic		  oldunderline = g.underline		  oldrend = g.useOldRenderer		  oldpenheight = g.penheight		  		  g.underline = false		  myunderline = oldunderline		  ph =  max(g.textsize/12,1)		  		  g.penheight=ph		  		  x2 = x		  		  t = s		  if encodingstring.isroman(g) then		    //t = t.ConvertEncoding(g.textFont.Encoding)		    t = t.ConvertEncoding(encodings.macroman)		  else		    g.useOldRenderer = false		  end		  		  // use the encoding string to find tokens for graphic state		  h = instr(encodingstring,s)		  history = left(encodingstring,h-1)		  runs = tokenizeTaggedString(history)		  for each run in runs		    select case run		    case "<b>"		      g.bold = true		    case "</b>"		      g.bold = false		    case "<i>"		      g.italic = true		    case "</i>"		      g.italic = false		    case "<u>"		      myunderline = true		    case "</u>"		      myunderline = false		    else		      // ignore text		    end		  next		  		  		  runs = tokenizeTaggedString(t)		  		  for each run in runs		    select case run		    case "<b>"		      g.bold = true		    case "</b>"		      g.bold = false		    case "<i>"		      g.italic = true		    case "</i>"		      g.italic = false		    case "<u>"		      myunderline = true		    case "</u>"		      myunderline = false		    else		      // new rendering without quickdraw 1.7.5b5		      		      if space = 0 then		        		        if print then g.drawstring run,x2,y		        sw = g.stringwidth(run)		      else		        sw = 0		        for i = 1 to len(run)		          ch = mid(run,i,1)		          if ch<>"" then		            if print then g.drawstring ch,x2+sw+(i-1)*space,y		            sw = sw + g.stringwidth(ch)		          end		        next		        sw = sw + space * (len(run)-1)  // for rounding it is better to add at the end		      end		      if print and myunderline and sw>0 then		        g.drawline x2, y + 2*ph, x2+sw, y + 2*ph		      end		      x2 = x2 + sw		      		    end		  next		  		  g.bold = oldbold		  g.italic = olditalic		  g.underline = oldunderline		  g.useOldRenderer = oldrend		  g.penheight = oldpenheight		  		  return x2		  		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function IsRoman(extends s as string, g as graphics = nil) As boolean		  dim test as string		  dim te as textencoding		  		  test = s.ConvertEncoding(encodings.macroman)		  		  if (test = s) then		    		    if g<>nil then		      		      'if left(g.textfont,3) = "DIN" then return false		      		      		      		      te = getfontTextEncoding(g.textfont) 		      return te = encodings.macroman		      'return te.base = 0		    else		      return true		    end		    		  end		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ScaleQT(p as picture, w as integer, h as integer) As picture		  		  dim result as picture		  		  result = newpicture(p.width,p.height,32)		  result.graphics.drawpicture p,0,0,result.width,result.height,0,0,p.width,p.height		  		  // removed dependency was probably faster and better scaling		  //dim s, d as gworldMBS		  //s=new GWorldMBS		  //d=new GWorldMBS		  'if d.NewGWorld(w,h,32) then		  'if s.NewGWorldFromPicture(p) then		  's.Scale d,1024		  'result=d.CopyPicture		  'end if		  'end if		  		  		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function StringWidthWithSpace(extends g as graphics, s as string, space as double, encodingstring as string) As integer		  dim t as string		  dim oldrend as boolean		  dim v as integer		  		  		  if true then 		    return g.drawtaggedStringWithSpace(s,0,0,space,false,encodingstring)		  end		  		  if encodingstring.isroman(g) then		    t = s.ConvertEncoding(encodings.macroman)		    return g.stringwidth(t) + len(s)*space		  else		    oldrend = g.useOldRenderer		    g.useOldRenderer = false		    v = g.stringwidth(s)		    g.useOldRenderer = oldrend		    return v		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function TokenizeTaggedString(s as string) As string()		  dim result as string		  dim tags(-1), tag as string		  		  tags = array("<b>","</b>","<i>","</i>","<u>","</u>")		  		  // add unlikely separator <#>		  		  result = s		  for each tag in tags		    result = replaceall(result, tag, "<#>"+tag+"<#>")		  next		  		  return split(result,"<#>")		  		  		  		  		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule