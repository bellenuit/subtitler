#tag ClassProtected Class TimeCode	#tag Method, Flags = &h0		Function About() As string		  return "TimeCode class © Matthias Bürcher 2002 http://www.belle-nuit.com"    // <-- CONVERTED		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ClearError()		  errorP = false		  errormessageP = ""		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Clone() As TimeCode		  dim result as TimeCode		  result = new Timecode		  result.errormessageP = errormessageP		  result.errorP = errorP		  result.fpsP = fpsP		  result.gaugeP = gaugeP		  result.prefixP =prefixP		  result.dropframeP = dropframeP		  result.speedP = speedP		  result.valueP = valueP		  result.h24 = h24		  result.pulldownp = pulldownp		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  ClearError		  fpsP = 25.0		  speedP = 25.0		  dropframeP = false		  gaugeP = 35		  prefixP = ""		  valueP = 0		  h24 = 25*60*60*24		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(fps as double)		  Constructor		  SetFps(fps)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(fps as double, speed as double, drop as boolean)		  Constructor		  SetFps(fps,speed,drop,false)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Div(factor as double)		  if factor=0 then		    SetError "Error division by zero"		    return 		  end		  setframes getframes \ factor		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function DropIt(frames as integer) As integer		  dim minutes, tenminutes, remainder, dropbit as integer		  		  if getfps = 30 then		    		    tenminutes = frames \ 18000		    minutes = (frames - tenminutes*18000) \ 1800		    remainder = frames - tenminutes*18000 - minutes*1800		    		    if (frames Mod 1800) = 0 and (frames mod 18000) > 0 then		      dropbit = 1		    else		      dropbit= 0		    end if		    return tenminutes*17982 + minutes*1798 + remainder + dropbit		    		  elseif getfps = 60 then		    		    		    tenminutes = frames \ 36000		    minutes = (frames - tenminutes*36000) \ 3600		    remainder = frames - tenminutes*36000 - minutes*3600		    		    if (frames Mod 3600) = 0 and (frames mod 36000) > 0 then		      dropbit = 1		    else		      dropbit= 0		    end if		    return tenminutes*35964 + minutes*3596 + remainder + dropbit		    		    		    		    		    		    		    		  end		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Error() As boolean		  return errorP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Errormessage() As string		  return errormessageP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetDropFrame() As boolean		  return dropframeP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetEditRate() As string		  'if speedp = 24000/1001.0 then return "24000 1001"		  'if speedp = 30000/1001.0 then return "30000 1001"		  		  if pulldownp then		    return format(round(speedp)*1000,"0")+" 1001"		  end		  		  return format(speedp,"0")+" 1"		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetFeet() As double		  dim g as integer		  select case gaugeP		  case 16		    g = 40		  case 35		    g = 16		  end		  return  valueP \ g + (valueP mod g) / 100.0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetFps() As double		  return fpsP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetFrames() As integer		  return valueP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetFramesOnly() As integer		  dim tc as integer		  tc = gettc		  return tc mod 100		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetGauge() As integer		  return gaugeP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetKey() As string		  dim g as integer		  dim fr as integer		  select case gaugeP		  case 16		    g = 20		  case 35		    g = 16		  end		  if valueP < 0 then		    seterror "Invalid Frames. Frames must be positive."		    return ""		  end		  fr = valueP \ g		  if fr > 9999 then		    seterror "Invalid Frames. Overflow"		    return ""		  end		  return prefixp + right(format(fr,"0000"),4) + "+" + format(valueP mod g,"00")		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetMeter() As double		  dim g as integer		  select case gaugeP		  case 16		    g = 40 / 0.3048		  case 35		    g = 16 / 0.3048		  end		  return getframes / g		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetSpeed() As double		  return speedp		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTC() As integer		  dim f,s,m,h as integer		  		  GetTC(h,m,s,f)		  		  return  f + 100*s + 10000 * m + 1000000 * h		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub GetTC(byref h as integer, byref m as integer, byref s as integer, byref f as integer)		  		  dim frames as integer		  		  frames = valueP		  if dropFrameP then		    frames = undropit(frames)		  end		  		  f = frames mod fpsP		  s = (frames \ fpsP) mod 60		  m = (frames \ (60*fpsP)) mod 60		  h = (frames \ (3600*fpsP)) mod 24		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GetText() As string		  dim tc as integer		  tc = gettc		  if dropframep then		    return format(tc\100,"00\:00\:00")+";"+format(tc mod 100,"00")		  else		    return format(tc\100,"00\:00\:00")+":"+format(tc mod 100,"00")		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTextDLP() As string		  // returns in ticks. 1 tick is 4 msec		  		  dim tc as integer		  tc = gettc		  return format(tc\100,"00\:00\:00")+":"+format(250*(tc mod 100)/speedp,"000")		  		  // fix 1.7.7b12 was 400 before why?		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTextQT() As string		  dim tc as integer		  tc = gettc		  return format(tc\100,"00\:00\:00")+"."+format(100*(tc mod 100)/speedp,"00")		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTextSeconds() As string		  dim tc as integer		  tc = gettc		  return format(tc\100,"00\:00\:00")		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTime() As date		  dim d as date		  d = new date		  if d<>nil then		    d.totalseconds = GetTotalSeconds		  else		    SetError "Date nil (GetTime)"		  end		  return d		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTotalSeconds() As double		  return valueP/speedP		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsTC(tc as integer) As boolean		  dim test as boolean		  test = TC>0 		  test = test and (TC<24000000)		  test = test and (TC mod 1000000 < 600000)		  test = test and (TC mod 10000 < 6000)		  test = test and (TC mod 100 < fpsP)		  if dropframeP then		    return (test and ((TC mod 10000 > 1) or ((TC mod 1000000)\10000 = 0)))		  else		    return test		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsTC(s as string) As boolean		  dim i as integer		  dim test as string		  dim countseparators as integer		  if s = "" then		    return false		  end		  for i = 1 to len(s)		    if instr("01234567890:;. ",mid(s,i,1)) = 0 then		      return false		    end		    if instr(":;.",mid(s,i,1)) > 0 then		      countseparators = countseparators + 1		    end		  next		  if countseparators <= 1 then		    return false		  end		  return IsTC(val(replaceall(replaceall(replaceall(s,":",""),";",""),".","")))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Minus(TC as TimeCode)		  setframes getframes - tc.getframes		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Mult(factor as double)		  setframes getframes*factor		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Plus(TC as TimeCode)		  setframes getframes + tc.getframes		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetDropFrame(b as boolean)		  dropframeP = b		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub SetError(s as string)		  errorP = true		  errormessageP = s		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFeet(feet as double)		  // the format is decimal, the fractional part beeing the frames 		  // 4.06 means 4 feet 6 frames 		  		  dim g as integer		  select case gaugeP		  case 16		    g = 40		  case 35		    g = 16		  end		  setframes floor(feet)*g + 100*(feet-floor(feet))		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFps(fps as double)		  // allowed are values between 1 and 99 and 29.97		  // values between 100 and 10'000 are converted to the hundredth		  // so it is possible to define bot 29.97 and 2997, 25 and 2500		  // 29.97 will be a special case encoded internally as 30/dropframe		  		  if round(fps*100)=2997 or fps = 2997 then		    setfps(30,30000/1001.0,true,false)		  elseif fps = 30 or fps = 3000 then		    setfps(30,30000/1001.0,false,false)		  elseif round(fps*100)=2398 or fps=2398 then		    setfps(24,24000/1001.0,false,false)		  elseif fps>100 then		    setfps(fps/100,fps/100,false,false)		  else		    setfps(fps,fps,false,false)		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFps(fps as double, speed as double, dropframe as boolean, pulldown as boolean)		  dim d as double		  		  if pulldown then		    d = gettotalSeconds		  end		  		  fpsP = fps		  if speed>0 then		    speedP = speed		  else		    SetError "Invalid Speed (SetFps)"		    return		  end		  dropframeP = dropframe		  		  if fps>0 and fps<100 then		    fpsP = fps 		  else		    SetError "Invalid Framerate (SetFps)"		    return		  end		  		  if pulldown then		    settotalSeconds d		  end		  		  		  if fpsP = 30 and dropframeP then		    h24= 17982 * 6 * 24		  elseif fps =60 and dropframep then		    h24= 17982 * 2 * 6 * 24		  else		    h24=  fpsP*60*60*24		  end		  		  if speed<fps then		    pulldownp = true		  else		    pulldownp = false		  end		  		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFps(fps as string, pulldown as boolean = false)		  select case fps		  case "23.98"		    setfps 24,24000/1001.0,false,pulldown		  case "24"		    setfps 24,24,false,pulldown		  case "25"		    setfps 25,25,false,pulldown		  case "29.97 DF"		    setfps 30,30000/1001.0,true,pulldown		  case "29.97 NDF"		    setfps 30,30000/1001.0,false,pulldown		  case "30"		    setfps 30,30,false,pulldown		  case "50"		    setfps 50,50,false,pulldown		  case "59.94"		    setfps 60,60000/1001.0,true,pulldown		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFrames(frames as integer)		  dim under as integer		  		  if frames >= h24 then		    valueP = frames mod h24		  elseif frames < 0 then		    under = - frames / h24+1		    valueP = (frames + under*h24) mod h24		  else		    valueP = frames		  end		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetGauge(g as integer)		  if g = 35 or g=16 then		    gaugeP = g		  else		    SetError "Invalid Gauge. Only 16 and 35 are allowed.(SetGauge)"		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetKey(Keycode as string)		  dim framesP as integer		  		  dim g as integer		  select case gaugeP		  case 16		    g = 20		  case 35		    g = 16		  end		  setprefix left(keycode,len(keycode)-7)		  framesP =  val(right("  " +keycode,2)) + g * val(left(right("       " +keycode,7),4))		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetMeter(meter as double)		  // the format is decimal, the fractional part beeing the cm 		  		  dim g as integer		  select case gaugeP		  case 16		    g = 40 / 0.3048		  case 35		    g = 16 / 0.3048		  end		  setframes meter* g		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetNextSecond()		  dim s as string		  		  // frames auf 0 setzen		  		  s = GetTextSeconds+":00"		  SetText s		  		  // framerate + 1 hinzufügen		  		  SetFrames GetFrames + fpsP + 1		  		  // wieder auf 0 setzen		  		  s = GetTextSeconds+":00"		  SetText s		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetPrefix(s as string)		  prefixP = s		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetTC(val as integer)		  dim f,s,m,h as integer		  		  if val<0 then		    settc(-val)		    setframes -getframes		    return		  end		  		  f = val mod 100		  s = (val \ 100) mod 100		  m = (val \ 10000) mod 100		  h =  val \1000000		  		  SetTC(h,m,s,f)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetTC(h as integer, m as integer, s as integer, f as integer)		  dim frames as integer		  		  frames =  f + fpsP*(s + 60*m + 3600 *h)		  		  if dropframeP then		    frames = dropit(frames)		  end		  		  SetFrames frames		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetText(s as string)		  settc(val(replaceall(replaceall(replaceall(s,":",""),";",""),".","")))		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetTextDLP(s as string)		  ' reverse of		  '// returns in ticks. 1 tick is 4 msec		  '		  'dim tc as integer		  'tc = gettc		  'return format(tc\100,"00\:00\:00")+":"+format(250*(tc mod 100)/speedp,"000")		  '		  '// fix 1.7.7b12 was 400 before why?		  		  		  dim seconds as string		  dim ticks as string		  dim frames as string		  dim t as string		  		  ticks = NthField(s,":",4)		  seconds = NthField(s,":",1) +":" +NthField(s,":",2)+":"+ NthField(s,":",3)		  frames = right("0" + format(val(ticks) / 250.0 * speedp,"0"),2)		  		  t = seconds + ":"+frames		  		  SetText t		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetTime(d as date)		  if d=nil then		    SetError "Date nil (SetTime)"		    return		  end		  SetTotalSeconds d.TotalSeconds		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetTotalSeconds(s as double)		  valueP = round(s * speedP) // new 1.7.4 rounded		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function undropit(frames as integer) As integer		  dim minutes, tenminutes, dropbit, remainder as integer		  		  if getfps = 30 then		    		    tenminutes = frames \ 17982		    minutes = (frames - tenminutes*17982) \ 1798		    remainder = frames - tenminutes*17982 - minutes*1798		    		    if ((frames Mod 17982) mod 1798 < 2 and (frames mod 17982) > 1) then		      dropbit =-2		    else		      dropbit= 0		    end if		    		    return tenminutes*18000 + minutes*1800 + remainder + dropbit		    		  else		    		    		    tenminutes = frames \ 35964		    minutes = (frames - tenminutes*35964) \ 3596		    remainder = frames - tenminutes*35964 - minutes*3596		    		    if ((frames Mod 35964) mod 3596 < 4 and (frames mod 35964) > 1) then		      dropbit =-4		    else		      dropbit= 0		    end if		    		    return tenminutes*36000 + minutes*3600 + remainder + dropbit		    		    		    		    		    		    		  end		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Version() As string		  return "2.2"		  // 2.2 added 23.98		  // 2.1: allow integer constructors (2997). fixed bug with 29.97. refactoring		  // 2 object with valueP		  // 1.0.1 fixed bug in drop, undrop and h24 calculating false dropframe valuePs about hourchange		End Function	#tag EndMethod	#tag Property, Flags = &h0		dropframeP As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected errormessageP As string	#tag EndProperty	#tag Property, Flags = &h1		Protected errorP As boolean	#tag EndProperty	#tag Property, Flags = &h1		Protected fpsP As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected gaugeP As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected h24 As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected prefixP As string	#tag EndProperty	#tag Property, Flags = &h21		Private pulldownp As boolean	#tag EndProperty	#tag Property, Flags = &h0		speedP As double	#tag EndProperty	#tag Property, Flags = &h1		Protected valueP As integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="dropframeP"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="speedP"			Group="Behavior"			InitialValue="0"			Type="double"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass