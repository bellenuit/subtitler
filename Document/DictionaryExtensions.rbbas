#tag ModuleProtected Module DictionaryExtensions	#tag Method, Flags = &h0		Sub BinaryValue(extends xmldict as dictionary, key as variant, assigns s as string)		  dim m as memoryBlock		  if s = "" then		    xmldict.value(key) = nil		  else		    m = newmemoryBlock(lenb(s))		    m.littleEndian = false		    m.stringValue(0,m.size) = s		    xmldict.value(key) = m		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GetBinary(extends xmldict as dictionary, key as string, byref s as string) As boolean		  dim v as variant		  dim ob as object		  dim m as memoryBlock		  if xmldict.getValue(key,v) then		    select case v.type		    case 0 		      s = ""		      return true		    case 9		      ob = v.objectValue		      if ob <> nil and ob isa memoryBlock then		        m = memoryblock(ob)		        s = m.stringvalue(0,m.size)		        return true		      end		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetBoolean(extends xmldict as dictionary, key as string, byref b as boolean) As boolean		  dim v as variant		  if xmldict.getValue(key,v) then		    if v.type = 11 then		      b = v.booleanValue		      return true		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetCollection(extends xmldict as dictionary, key as string, byref c as collection) As boolean		  dim v as variant		  dim ob as object		  if xmldict.getValue(key,v) then		    if v.type = 9 then		      ob = v.objectValue		      if ob <> nil and ob isa collection then		        c = collection(ob)		        return true		      end		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetColor(extends xmldict as dictionary, key as string, byref c as color) As boolean		  dim v as variant		  if xmldict.getValue(key,v) then		    if v.type = 16 then		      c = v.colorValue		      return true		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetDictionary(extends xmldict as dictionary, key as string, byref d as dictionary) As boolean		  dim v as variant		  dim ob as object		  if xmldict.getValue(key,v) then		    if v.type = 9 then		      ob = v.objectValue		      if ob <> nil and ob isa dictionary then		        d = dictionary(ob)		        return true		      end		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetDouble(extends xmldict as dictionary, key as string, byref d as double) As boolean		  dim v as variant		  if xmldict.getValue(key,v) then		    if v.type = 5 then		      d = v.doubleValue		      return true		    elseif v.type = 2 then		      d = v.integerValue		      return true		    end		  end		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetInteger(extends xmldict as dictionary, key as string, byref i as integer) As boolean		  dim v as variant		  if xmldict.getValue(key,v) then		    if v.type = 2 then		      i = v.integerValue		      return true		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetMemoryblock(extends xmldict as dictionary, key as string, byref m as memoryBlock) As boolean		  dim v as variant		  dim ob as object		  if xmldict.getValue(key,v) then		    if v.type = 9 then		      ob = v.objectValue		      if ob <> nil and ob isa memoryBlock then		        m = memoryblock(ob)		        return true		      end		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetString(extends xmldict as dictionary, key as string, byref s as string) As boolean		  dim v as variant		  if xmldict.getValue(key,v) then		    if v.type = 8 then		      s = v.stringValue		      s = replacelineEndings(s, endofLine)  // 1.7b17 ersetzt individuelle		      s = s.defineEncoding(encodings.utf8) // 1.7b17 nach line endings		      return true		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetValue(extends xmldict as dictionary, key as string, byref v as variant) As boolean		  if xmldict.haskey(key) then		    v = xmldict.value(key)		    return true		  end		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule