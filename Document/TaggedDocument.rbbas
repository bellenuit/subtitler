#tag ClassProtected Class TaggedDocument	#tag Method, Flags = &h0		Sub AddBoolean(tag as string, value as boolean)		  addvariant tag,kboolean,value		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddDouble(tag as string, value as double)		  addvariant tag,kdouble,value		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddLong(tag as string, value as integer)		  addvariant tag, klong, value		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddLongString(tag as string, value as string)		  addvariant tag, klongstring, value		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddPString(tag as string, value as string)		  addvariant tag,kpstring,value		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddShort(tag as string, value as integer)		  addvariant tag,kshort,value		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub AddShortMemoryblock(tag as string, value as memoryBlock)		  addvariant tag, kshortmemoryblock, value		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub AddVariant(tag as string, type as integer,  value as variant)		  dim c as collection		  		  if dict.hasKey(tag) then		    c = dict.value(tag)		    if typedict.value(tag) <> type then		      // ignore, wrong type		      return		    end		  else		    c = new collection		    dict.value(tag) = c		    typedict.value(tag) = type		  end		  		  c.add value		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Clear()		  dict.clear		  typedict.clear		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ClearTag(tag as string)		  if dict.hasKey(tag) then		    dict.remove(tag)		    typedict.remove(tag)		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  dict = new dictionary		  typedict = new dictionary		  filetype = ""		  creator = ""		  version = 0		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetBoolean(tag as string, pos as integer, byref value as boolean)		  dim v as variant		  if getvariant(tag,pos,kboolean,v) then		    value = v.booleanValue		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetDouble(tag as string, pos as integer, byref value as double)		  dim v as variant		  if getvariant(tag,pos,kdouble,v) then		    value = v.doubleValue		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetLong(tag as string, pos as integer, byref value as integer)		  dim v as variant		  if getvariant(tag,pos,kdouble,v) then		    value = v.integerValue		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetLongString(tag as string, pos as integer, byref value as string)		  dim v as variant		  if getvariant(tag,pos,klongstring,v) then		    value = v.stringValue		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetPString(tag as string, pos as integer, byref value as string)		  dim v as variant		  if getvariant(tag,pos,kpstring,v) then		    value = v.stringValue		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetShort(tag as string, pos as integer, byref value as integer)		  dim v as variant		  if getvariant(tag,pos,kshort,v) then		    value = v.integerValue		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GetShortMemoryblock(tag as string, pos as integer, byref value as memoryBlock)		  dim v as variant		  dim ob as object		  if getvariant(tag,pos,kshortmemoryblock,v) then		    ob = v.objectValue		    if ob isa memoryBlock then		      value = memoryblock(ob)		    end		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GetTagCount(tag as string) As integer		  dim c as collection		  if dict.hasKey(tag) then		    c = dict.value(tag)		    return c.count		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTagType(tag as string) As string		  if typedict.hasKey(tag) then		    return format(typedict.value(tag),"0")		  end		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function GetVariant(tag as string, pos as integer, type as integer, byref value as variant) As boolean		  dim c as collection		  if dict.hasKey(tag) then		    if type = typedict.value(tag) then		      c = dict.value(tag)		      if pos <= c.count then		        value = c.item(pos)		        return true		      end		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ReadFile(f as folderItem)		  dim b as binaryStream		  dim test as string		  dim testinteger, directorystart, numberofentries, i,j as integer		  dim type, arraydim, value, nextpos as integer		  dim tag as string		  dim c as collection		  dim m as memoryBlock		  		  if f=nil or not f.exists then		    return		  end		  		  b = f.openasbinaryFile(false)		  b.littleEndian = false		  test = b.read(4)		  if creator = "" then 		     creator = test		  elseif test <> creator then		    msgbox "Wrong creator " + test + "<>" + creator		    b.close		    return		  end		  test = b.read(4)		  if filetype = "" then 		    filetype = test		  elseif test <> filetype then		    msgbox "Wrong filetype " + test + "<>" + filetype		    b.close		    return		  end		  testinteger = b.readshort		  if version = 0 then		    version = testinteger		  elseif version <> testinteger then		    msgbox "Wrong version " + format(testinteger,"0") + "<>" + format(version,"0")		    b.close		    return		  end		  		  directorystart = b.readlong		  b.position = directorystart		  numberofentries = b.readshort		  		  for i = 1 to numberofentries		    tag = format(b.readshort,"0")		    if tag = "0" then		      b.close		      return		    end		    type = b.readshort		    arraydim = b.readlong		    nextpos = b.position + 4		    c = new collection		    		    select case type		    case kbyte		      if arraydim <=4 then		        for j = 1 to arraydim		          c.add b.readbyte		        next		      else		        b.position = b.readlong		        for j = 1 to arraydim		          c.add b.readbyte		        next		      end		    case kpstring		      b.position = b.readlong		      for j = 1 to arraydim		        c.add b.readpString		      next		    case kshort		      if arraydim <=2 then		        for j = 1 to arraydim		          c.add b.readshort		        next		      else		        b.position = b.readlong		        for j = 1 to arraydim		          c.add b.readshort		        next		      end		    case klong		      if arraydim <=1 then		        for j = 1 to arraydim		          c.add b.readlong		        next		      else		        b.position = b.readlong		        for j = 1 to arraydim		          c.add b.readlong		        next		      end		    case kcolor		      // not handled		    case kboolean		      if arraydim <=1 then		        for j = 1 to arraydim		          if b.readlong=1 then		            c.add true		          else		            c.add false		          end		        next		      else		        b.position = b.readlong		        for j = 1 to arraydim		          if b.readlong=1 then		            c.add true		          else		            c.add false		          end		        next		      end		    case kdouble		      b.position = b.readlong		      for j = 1 to arraydim		        c.add b.readdouble		      next		    case kshortmemoryblock // special		      b.position = b.readlong		      for j = 1 to arraydim		        testinteger = b.readshort		        if testinteger > 0 then		          m = newmemoryBlock(testinteger)		          m.littleEndian = false		          m.short(0) = testinteger		          m.stringValue(2,testinteger-2) = b.read(testinteger-2)		          c.add m		        end		      next		    case klongstring		      for j = 1 to arraydim		        testinteger = b.readlong		        c.add b.read(testinteger)		      next		    end		    		    		    dict.value(tag) = c		    typedict.value(tag) = type		    b.position = nextpos		  next		  		  		  b.close		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub WriteFile(f as folderItem)		  dim b as binaryStream		  dim numberofentries as integer		  dim diroffset, dataoffset, i as integer		  dim tag as string		  		  b = f.createbinaryFile(rbtype)		  b.littleEndian = false		  		  if b = nil then		    msgBox "Could not create file " + f.name		    return		  end		  		  b.write leftb(creator+"    ",4) // force to 4		  b.write leftb(filetype+"    ",4) // force to 4		  b.writeshort version		  		  		  diroffset = 20		  numberofentries = dict.count		  dataoffset = diroffset+2+12*(numberofentries+1)		  		  b.writelong diroffset		  		  for i= b.position to dataoffset		    b.writebyte 0		  next		  		  b.position = diroffset		  b.writeshort numberOfEntries		  diroffset = b.position		  		  for i = 0 to numberofentries-1		    tag = dict.key(i)		    writetag(tag,b,diroffset,dataoffset)		  next		  		  // 0 entry already written above		  		  b.close		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub WriteTag(tag as string, b as binaryStream, byref diroffset as integer, byref dataoffset as integer)		  dim c as collection		  dim type,j as integer		  dim ob as object		  dim m as memoryBlock		  dim s as string		  		  c = dict.value(tag)		  type = typedict.value(tag)		  		  b.position = diroffset		  		  b.writeshort val(tag)		  b.writeshort type		  		  select case type		  case kbyte		    if c.count <=4 then		      b.writelong c.count		      for j = 1 to c.count		        b.writebyte c.item(j).integerValue		      next		    else		      b.writelong dataoffset		      b.position = dataoffset		      for j = 1 to c.count		        b.writebyte c.item(j).integerValue		      next		      dataoffset =  b.position // no pad?		    end		  case kpstring		    b.writelong dataoffset		    b.position = dataoffset		    for j = 1 to c.count		      b.writepString c.item(j).stringValue		    next		    dataoffset = b.position		  case kshort		    if c.count <=2 then		      b.writelong c.count		      for j = 1 to c.count		        b.writeshort c.item(j).integerValue		      next		    else		      b.writelong dataoffset		      b.position = dataoffset		      for j = 1 to c.count		        b.writeshort c.item(j).integerValue		      next		      dataoffset = b.position		    end		  case klong		    if c.count <=1 then		      b.writelong c.count		      for j = 1 to c.count		        b.writelong c.item(j).integerValue		      next		    else		      b.writelong dataoffset		      b.position = dataoffset		      for j = 1 to c.count		        b.writelong c.item(j).integerValue		      next		      dataoffset = b.position		    end		  case kcolor		    // not handled		  case kboolean		    if c.count <=1 then		      b.writelong c.count		      for j = 1 to c.count		        if c.item(j).booleanValue then		          b.writelong 1		        else		          b.writelong 0		        end		      next		    else		      b.writelong dataoffset		      b.position = dataoffset		      for j = 1 to c.count		        if c.item(j).booleanValue then		          b.writelong 1		        else		          b.writelong 0		        end		      next		      dataoffset = b.position		    end		  case kdouble		    b.writelong dataoffset		    b.position = dataoffset		    for j = 1 to c.count		      b.writedouble c.item(j).doubleValue		    next		    dataoffset = b.position		  case kshortmemoryblock // special		    'b.writelong dataoffset		    'b.position = dataoffset		    'for j = 1 to c.count		    'b.writedouble c.item(j).doubleValue		    'next		    'dataoffset = b.position		    'b.position = b.readlong		    'for j = 1 to c.count		    'ob = c.item(j).objectValue		    'if ob isa memoryBlock then		    'm = memoryblock(ob)		    'b.writeshort b.length		    'b.write m.stringValue(2,m.size-2)		    'end		    'next		    'dataoffset = b.position		  case klongstring		    b.writelong dataoffset		    b.position = dataoffset		    for j = 1 to c.count		      s = c.item(j).stringValue		      b.writelong(lenb(s))		      b.write s		    next		    dataoffset = b.position		  end		  		  diroffset = diroffset + 12		  b.position = diroffset		  		  		End Sub	#tag EndMethod	#tag Property, Flags = &h0		creator As string	#tag EndProperty	#tag Property, Flags = &h21		Private dict As dictionary	#tag EndProperty	#tag Property, Flags = &h0		filetype As string	#tag EndProperty	#tag Property, Flags = &h0		rbtype As string	#tag EndProperty	#tag Property, Flags = &h0		typedict As dictionary	#tag EndProperty	#tag Property, Flags = &h0		version As integer	#tag EndProperty	#tag Constant, Name = kboolean, Type = Integer, Dynamic = False, Default = \"8", Scope = Private	#tag EndConstant	#tag Constant, Name = kbyte, Type = Integer, Dynamic = False, Default = \"1", Scope = Private	#tag EndConstant	#tag Constant, Name = kcolor, Type = Integer, Dynamic = False, Default = \"6", Scope = Public	#tag EndConstant	#tag Constant, Name = kdouble, Type = Integer, Dynamic = False, Default = \"9", Scope = Private	#tag EndConstant	#tag Constant, Name = klong, Type = Integer, Dynamic = False, Default = \"4", Scope = Private	#tag EndConstant	#tag Constant, Name = klongstring, Type = Integer, Dynamic = False, Default = \"18", Scope = Public	#tag EndConstant	#tag Constant, Name = kpstring, Type = Integer, Dynamic = False, Default = \"2", Scope = Private	#tag EndConstant	#tag Constant, Name = kshort, Type = Integer, Dynamic = False, Default = \"3", Scope = Private	#tag EndConstant	#tag Constant, Name = kshortmemoryblock, Type = Integer, Dynamic = False, Default = \"10", Scope = Private	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="creator"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="filetype"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="rbtype"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="version"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass