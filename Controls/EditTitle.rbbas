#tag ClassProtected Class EditTitleInherits TextArea	#tag Event		Sub Close()		  'undostream.close		  'undofile.delete		End Sub	#tag EndEvent	#tag Event		Sub EnableMenuItems()		  if len(me.text)>0 then		    editselectall.enable		    editselecttitle.enable		  end		  enablemenus		End Sub	#tag EndEvent	#tag Event		Sub GotFocus()		  dim tc as timecode		  dim slt as integer		  		  if hasfocus then return		  		  'preview		  tc = style.getTimeCode		  tc.settext acttitle.getinpoint		  		  		  preview		  		  slt = getfirstselectedtitle		  		  if slt<>lastselstarttitle then currenttc tc		  		  		  lastselstarttitle = getfirstselectedtitle		  		  hasfocus = true		  		  useFocusRing = true		  		  gotfocus		End Sub	#tag EndEvent	#tag Event		Function KeyDown(Key As String) As Boolean		  'if key = chr(13) and keyboard.optionKey then		  'changereturn		  'return true		  'end		  '		  		  if keydown(key) then		    return true		  end		  		  gkey = key 		  		  		  		End Function	#tag EndEvent	#tag Event		Sub LostFocus()		  hasfocus = false		  lostFocus		End Sub	#tag EndEvent	#tag Event		Function MouseDown(X As Integer, Y As Integer) As Boolean		  if SyncEnabled then		    if keyboard.AsyncShiftKey = false then		      selstart = CharPosAtXY(x,y)		    end		  end		  		End Function	#tag EndEvent	#tag Event		Sub SelChange()		  SelChangeMethod		End Sub	#tag EndEvent	#tag Event		Sub TextChange()		  if changeignore then return		  		  textchangemethod		  		  		End Sub	#tag EndEvent	#tag MenuHandler		Function EditRedo() As Boolean Handles EditRedo.Action			redo			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function EditSelectAll() As Boolean Handles EditSelectAll.Action						'changeignore = true			selstart = 0			sellength = len(text)			'changeignore = false			return true		End Function	#tag EndMenuHandler	#tag MenuHandler		Function EditSelectTitle() As Boolean Handles EditSelectTitle.Action			selecttitleText		End Function	#tag EndMenuHandler	#tag MenuHandler		Function EditUndo() As Boolean Handles EditUndo.Action			undo			return true		End Function	#tag EndMenuHandler	#tag Method, Flags = &h0		Sub backupstate()		  		  undostack.append str(selstart)		  undostack.append backtext		  redim redostack(-1)		  		  if ubound(undostack) > 200 then		    undostack.remove 0		    undostack.remove 0		  end		  		  backtext = text		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub BuildTitleMap(spottinghaschanged as boolean = false)		  dim i,j,cf as integer		  dim onet as onetitle		  dim tc as timecode		  dim start, ende, ub as integer		  dim sources(-1) as string		  dim offset as integer		  dim lastvalue, lastnegativevalue as integer		  dim sep as string		  dim seplen as integer		  dim trs as double		  dim onet2 as onetitle		  		  dim s1, s2 as string		  		  		  		  onet = new onetitle(style)		  onet2 = new oneTitle(style)		  		  sep = getsep		  seplen = len(sep)		  		  sources = GetAllSources		  cf = ubound(sources)		  		  if cf <> ubound(titletcstarts) then spottinghaschanged = true		  		  redim titlesources(cf)		  redim titleselstarts(cf)		  redim titletcstarts(cf)		  redim titletcends(cf)		  redim titletextstarts(cf)		  redim titlereadingspeed(-1)		  redim titlereadingspeed(cf)		  		  tc = style.getTimeCode		  		  		  for i = 0 to cf		    if titlesources(i) <> sources(i) then  // this will not work for trimming, as titlesource is already changed.		      onet.source=sources(i)		      titlesources(i) = sources(i)		      onet.parsetimeCode		      tc.settext onet.getinpoint		      start = tc.GetFrames		      tc.settext onet.getoutpoint		      ende = tc.getframes		      		      if titletcstarts(i)<> start or titletcends(i)<>ende then		        spottinghaschanged = true		        exit		      end		    end		  next		  		  if  spottinghaschanged then		    		    redim titlemap(-1)  // try not to do now.		    redim titlemap(ub)		    		    for i = 0 to cf		      		      onet.source=sources(i)		      onet.parsetimeCode		      		      if onet.getinpoint<>"" and onet.getoutpoint<>"" then		        tc.settext onet.getinpoint		        start = tc.GetFrames		        tc.settext onet.getoutpoint		        ende = tc.getframes		        		        titletcstarts(i) = start		        titletcends(i) = ende		        		        ub = ubound(titlemap)		        		        if ende > ub then		          spottinghaschanged = true		          redim titlemap(ende + 20000) // > 100 minuten		          ub = ubound(titlemap)		        end		        		        for j = start to ende-1  // ende excluded!		          titlemap(j) = i+1 // nthfield		        next		        		        		        if ende>start then		          onet2.source = sources(i)		          onet2.parse		          trs =  len(onet2.textClean) 		          trs = trs * tc.GetFps		          trs = trs / (ende-start)		          titlereadingspeed(i) = trs		        end		        		      end		      titleselstarts(i) = offset + onet.realstart		      titletextstarts(i) = offset + onet.textstart - 1 		      offset = offset + len(sources(i)) + seplen		    next		    		    // titlemap with next title automatically set		    cf = ubound(titlemap)		    lastnegativevalue = -1		    for i = 0 to cf		      if titlemap(i)>0 then 		        if lastnegativevalue>-1 then		          // wenn titel da, dann wieder schwarz schreiben		          if titlemap(i) = lastvalue + 1 then		            for j = lastnegativevalue to i-1		              titlemap(j) =0		            next		          end		          lastnegativevalue = -1		        end		        lastvalue = titlemap(i)		      else		        if lastnegativevalue = -1 then		          lastnegativevalue = i		        end		        titlemap(i) = - lastvalue - 1		      end		    next		    BuildTitleMapEvent		  end		  		  		  		  		  		Exception err as OutOfBoundsException		  MsgBox "OutOfBoundsException in EditTitle.BuildTitleMap"		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ChangeFrameRateList(list() as integer, oldrate as string, newrate as string, pulldown as boolean, reference as string)		  dim i as integer		  dim titles(-1) as string		  dim onet as oneTitle		  dim tcin, tcout as timecode		  dim tcold, tcnew as timecode		  		  tcold = new timecode		  tcnew = new timecode		  tcold.setfps oldrate		  tcnew.SetFps newrate		  tcold.SetText reference		  tcnew.SetText reference		  		  for i = 0 to ubound(list)		    onet = new oneTitle(style)		    onet.source = titlesources(list(i)-1)		    onet.parsetimeCode		    		    tcin = new timecode		    tcin.setfps oldrate		    tcin.settext onet.getinpoint		    tcin.Minus tcold		    tcin.setfps newrate, pulldown		    tcin.Plus tcnew		    		    tcout = new timecode		    tcout.setfps oldrate		    tcout.settext onet.getoutpoint		    tcout.Minus tcold		    tcout.setfps newrate, pulldown		    tcout.plus tcnew		    		    onet.setInOut(tcin.gettext, tcout.gettext)		    titlesources(list(i)-1) = onet.source		  next		  		  		  setsources titlesources		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub changereturn()		  'dim ot as onetitle		  'dim s as string		  'dim sources(-1), src as string		  'dim i, count, ub, off as integer		  '		  'ub = getfirstselectedtitle		  '		  'ot = gettitle(ub)		  's = ot.gettext		  '		  'sources = split(text,sep)		  'if ub>1 then		  'for i = 0 to ub-2		  'count = count + len(sources(i)) + len(sep)		  'next		  '		  'off = selstart - count		  'else		  'off = selstart		  'end		  '		  's = replacelineendings(left(s,off-1),"") + endofLine.macintosh + replacelineendings(mid(s,off+1),"")		  '		  'ot.settext s		  '		  'sources(ub-1) = ot.source		  '		  'text = join(sources,sep)		  '		  'backupstate		  '		  '		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CleanFlashList(list() as integer)		  dim i as integer		  dim titles(-1) as string		  dim onet as oneTitle		  dim tcin, tcout as timecode		  dim ub as integer		  dim frin, frout as integer		  dim tcoffset as timecode		  		  tcoffset = style.GetTimeCode		  		  'if tcoffset.getframes = 0 then		  'return		  'end		  		  ub = ubound(list)		  		  for i = ub downto 0		    onet = new oneTitle(style)		    onet.source = titlesources(list(i)-1)		    onet.parsetimeCode		    		    tcin = tcoffset.clone		    tcin.settext onet.getinpoint		    frin = tcin.GetFrames		    		    tcout = tcoffset.clone		    tcout.settext onet.getoutpoint		    frout = tcout.GetFrames		    		    if (frin=0 and frout=0) or frout-frin>1 then		      onet.setInOut(tcin.gettext, tcout.gettext)		      titlesources(list(i)-1) = onet.source		    else		      titlesources.Remove list(i)-1		    end		  next		  		  		  setsources titlesources		  BuildTitleMap true		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(out as canvas3, lb as statictext, mystyle as subtitle, at as onetitle)		  		  		  staticn = out		  label = lb		  style = mystyle		  acttitle = at		  		  preview		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Destructor()		  'undostream.close		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Edittitle(out as canvas3, lb as statictext, mystyle as subtitle, at as onetitle)		  Constructor out,lb,mystyle,at		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub enablemenus()		  if ubound(undostack) > 2 then		    editundo.enable		  end		  if ubound(redostack) > 0 then		    editredo.enable		  end		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub FilterControlCharacters()		  dim selst as integer		  dim i as integer		  dim s as string		  		  selst = len(text)-selstart		  		  s = text		  		  if len(s)<=len(oldtext) +1 then  // typing erasing do not need a test		    oldtext = s		    return		  end		  oldtext = s		  		  for i = 0 to 31		    if i=9 then // replace tab with chr(13)		      s = replaceall(s,chr(i),chr(13))		    elseif i<>10 and i<>13 then		      s = replaceall(s,chr(i),"")		    end		  next		  s = replacelineEndings(s,endofLine)		  if s<>text then		    'beep		    text = s		    'selstart = selst		    selstart = len(text)-selst		  end		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GetAllSources() As string()		  dim titles(-1) as string		  dim i,ub,l as integer		  dim sep,eol as string		  		  eol = geteol		  l = len(eol)		  sep = getsep		  		  titles = split(text,sep)		  ub = ubound(titles)		  		  for i = 1 to ub  // we do not check on the first		    if left(titles(i),l) = eol then		      titles(i-1) = titles(i-1)+eol		      titles(i) = mid(titles(i),l+1)		    end		  next		  		  return titles		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetAllTitles() As oneTitle()		  dim result(-1), out  as oneTitle		  dim sources(-1), s as string		  dim i,c as integer		  		  		  		  c = ubound(titlesources)		  		  for i = 0 to c		    out = new oneTitle(style)		    out.setitemFilename i + 1, true		    s=replacelineEndings(titlesources(i),endofLine)		    if trim(s)<>""then		      out.source = s.defineEncoding(encodings.utF8)		      out.prefix = prefix 		      out.suffix =  suffix		      out.exportfolder = exportfolder		      out.style = style // implicite parse 		      result.append out		    end		  next		  		  return result		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetEOL() As string		  dim sep as string		  sep = endofline		  return sep		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getfirstselectedtitle() As integer		  dim i,ub as integer		  		  ub = ubound(titleselstarts)		  		  for i = 0 to ub		    if titleselstarts(i) > selstart then return i		  next		  		  return ub+1		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getlastselectedtitle() As integer		  dim i,ub as integer		  		  ub = ubound(titleselstarts)		  		  for i = ub downto 0		    if titleselstarts(i) <= selstart+sellength then 		      return i+1		    end		  next		  		  return 1		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetNextCutFromTimeCode(tc as timecode) As timecode		  dim f as integer		  dim t,t2 as double		  		  f = tc.getframes		  		  if f<0 then f=0		  if f>=ubound(titlemap) then f = ubound(titlemap)-1		  		  		  t = titlemap(f)		  t2=t		  while t2=t and f< ubound(titlemap)		    f = f + 1		    t2 = titlemap(f)		  wend		  tc.setframes f		  		  // 1.7.4b2		  // ist manchmal ein bild zu früh  und das bild bleibt dann stehen.		  		  		  		  return tc		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetNextTitleFromTimecode(tc as timecode) As oneTitle		  dim f as integer		  dim t as integer		  		  f = tc.getframes		  		  if f >= 0 and f < ubound(titlemap) then		    t = titlemap(f)		    		    if t>0 then		      return gettitle(t+1)		    else		      while t<0 and f< ubound(titlemap)		        f = f + 1		        t = titlemap(f)		      wend		      return gettitle(t)		    end		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetPreviousCutFromTimecode(tc as timecode) As timecode		  dim f as integer		  dim t,t2 as double		  		  f = tc.getframes		  		  if f<0 then f=0		  if f>ubound(titlemap) then f = ubound(TITLEMAP)		  t = titlemap(f)		  t2=t		  while t2=t and f>0		    f = f - 1		    t2 = titlemap(f)		  wend		  tc.setframes f		  		  		  return tc		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetSelectedTC() As timecode		  dim tc as timecode		  dim s as string		  tc = style.gettimeCode		  		  tc.settext gettitle(getfirstselectedtitle).GetInPoint		  		  return tc		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetSep() As string		  return geteol + geteol		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetTitle(n as integer) As oneTitle		  dim s, line, st,fn, macro, macrokey, macrobody as string		  dim realstart, fs, fe, i,cf as integer		  dim out as onetitle		  		  '- savemsgBox text2Hex(text)		  		  //out = acttitle  // this is not good		  out = new oneTitle(style)		  		  out.setitemFilename n		  if n > 0 and n<=ubound(titlesources)+1 then		    s=replacelineendings(titlesources(n-1),endofLine)		    out.source=s.defineEncoding(encodings.uTF8)		  else		    out.source=""		  end		  		  		  // added		  out.prefix = prefix 		  out.suffix =  suffix		  out.exportfolder = exportfolder		  		  out.style = style // implicite parse 		  		  return out 		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub InsertWithTimecode(tcin as timecode, tcout as timecode)		  dim fin as integer		  dim t as integer		  dim i,fc as integer		  dim newtext as string		  dim tc2 as timecode		  		  		  tc2 = getcurrentTC.clone		  if tc2.getframes >= tcout.getframes then		    tc2.setframes tc2.getframes -1		  end		  		  fin = tcin.getframes		  newtext = "/tc " + tcin.gettext + " " + tcout.gettext + endofline		  		  fc = ubound(titletcstarts)		  		  sellength = 0		  		  if fc = -1 then		    titlesources.append newtext		    setsources titlesources		    setfocus		    return		  end		  		  for i = 0 to fc		    if fin < titletcstarts(i) then		      titlesources.insert i,newtext		      setsources titlesources		      lastselstarttitle = i		      selstart = titletextstarts(lastselstarttitle)		      setfocus		      selectfromTimecode tc2		      currentTC tc2		      selectfromtimecode tcin		      return		    end		  next		  		  titlesources.append newtext		  setsources titlesources		  lastselstarttitle = ubound(titlesources)		  selstart = titletextstarts(lastselstarttitle)		  setfocus		  		  selectfromTimecode tc2		  currentTC tc2		  scrolltoSelection		  selectfromtimecode tcin		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub JoinFromTimecode(tc as timecode)		  dim f as integer		  dim t as integer		  dim i,j,fc as integer		  dim newtc, oldin, oldout as string		  dim comment1, comment2, text1, text2 as string		  dim titles(-1), commentlines(-1) as string		  dim onet as oneTitle		  dim found as boolean		  dim oldfilename as string		  		  f = tc.getframes		  		  fc = ubound(titlesources)		  		  for i = 0 to fc - 1		    if f >= titletcstarts(i) and f < titletcstarts(i+1) then		      onet = new oneTitle(style)		      onet.source = titlesources(i)		      onet.parse		      comment1 = onet.comment		      oldfilename = onet.filenamedefined		      text1 = onet.gettext		      oldin = onet.getinpoint		      		      onet.source = titlesources(i+1)		      onet.parse		      comment2 = onet.comment		      text2 = onet.gettext		      oldout = onet.getoutpoint		      		      // remove /file,/style and /tc comments comment2		      commentlines = split(comment2,geteol)		      for j = ubound(commentlines) downto 0		        if left(commentlines(j),5) = "/file" then 		          commentlines.remove j		          j = j-1		        end		        if left(commentlines(j),6) = "/style" then 		          commentlines.remove j		          j = j-1		        end		        if left(commentlines(j),3) = "/tc" then 		          commentlines.remove j		          j = j-1		        end		      next		      comment2 = join(commentlines,geteol)		      if comment2<>"" then comment2 = comment2 + geteol		      if comment1<>"" then comment2 = comment1 + geteol + comment2		      onet.source = comment2 + text1 + " " + text2		      onet.parse		      onet.setInOut(oldin,oldout)		      onet.setfilename oldfilename		      titlesources(i) = onet.source		      titlesources.remove i+1		      found = true		      exit		    end		  next		  		  if found then		    setsources titlesources		    selectfromTimecode(tc)		  else		    beep		  end		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub preview()		  preview getfirstselectedtitle		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub preview(i as integer)		  dim t as onetitle		  dim bo,it,un as boolean		  dim align as integer		  		  if staticn = nil then return		  		  'if not staticn.visible then return // 2.0		  		  t =gettitle(i)		  		  acttitle = t		  		  preview t		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub preview(t as oneTitle, unspotted as boolean=false)		  dim newtext as string		  if t = nil then return		  		  staticn.bold = t.style.bold		  staticn.italic = t.style.italic		  staticn.underline = t.style.underline		  staticn.textalign = t.style.halign		  staticn.textfont = t.style.font		  		  if unspotted then staticn.textcolor = &c808080 else staticn.textcolor = &cffffff		  		  newtext = app.getlabel("Preview")+" "+t.getfilename + " DUR: " +  t.durationString + " LEN: " + t.lengthString + " RS: " + t.readingSpeedString		  if label.text<> newtext then		    label.text = newtext		  end		  staticn.text t.gettext		  		  previewedtitle = t 		  		Exception err as OutOfBoundsException		  MsgBox "OutOfBoundsException in EditTitle.Preview"		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub previewfromtimecode(tc as timecode)		  dim f as integer		  dim t as integer		  dim notspotted as boolean		  		  f = tc.getframes		  		  if f >= 0 and f < ubound(titlemap) then		    t = titlemap(f)		    if t<0 then		      t=-t		      notspotted = true		    end		    if t>0 then 		      preview gettitle(t), notspotted		      		      if t-1>ubound(titleselstarts) then		        selstart = len(text)		      elseif selstart<titleselstarts(t-1) or selstart > titleselstarts(t-1) +len(titlesources(t-1)) then // changes 1.7.5b12		        selstart = titletextstarts(t-1)		      end		      me.scrolltoSelection		    else		      preview 0		    end		  else		    preview 0		  end		  		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub redo()		  if ubound(redostack) > 0 then		    undostack.append str(selstart)		    undostack.append text		    		    changeignore = true		    text = redostack.pop		    backtext = text		    selstart = val(redostack.pop)		    changeignore = false		    buildTitleMap		    preview		  end 		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub replace(pos as integer, oldst as string, newst as string)		  'isreplace = true		  'if undobuffer <>"" then		  '// there has been writing before		  'logwrite		  'end		  'selstart = pos		  'sellength = len(oldst)		  'seltext = newst		  'undobuffer = newst		  '		  'isreplace = false		  		  changeignore = true		  selstart = pos		  sellength = len(oldst)		  seltext = newst		  backupstate		  changeignore = false		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub resetundo()		  'undostream.position = 0		  'maxundo = 0		  'backupstate		  		  redim undostack(-1)		  backupstate		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ScrollToSelection()		  dim theline, th as integer		  		  theline = me.lineNumAtCharPos(me.selstart+1)		  		  window.graphics.textfont = me.textfont		  th = window.graphics.textheight		  if th=0 then th = 15		  		  if me.scrollposition > theline or  me.scrollposition <= theline - (me.height -16)/th +2 then		    me.scrollposition = theline-1		  end		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub SelChangeMethod()		  dim ns,nsl,ntl as integer		  dim nst, nt as string		  dim c as clipboard		  dim enc as textencoding		  dim conv as textconverter		  dim tc as timecode		  dim slt as integer		  		  //changeignore is for undo/redo operations		  if changeignore then		    return		  end		  		  if text <> backtext then		    backupstate		  end		  		  		  slt = getfirstselectedtitle		  		  preview		  tc = style.getTimeCode		  // 1.6.1 we do only set the timecode if the inpoint does exist		  // 1.7.4 we do only set the timecode the titlenumber has not changed.		  if slt <> lastselstarttitle then		    if acttitle.getinpoint<>"" then		      tc.settext acttitle.getinpoint		      currenttc tc		    end		  end		  lastselstarttitle = getfirstselectedtitle		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SelectFromTimecode(tc as timecode)		  dim f as integer		  dim t as integer		  dim st, st1 as integer		  		  f = tc.getframes		  		  if f >= 0 and f < ubound(titlemap) then		    t = abs(titlemap(f))		    		    if t = 0 then 		      while f>0		        f=f-1		        t = abs(titlemap(f))		        if t>0 then		          exit		        end		      wend		      if t=0 then t=1		    end		    // eine andere idee wäre titlemap negativ zu belegen, wenn danach.		    		    // select negativ?		    		  end		  		  if t>0 then		    if t<= ubound(titleselstarts) then		      st1 = titleselstarts(t) // !! selstarts		      st =  titletextstarts(t-1)		    else		      st1 = 999999		      st = len(text)		    end		    if selstart < st or selstart >= st1 then		      selstart = st		    end		    sellength = 0		  else		    selstart = 0		    sellength = 0		  end		  		  lastselstarttitle = getfirstselectedtitle		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SelectFromTitleNumber(t as integer)		  		  		  if t>0 and t<=ubound(titletextstarts)+1 then		    selstart = titletextstarts(t-1)		    sellength = 0		  else		    selstart = 0		    sellength = 0		  end		  		  lastselstarttitle = t		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SelectTitleText()		  dim i,st,en as integer		  i = getfirstselectedtitle		  if i>0 then		    st = titletextstarts(i-1)		    en = instr(st,text,geteol+geteol)		    if en=0 then en = len(text)		    selstart = st		    sellength = en-st		  end		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetSources(sources() as string, seltitle as integer = -1)		  dim s as string		  dim i,ub,pos,ls as integer		  		  ls = len(getsep)		  if seltitle>-1 then		    ub = min(ubound(sources),seltitle-2)		    for i=0 to ub		      pos = pos + len(sources(i)) + ls		    next		  end		  		  s = join(sources,getsep)		  		  changeignore = true		  backupstate		  text = s		  changeignore = false		  selstart = pos		  preview		  textchangemethod		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetTitles(titles() as oneTitle)		  dim s(-1) as string		  dim title as onetitle		  		  for each title in titles		    s.append title.source		  next		  		  setsources s		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SortTitles()		  dim titles(-1), titles2(-1), title as string		  dim s as string		  dim onet as oneTitle		  		  		  for each title in titlesources		    onet = new oneTitle(style)		    onet.source = title		    onet.parseTimeCode		    titles2.append onet.getinpoint + endofline.unix + title		  next		  		  titles2.sort		  		  redim titles(-1)		  for each title in titles2		    s = nthField(title,endofline.unix,1)		    titles.append mid(title,len(s)+2)		  next		  		  setsources titles		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SplitFromTimeCode(tc as timecode, distance as integer)		  dim f as integer		  dim t as integer		  dim i,fc as integer		  dim newtc, newtc2, oldin, oldout as string		  dim text1, text2 as string		  dim onet as oneTitle		  dim found as boolean		  dim tc2 as timecode		  dim curs as integer		  dim tx, t1, t2 as string		  dim oldfilename as string		  		  f = tc.getframes		  newtc = tc.gettext		  tc2 = tc.Clone		  tc2.setframes distance		  tc2.plus(tc)		  newtc2 = tc2.gettext		  		  		  		  fc = ubound(titlesources)		  		  		  		  for i = 0 to fc		    if f > titletcstarts(i) and f + distance < titletcends(i) then		      		      		      		      onet = new oneTitle(style)		      onet.source = titlesources(i)		      onet.parse		      		      // find out where the cursor is when you split.		      curs = selstart - titletextstarts(i)		      tx = onet.gettext		      if curs = 0 then		        if instr(tx,geteol)>0 then		          curs = len(nthfield(tx,geteol,1))		        else		          curs = len(tx)/2		          while mid(tx,curs,1)<>" " and curs<=len(tx)		            curs = curs + 1		          wend		        end		      end		      t1 = left(tx,curs)		      t1 = rtrim(t1)		      if right(t1,len(geteol)) = geteol then		        t1 = left(t1,len(t1) -len(geteol))		      end		      t2 = mid(tx,curs+1)		      t2 = ltrim(t2)		      if left(t1,len(geteol)) = geteol then		        t2 = mid(t2,len(geteol)+1)		      end		      		      		      oldin = onet.getinpoint		      oldout = onet.getoutpoint		      onet.setInOut(newtc2,oldout)		      onet.settext t2		      oldfilename = onet.filenamedefined		      if oldfilename<>"" then		        onet.setfilename oldfilename+"a"		      end		      titlesources(i) = onet.source		      onet.setfilename oldfilename		      onet.setinOut(oldin,newtc)		      onet.settext t1		      titlesources.insert i, onet.source		      found = true		      exit		    end		  next		  		  if found then		    setsources titlesources,i+2		    currentTC tc2		    selectfromTimecode(tc2)		  else		    beep		  end		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SplitToNext(tc as timecode)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SplitToPrevious()		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Suffix() As string		  select case psuffix		  case "TIFF", ".tif", ".tiff"		    return app.tiffextension		  case "PICT", ".pct", ".pict"		    return app.pictextension		  case ".bmp"		    return ".bmp"		  case ".png"		    return ".png"		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Suffix(assigns s as string)		  psuffix = s		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function tc2ebu(tc as timecode) As string		  dim m as memoryBlock		  dim s as string		  m = newmemoryBlock(4)		  m.littleEndian = false		  s = tc.gettext		  m.byte(0) = val(mid(s,1,2))		  m.byte(1) = val(mid(s,4,2))		  m.byte(2) = val(mid(s,7,2))		  m.byte(3) = val(mid(s,10,2))		  return m.stringValue(0,4)		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function Text2Hex(s as string) As string		  dim result as string		  dim i,l as integer		  		  l =lenb(s)		  for i = 1 to l 		    result = result + right("0"+hex(asc(midb(s,i))),2)		    if i = 32 then		      result = result + endofLine		    end		  next		  		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub TextChangeMethod()		  		  		  changeignore = true		  filtercontrolCharacters		  changeignore  = false		  		  buildtitlemap		  		  textchangeEvent		  		Exception err as OutOfBoundsException		  MsgBox "OutOfBoundsException in EditTitle.TextChangeMethod"		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function TextMac() As string		  dim result as string		  result = text		  if instr(text,endofLine.windows)>0 then		    result = replaceall(text,endofLine.windows,endofLine.macintosh)		  end		  if instr(text,endofLine.unix)>0 then		    result = replaceall(text,endofLine.unix,endofLine.macintosh)		  end		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function titlecount() As integer		  return ubound(titlesources) +1		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function titleinselection(n as integer) As boolean		  		  //   selstart  <=  t(n) 		  //   selstart + sellength >= t(n-1)		  		  if ubound(titleselstarts) = n-1 or titleselstarts(n) > selstart then		    if n= 0 or titleselstarts(n-1)  <= selstart + sellength then		      return true		    end		  end		  		  		  		exception err as outofboundsException		  // should not happen		  return false		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub trim(tc as timecode, trimin as boolean, trimout as boolean, value as integer)		  dim f,f2,f3 as integer		  dim t as integer		  dim i,fc as integer		  dim newtc, newtc2, oldin, oldout as string		  dim text1, text2 as string		  dim titles(-1) as string		  dim onet as oneTitle		  dim found as boolean		  dim tc2 as timecode		  dim newf, oldf as integer		  		  f = tc.getframes		  oldf = f		  newf = f		  		  		  fc = ubound(titlesources)		  		  for i = 0 to fc		    if f >= titletcstarts(i) and f < titletcends(i) then		      onet = new oneTitle(style)		      onet.source = titlesources(i) //1.7.5b4		      onet.parsetimeCode		      oldin = onet.getinpoint		      oldout = onet.getoutpoint		      		      if trimin then		        tc.settext oldin		        f2 = tc.getframes		        f2 = f2 + value		        tc.setframes f2		        oldin = tc.gettext		        newf = f2		      end		      if trimout then		        tc.settext oldout		        f3= tc.getframes		        f3= f3 + value		        tc.setframes f3		        oldout = tc.gettext		        newf = f3-1		      end		      if trimin and trimout then newf = (f3 + f2) / 2		      onet.setInOut(oldin,oldout)		      titlesources(i) = onet.source		      found = true		      exit		    end		  next		  		  if found then		    setsources titlesources,i+1		    if oldf<>newf then		      tc.setframes newf		      currentTC tc, true		      selectfromTimecode(tc)		    end		  else		    beep		  end		  		  BuildTitleMap true		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub TrimList(list() as integer, tcoffset as timecode)		  dim i as integer		  dim titles(-1) as string		  dim onet as oneTitle		  dim tcin, tcout as timecode		  dim ub as integer		  		  'if tcoffset.getframes = 0 then		  'return		  'end		  		  ub = ubound(list)		  		  for i = 0 to ub		    onet = new oneTitle(style)		    onet.source = titlesources(list(i)-1)		    onet.parsetimeCode		    		    tcin = tcoffset.clone		    tcin.settext onet.getinpoint		    tcin.Plus tcoffset		    		    tcout = tcoffset.clone		    tcout.settext onet.getoutpoint		    tcout.Plus tcoffset		    		    onet.setInOut(tcin.gettext, tcout.gettext)		    titlesources(list(i)-1) = onet.source		  next		  		  		  setsources titlesources		  BuildTitleMap true		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub undo()		  dim t as string		  		  if ubound(undostack) > 0 then		    redostack.append str(selstart)		    redostack.append text		    		    changeignore = true		    		    text = undostack.pop		    backtext = text		    selstart = val(undostack.pop)		    changeignore = false		    buildTitleMap		    preview		  end 		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub UpdateWithTimecode(tcin as timecode, tcout as timecode)		  dim titles(-1) as string		  dim onet as oneTitle		  dim titlenr as integer		  		  titlenr = getfirstselectedtitle		  		  if titlenr>0 then		    		    onet = new oneTitle(style)		    onet.source = titlesources(titlenr-1)		    onet.setInOut(tcin.gettext, tcout.gettext)		    		    titlesources(titlenr-1) = onet.source		    		    setsources titlesources,titlenr-1		    selectfromTimecode(tcin)		    		    BuildTitleMap true		    		  end		  		exception err as outofboundsException		  		  // should not happen		  beep		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function UTF82Latin(s as string, enc as string) As string		  select case enc		  case "850"		    return utf82Latin850(s)		  case "852"		    return utf82Latin852(s)		  else		    return utf82Latin850(s)		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Utf82latin850(s as string) As string		  dim m as memoryBlock		  dim i,le,offset as integer		  dim letter,result as string		  		  le = len(s)		  le = min(le,127-16) // allow only for one block		  		  m = newmemoryBlock(2*le)		  m.littleEndian = false		  for i = 1 to le		    letter = mid(s,i,1)		    		    if asc(letter) = 13 then		      m.byte(offset) = &h8a		      offset = offset + 1 // 1.6.3b3		    elseif asc(letter) < 128 then		      m.byte(offset) = asc(letter)		      offset = offset + 1		    else		      select case letter		      case "ä"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("a")		      case "Ä"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("A")		      case "ë"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("e")		      case "Ë"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("E")		      case "ï"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("i")		      case "Ï"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("I")		      case "ö"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("o")		      case "Ö"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("O")		      case "ü"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("u")		      case "Ü"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("U")		      case "ÿ"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("y")		      case "Ÿ"		        m.byte(offset) = &hc8		        m.byte(offset+1) = asc("Y")		      case "á"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("a")		      case "´A"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("A")		      case "é"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("e")		      case "É"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("E")		      case "í"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("i")		      case "´I"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("I")		      case "ó"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("o")		      case "´O"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("O")		      case "ú"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("u")		      case "´U"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("U")		      case "´y"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("y")		      case "´Y"		        m.byte(offset) = &hc2		        m.byte(offset+1) = asc("Y")		      case "à"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("a")		      case "À"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("A")		      case "è"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("e")		      case "È"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("E")		      case "ì"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("i")		      case "Ì"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("I")		      case "ò"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("o")		      case "Ò"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("O")		      case "ù"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("u")		      case "Ù"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("U")		      case "`y"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("y")		      case "`Y"		        m.byte(offset) = &hc1		        m.byte(offset+1) = asc("Y")		      case "â"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("a")		      case "Â"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("A")		      case "ê"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("e")		      case "Ê"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("E")		      case "î"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("i")		      case "Î"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("I")		      case "ô"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("o")		      case "Ô"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("O")		      case "û"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("u")		      case "Û"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("U")		      case "^y"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("y")		      case "^Y"		        m.byte(offset) = &hc3		        m.byte(offset+1) = asc("Y")		      case "ã"		        m.byte(offset) = &hc4		        m.byte(offset+1) = asc("a")		      case "Ã"		        m.byte(offset) = &hc4		        m.byte(offset+1) = asc("A")		      case "õ"		        m.byte(offset) = &hc4		        m.byte(offset+1) = asc("o")		      case "Õ"		        m.byte(offset) = &hc4		        m.byte(offset+1) = asc("O")		      case "ñ"		        m.byte(offset) = &hc4		        m.byte(offset+1) = asc("n")		      case "Ñ"		        m.byte(offset) = &hc4		        m.byte(offset+1) = asc("N")		      case "ç"		        m.byte(offset) = &hcb		        m.byte(offset+1) = asc("c")		      case "Ç"		        m.byte(offset) = &hcb		        m.byte(offset+1) = asc("C")		      case "¡"		        m.byte(offset) = &ha1		        offset = offset-1		      case "$"		        m.byte(offset) = &ha3		        offset = offset-1		      case "£"		        m.byte(offset) = &ha4		        offset = offset-1		      case "§"		        m.byte(offset) = &ha7		        offset = offset-1		      case "¿"		        m.byte(offset) = &hbf		        offset = offset-1		      case "©"		        m.byte(offset) = &hd3		        offset = offset-1		      case "ß"		        m.byte(offset) = &hfb		        offset = offset-1		      end		      offset = offset + 2		    end		    		  next		  		  result = m.stringValue(0,offset)		  return result		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function UTF82Latin852(t as string) As string		  dim m as memoryBlock		  dim i,le,offset as integer		  dim letter,result as string		  dim s as string		  		  dim d as new dictionary		  		  		  for i = 0 to 127		    d.value(chr(i)) = i		  next		  // http://en.wikipedia.org/wiki/Code_page_852"		  s = "ÇüéâäůćçłëŐőîŹÄĆ"		  s = s + "ÉĹĺôöĽľŚśÖÜŤťŁ_č"		  s = s + "áíóúĄąŽžĘę_źČş«»"		  s = s + "___ǀ_ÁÂÊŞ____Żż_"		  s = s + "______Ăă________"		  s = s + "đĐĎËďŇÍÎê____ŢŮ_"		  s = s + "ÓßÔŃńňŠšŔÚŕŰýÝț´"		  s = s + "-____§÷____űŘř__"		  if len(s)<>128 then		    msgbox "len " + str(len(s))		  end		  for i = 1 to 128		    d.value(mid(s,i,1)) = i + 127		  next		  // exception new line will overwrite special character Ő		  d.value(chr(13)) = &h8a		  		  le = len(t)		  le = min(le,127-16) // allow only for one block		  		  m = newmemoryBlock(2*le)		  m.littleEndian = false		  for i = 1 to le		    letter = mid(t,i,1)		    if d.hasKey(letter) then		      m.byte(offset) = d.value(letter)		      offset = offset + 1		    end		  next		  		  result = m.stringValue(0,offset)		  return result		  		End Function	#tag EndMethod	#tag Hook, Flags = &h0		Event BuildTitleMapEvent()	#tag EndHook	#tag Hook, Flags = &h0		Event CurrentTC(tc as timecode, always as boolean = false)	#tag EndHook	#tag Hook, Flags = &h0		Event GetCurrentTC() As timecode	#tag EndHook	#tag Hook, Flags = &h0		Event GotFocus()	#tag EndHook	#tag Hook, Flags = &h0		Event Keydown(key as string) As boolean	#tag EndHook	#tag Hook, Flags = &h0		Event LostFocus()	#tag EndHook	#tag Hook, Flags = &h0		Event SyncEnabled() As boolean	#tag EndHook	#tag Hook, Flags = &h0		Event TextChangeEvent()	#tag EndHook	#tag Note, Name = buildtitlemap 1.7.7b9		  dim i,j,cf as integer		  dim onet as onetitle		  dim tc as timecode		  dim start, ende, ub as integer		  dim sources(-1) as string		  dim offset as integer		  dim lastvalue as integer		  dim sep as string		  dim seplen as integer		  dim lastnegativevalue as integer		  dim trs as double		  		  ub = ubound(titlemap)		  redim titlemap(-1)		  redim titlemap(ub)  // > 100 minuten		  		  onet = new onetitle(style)		  		  sep = getsep		  seplen = len(sep)		  		  sources = getallsources		  cf = ubound(sources)		  		  redim titlesources(cf)		  redim titleselstarts(cf)		  redim titletcstarts(cf)		  redim titletcends(cf)		  redim titletextstarts(cf)		  redim titlereadingspeed(-1)		  redim titlereadingspeed(cf)		  		  for i = 0 to cf		    titlesources(i) = sources(i)		    onet.source=sources(i)		    onet.parse  ' timeCode		    		    if onet.getinpoint<>"" and onet.getoutpoint<>"" then		      tc = style.getTimeCode		      tc.settext onet.getinpoint		      start = tc.GetFrames		      tc.settext onet.getoutpoint		      ende = tc.getframes		      		      if ende > ub then		        redim titlemap(ende + 20000)		        ub = ubound(titlemap)		      end		      		      for j = start to ende-1  // ende excluded!		        titlemap(j) = i+1 // nthfield		      next		      		      titletcstarts(i) = start		      titletcends(i) = ende		      		    end		    titleselstarts(i) = offset + onet.realstart		    titletextstarts(i) = offset + onet.textstart - 1 		    if ende>start then		      trs =  len(onet.textClean) 		      trs = trs * tc.GetFps		      trs = trs / (ende-start)		      titlereadingspeed(i) = trs		    end		    offset = offset + len(sources(i)) + seplen		  next		  		  cf = ubound(titlemap)		  lastnegativevalue = -1		  for i = 0 to cf		    if titlemap(i)>0 then 		      if lastnegativevalue>-1 then		        // wenn titel da, dann wieder schwarz schreiben		        if titlemap(i) = lastvalue + 1 then		          for j = lastnegativevalue to i-1		            titlemap(j) =0		          next		        end		        lastnegativevalue = -1		      end		      lastvalue = titlemap(i)		    else		      if lastnegativevalue = -1 then		        lastnegativevalue = i		      end		      titlemap(i) = - lastvalue - 1		    end		  next		  		  BuildTitleMapEvent		  			#tag EndNote	#tag Note, Name = buildtitlemap before b9		  dim i,j,cf as integer		  dim onet as onetitle		  dim tc as timecode		  dim start, ende, ub as integer		  dim sources(-1) as string		  dim offset as integer		  dim lastvalue as integer		  dim sep as string		  dim seplen as integer		  		  ub = ubound(titlemap)		  redim titlemap(-1)		  redim titlemap(ub)  // > 100 minuten		  		  onet = new onetitle(style)		  		  sep = getsep		  seplen = len(sep)		  		  sources = getallsources		  cf = ubound(sources)		  		  redim titlesources(cf)		  redim titleselstarts(cf)		  redim titletcstarts(cf)		  redim titletcends(cf)		  redim titletextstarts(cf)		  		  for i = 0 to cf		    titlesources(i) = sources(i)		    onet.source=sources(i)		    onet.parsetimeCode		    		    if onet.getinpoint<>"" and onet.getoutpoint<>"" then		      tc = style.getTimeCode		      tc.settext onet.getinpoint		      start = tc.GetFrames		      tc.settext onet.getoutpoint		      ende = tc.getframes		      		      if ende > ub then		        redim titlemap(ende + 20000)		        ub = ubound(titlemap)		      end		      		      for j = start to ende-1  // ende excluded!		        titlemap(j) = i+1 // nthfield		      next		      		      titletcstarts(i) = start		      titletcends(i) = ende		      		     		      		    end		    titleselstarts(i) = offset + onet.realstart		    titletextstarts(i) = offset + onet.textstart - 1 		    offset = offset + len(sources(i)) + seplen		  next		  		  cf = ubound(titlemap)		  for i = 0 to cf		    if titlemap(i)>0 then 		      lastvalue = titlemap(i)		    else		      titlemap(i) = - lastvalue		    end		  next		  		  BuildTitleMapEvent		  			#tag EndNote	#tag Note, Name = sst export				st_format 2		Display_Start tab non_forced		TV_Type tab NTSC		Tape_Type tab DROP		Pixel_Area (0 477)		Display_Area tab (0 2 719 479)		Color tab (9 3 7 3)		Contrast tab (6 15 15 0)		E2 tab (0 0 255 """)		E1 tab (255 0 0 """)		PA tab (0 0 0 """)		BG tab (255 255 255 """)		Directory path TAB		####################################################################		SP_NUMBER tab START tab END tab FILE_NAME		0001 tab 090:00:02:10 tab 00:00:05:20 tab VTS_01.bmp										producer:		number tab tc tab tc tab text seconde line below			#tag EndNote	#tag Property, Flags = &h0		acttitle As onetitle	#tag EndProperty	#tag Property, Flags = &h0		backtext As string	#tag EndProperty	#tag Property, Flags = &h0		changeignore As boolean	#tag EndProperty	#tag Property, Flags = &h0		exportfolder As folderitem	#tag EndProperty	#tag Property, Flags = &h0		fullscreenclient As fullScreenWindow	#tag EndProperty	#tag Property, Flags = &h0		gkey As string	#tag EndProperty	#tag Property, Flags = &h1		Protected hasfocus As boolean	#tag EndProperty	#tag Property, Flags = &h0		isreplace As boolean	#tag EndProperty	#tag Property, Flags = &h0		label As statictext	#tag EndProperty	#tag Property, Flags = &h0		lastlabeltext As string	#tag EndProperty	#tag Property, Flags = &h21		Private lastselstarttitle As integer	#tag EndProperty	#tag Property, Flags = &h0		maxundo As integer	#tag EndProperty	#tag Property, Flags = &h0		maxwidth As integer	#tag EndProperty	#tag Property, Flags = &h1		Protected oldtext As string	#tag EndProperty	#tag Property, Flags = &h0		plain As boolean	#tag EndProperty	#tag Property, Flags = &h0		prefix As string	#tag EndProperty	#tag Property, Flags = &h0		previewedtitle As onetitle	#tag EndProperty	#tag Property, Flags = &h0		psuffix As string	#tag EndProperty	#tag Property, Flags = &h0		redostack(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		replacetext As string	#tag EndProperty	#tag Property, Flags = &h0		staticn As canvas3	#tag EndProperty	#tag Property, Flags = &h0		style As subtitle	#tag EndProperty	#tag Property, Flags = &h0		titlemap(-1) As integer	#tag EndProperty	#tag Property, Flags = &h0		titlereadingspeed(-1) As integer	#tag EndProperty	#tag Property, Flags = &h0		titleselstarts(-1) As integer	#tag EndProperty	#tag Property, Flags = &h0		titlesources(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		titletcends(-1) As integer	#tag EndProperty	#tag Property, Flags = &h0		titletcstarts(-1) As integer	#tag EndProperty	#tag Property, Flags = &h0		titletextstarts(-1) As integer	#tag EndProperty	#tag Property, Flags = &h0		titletextstartsall(-1) As integer	#tag EndProperty	#tag Property, Flags = &h0		undobuffer As string	#tag EndProperty	#tag Property, Flags = &h0		undofile As folderitem	#tag EndProperty	#tag Property, Flags = &h0		undonext As string	#tag EndProperty	#tag Property, Flags = &h0		undoprevious As string	#tag EndProperty	#tag Property, Flags = &h0		undosellength As integer	#tag EndProperty	#tag Property, Flags = &h0		undoselstart As integer	#tag EndProperty	#tag Property, Flags = &h0		undoseltext As string	#tag EndProperty	#tag Property, Flags = &h0		undostack(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		undostream As binarystream	#tag EndProperty	#tag Property, Flags = &h0		undotext As string	#tag EndProperty	#tag Property, Flags = &h0		undotextlength As integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Alignment"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			EditorType="Enum"			InheritedFrom="EditField"			#tag EnumValues				"0 - Default"				"1 - Left"				"2 - Center"				"3 - Right"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="AutomaticallyCheckSpelling"			Visible=true			Group="Behavior"			InitialValue="True"			Type="boolean"			InheritedFrom="TextArea"		#tag EndViewProperty		#tag ViewProperty			Name="BackColor"			Visible=true			Group="Appearance"			InitialValue="&hFFFFFF"			Type="Color"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="backtext"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Bold"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Border"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="changeignore"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="DataField"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataField"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="DataSource"			Visible=true			Group="Database Binding"			Type="String"			EditorType="DataSource"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Format"			Visible=true			Group="Appearance"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="gkey"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="22"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="HideSelection"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="TextArea"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="isreplace"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Italic"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="lastlabeltext"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LimitText"			Visible=true			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Mask"			Visible=true			Group="Behavior"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="maxundo"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="maxwidth"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="Multiline"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="plain"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="prefix"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="psuffix"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="ReadOnly"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="replacetext"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollbarHorizontal"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="ScrollbarVertical"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Styled"			Visible=true			Group="Appearance"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Text"			Visible=true			Group="Initial State"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextColor"			Visible=true			Group="Appearance"			InitialValue="&h000000"			Type="Color"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextFont"			Visible=true			Group="Font"			InitialValue="System"			Type="String"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextSize"			Visible=true			Group="Font"			InitialValue="0"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="TextUnit"			Visible=true			Group="Font"			InitialValue="0"			Type="FontUnits"			EditorType="Enum"			InheritedFrom="TextArea"			#tag EnumValues				"0 - Default"				"1 - Pixel"				"2 - Point"				"3 - Inch"				"4 - Millimeter"			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Underline"			Visible=true			Group="Font"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="undobuffer"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="undonext"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="undoprevious"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="undosellength"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="undoselstart"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="undoseltext"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="undotext"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="undotextlength"			Group="Behavior"			InitialValue="0"			Type="integer"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="EditField"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="80"			Type="Integer"			InheritedFrom="EditField"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass